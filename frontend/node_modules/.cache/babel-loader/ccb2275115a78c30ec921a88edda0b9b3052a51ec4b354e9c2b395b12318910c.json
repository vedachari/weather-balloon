{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { warnOnce } from '@mui/x-internals/warning';\nimport { useSelector } from \"../../../store/useSelector.js\";\nimport { selectorChartDrawingArea } from \"../../corePlugins/useChartDimensions/useChartDimensions.selectors.js\";\nimport { defaultizeAxis } from \"./defaultizeAxis.js\";\nimport { selectorChartsInteractionIsInitialized } from \"../useChartInteraction/index.js\";\nimport { selectorChartPolarCenter, selectorChartRadiusAxis, selectorChartRotationAxis } from \"./useChartPolarAxis.selectors.js\";\nimport { getSVGPoint } from \"../../../getSVGPoint.js\";\nimport { generatePolar2svg, generateSvg2polar, generateSvg2rotation } from \"./coordinateTransformation.js\";\nimport { getAxisIndex } from \"./getAxisIndex.js\";\nimport { selectorChartSeriesProcessed } from \"../../corePlugins/useChartSeries/index.js\";\nimport { checkHasInteractionPlugin } from \"../useChartInteraction/checkHasInteractionPlugin.js\";\nexport const useChartPolarAxis = ({\n  params,\n  store,\n  seriesConfig,\n  svgRef,\n  instance\n}) => {\n  const {\n    rotationAxis,\n    radiusAxis,\n    dataset\n  } = params;\n  if (process.env.NODE_ENV !== 'production') {\n    const ids = [...(rotationAxis ?? []), ...(radiusAxis ?? [])].filter(axis => axis.id).map(axis => axis.id);\n    const duplicates = new Set(ids.filter((id, index) => ids.indexOf(id) !== index));\n    if (duplicates.size > 0) {\n      warnOnce([`MUI X Charts: The following axis ids are duplicated: ${Array.from(duplicates).join(', ')}.`, `Please make sure that each axis has a unique id.`].join('\\n'), 'error');\n    }\n  }\n  const drawingArea = useSelector(store, selectorChartDrawingArea);\n  const processedSeries = useSelector(store, selectorChartSeriesProcessed);\n  const center = useSelector(store, selectorChartPolarCenter);\n  const isInteractionEnabled = useSelector(store, selectorChartsInteractionIsInitialized);\n  const {\n    axis: rotationAxisWithScale,\n    axisIds: rotationAxisIds\n  } = useSelector(store, selectorChartRotationAxis);\n  const {\n    axis: radiusAxisWithScale,\n    axisIds: radiusAxisIds\n  } = useSelector(store, selectorChartRadiusAxis);\n\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useChartPolarAxis`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    store.update(prev => _extends({}, prev, {\n      polarAxis: _extends({}, prev.polarAxis, {\n        rotation: defaultizeAxis(rotationAxis, dataset, 'rotation'),\n        radius: defaultizeAxis(radiusAxis, dataset, 'radius')\n      })\n    }));\n  }, [seriesConfig, drawingArea, rotationAxis, radiusAxis, dataset, store]);\n  const svg2rotation = React.useMemo(() => generateSvg2rotation({\n    cx: center.cx,\n    cy: center.cy\n  }), [center.cx, center.cy]);\n  const svg2polar = React.useMemo(() => generateSvg2polar({\n    cx: center.cx,\n    cy: center.cy\n  }), [center.cx, center.cy]);\n  const polar2svg = React.useMemo(() => generatePolar2svg({\n    cx: center.cx,\n    cy: center.cy\n  }), [center.cx, center.cy]);\n  const usedRotationAxisId = rotationAxisIds[0];\n  const usedRadiusAxisId = radiusAxisIds[0];\n\n  // Use a ref to avoid rerendering on every mousemove event.\n  const mousePosition = React.useRef({\n    isInChart: false\n  });\n  const hasInteractionPlugin = checkHasInteractionPlugin(instance);\n  React.useEffect(() => {\n    const element = svgRef.current;\n    if (!isInteractionEnabled || !hasInteractionPlugin || element === null || params.disableAxisListener) {\n      return () => {};\n    }\n\n    // Clean the interaction when the mouse leaves the chart.\n    const moveEndHandler = instance.addInteractionListener('moveEnd', event => {\n      if (!event.detail.activeGestures.pan) {\n        mousePosition.current.isInChart = false;\n        instance.cleanInteraction();\n      }\n    });\n    const panEndHandler = instance.addInteractionListener('panEnd', event => {\n      if (!event.detail.activeGestures.move) {\n        mousePosition.current.isInChart = false;\n        instance.cleanInteraction?.();\n      }\n    });\n    const pressEndHandler = instance.addInteractionListener('quickPressEnd', event => {\n      if (!event.detail.activeGestures.move && !event.detail.activeGestures.pan) {\n        mousePosition.current.isInChart = false;\n        instance.cleanInteraction?.();\n      }\n    });\n    const gestureHandler = event => {\n      const srcEvent = event.detail.srcEvent;\n\n      // On touch, we want to allow user to interact with the entire svg area in\n      // order to better display the tooltip.\n      if (event.detail.srcEvent.pointerType === 'touch') {\n        const svgRect = element.getBoundingClientRect();\n        if (srcEvent.clientX < svgRect.left || srcEvent.clientX > svgRect.right || srcEvent.clientY < svgRect.top || srcEvent.clientY > svgRect.bottom) {\n          mousePosition.current.isInChart = false;\n          instance.cleanInteraction?.();\n          return;\n        }\n        const svgPoint = getSVGPoint(element, srcEvent);\n        mousePosition.current.isInChart = true;\n        instance.setPointerCoordinate?.(svgPoint);\n        return;\n      }\n\n      // On mouse, we want to restrict the interaction to the drawing area and radar circle.\n\n      const svgPoint = getSVGPoint(element, srcEvent);\n\n      // Test if it's in the drawing area\n      if (!instance.isPointInside(svgPoint.x, svgPoint.y, event.detail.target)) {\n        if (mousePosition.current.isInChart) {\n          instance.cleanInteraction?.();\n          mousePosition.current.isInChart = false;\n        }\n        return;\n      }\n\n      // Test if it's in the radar circle\n      const radiusSquare = (center.cx - svgPoint.x) ** 2 + (center.cy - svgPoint.y) ** 2;\n      const maxRadius = radiusAxisWithScale[usedRadiusAxisId].scale.range()[1];\n      if (radiusSquare > maxRadius ** 2) {\n        if (mousePosition.current.isInChart) {\n          instance.cleanInteraction?.();\n          mousePosition.current.isInChart = false;\n        }\n        return;\n      }\n      mousePosition.current.isInChart = true;\n      instance.setPointerCoordinate?.(svgPoint);\n    };\n    const moveHandler = instance.addInteractionListener('move', gestureHandler);\n    const panHandler = instance.addInteractionListener('pan', gestureHandler);\n    const pressHandler = instance.addInteractionListener('quickPress', gestureHandler);\n    return () => {\n      moveHandler.cleanup();\n      moveEndHandler.cleanup();\n      panHandler.cleanup();\n      panEndHandler.cleanup();\n      pressHandler.cleanup();\n      pressEndHandler.cleanup();\n    };\n  }, [svgRef, store, center, radiusAxisWithScale, usedRadiusAxisId, rotationAxisWithScale, usedRotationAxisId, instance, params.disableAxisListener, isInteractionEnabled, svg2rotation, hasInteractionPlugin]);\n  React.useEffect(() => {\n    const element = svgRef.current;\n    const onAxisClick = params.onAxisClick;\n    if (element === null || !onAxisClick) {\n      return () => {};\n    }\n    const axisClickHandler = instance.addInteractionListener('tap', event => {\n      let dataIndex = null;\n      let isRotationAxis = false;\n      const svgPoint = getSVGPoint(element, event.detail.srcEvent);\n      const rotation = generateSvg2rotation(center)(svgPoint.x, svgPoint.y);\n      const rotationIndex = getAxisIndex(rotationAxisWithScale[usedRotationAxisId], rotation);\n      isRotationAxis = rotationIndex !== -1;\n      dataIndex = isRotationAxis ? rotationIndex : null; // radius index is not yet implemented.\n\n      const USED_AXIS_ID = isRotationAxis ? usedRotationAxisId : usedRadiusAxisId;\n      if (dataIndex == null || dataIndex === -1) {\n        return;\n      }\n\n      // The .data exist because otherwise the dataIndex would be null or -1.\n      const axisValue = (isRotationAxis ? rotationAxisWithScale : radiusAxisWithScale)[USED_AXIS_ID].data[dataIndex];\n      const seriesValues = {};\n      Object.keys(processedSeries).filter(seriesType => seriesType === 'radar').forEach(seriesType => {\n        processedSeries[seriesType]?.seriesOrder.forEach(seriesId => {\n          const seriesItem = processedSeries[seriesType].series[seriesId];\n          seriesValues[seriesId] = seriesItem.data[dataIndex];\n        });\n      });\n      onAxisClick(event.detail.srcEvent, {\n        dataIndex,\n        axisValue,\n        seriesValues\n      });\n    });\n    return () => {\n      axisClickHandler.cleanup();\n    };\n  }, [center, instance, params.onAxisClick, processedSeries, radiusAxisWithScale, rotationAxisWithScale, svgRef, usedRadiusAxisId, usedRotationAxisId]);\n  return {\n    instance: {\n      svg2polar,\n      svg2rotation,\n      polar2svg\n    }\n  };\n};\nuseChartPolarAxis.params = {\n  rotationAxis: true,\n  radiusAxis: true,\n  dataset: true,\n  disableAxisListener: true,\n  onAxisClick: true\n};\nuseChartPolarAxis.getInitialState = params => ({\n  polarAxis: {\n    rotation: defaultizeAxis(params.rotationAxis, params.dataset, 'rotation'),\n    radius: defaultizeAxis(params.radiusAxis, params.dataset, 'radius')\n  }\n});","map":{"version":3,"names":["_extends","React","warnOnce","useSelector","selectorChartDrawingArea","defaultizeAxis","selectorChartsInteractionIsInitialized","selectorChartPolarCenter","selectorChartRadiusAxis","selectorChartRotationAxis","getSVGPoint","generatePolar2svg","generateSvg2polar","generateSvg2rotation","getAxisIndex","selectorChartSeriesProcessed","checkHasInteractionPlugin","useChartPolarAxis","params","store","seriesConfig","svgRef","instance","rotationAxis","radiusAxis","dataset","process","env","NODE_ENV","ids","filter","axis","id","map","duplicates","Set","index","indexOf","size","Array","from","join","drawingArea","processedSeries","center","isInteractionEnabled","rotationAxisWithScale","axisIds","rotationAxisIds","radiusAxisWithScale","radiusAxisIds","isFirstRender","useRef","useEffect","current","update","prev","polarAxis","rotation","radius","svg2rotation","useMemo","cx","cy","svg2polar","polar2svg","usedRotationAxisId","usedRadiusAxisId","mousePosition","isInChart","hasInteractionPlugin","element","disableAxisListener","moveEndHandler","addInteractionListener","event","detail","activeGestures","pan","cleanInteraction","panEndHandler","move","pressEndHandler","gestureHandler","srcEvent","pointerType","svgRect","getBoundingClientRect","clientX","left","right","clientY","top","bottom","svgPoint","setPointerCoordinate","isPointInside","x","y","target","radiusSquare","maxRadius","scale","range","moveHandler","panHandler","pressHandler","cleanup","onAxisClick","axisClickHandler","dataIndex","isRotationAxis","rotationIndex","USED_AXIS_ID","axisValue","data","seriesValues","Object","keys","seriesType","forEach","seriesOrder","seriesId","seriesItem","series","getInitialState"],"sources":["/Users/vedachari/projects/weather-balloon/node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartPolarAxis/useChartPolarAxis.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { warnOnce } from '@mui/x-internals/warning';\nimport { useSelector } from \"../../../store/useSelector.js\";\nimport { selectorChartDrawingArea } from \"../../corePlugins/useChartDimensions/useChartDimensions.selectors.js\";\nimport { defaultizeAxis } from \"./defaultizeAxis.js\";\nimport { selectorChartsInteractionIsInitialized } from \"../useChartInteraction/index.js\";\nimport { selectorChartPolarCenter, selectorChartRadiusAxis, selectorChartRotationAxis } from \"./useChartPolarAxis.selectors.js\";\nimport { getSVGPoint } from \"../../../getSVGPoint.js\";\nimport { generatePolar2svg, generateSvg2polar, generateSvg2rotation } from \"./coordinateTransformation.js\";\nimport { getAxisIndex } from \"./getAxisIndex.js\";\nimport { selectorChartSeriesProcessed } from \"../../corePlugins/useChartSeries/index.js\";\nimport { checkHasInteractionPlugin } from \"../useChartInteraction/checkHasInteractionPlugin.js\";\nexport const useChartPolarAxis = ({\n  params,\n  store,\n  seriesConfig,\n  svgRef,\n  instance\n}) => {\n  const {\n    rotationAxis,\n    radiusAxis,\n    dataset\n  } = params;\n  if (process.env.NODE_ENV !== 'production') {\n    const ids = [...(rotationAxis ?? []), ...(radiusAxis ?? [])].filter(axis => axis.id).map(axis => axis.id);\n    const duplicates = new Set(ids.filter((id, index) => ids.indexOf(id) !== index));\n    if (duplicates.size > 0) {\n      warnOnce([`MUI X Charts: The following axis ids are duplicated: ${Array.from(duplicates).join(', ')}.`, `Please make sure that each axis has a unique id.`].join('\\n'), 'error');\n    }\n  }\n  const drawingArea = useSelector(store, selectorChartDrawingArea);\n  const processedSeries = useSelector(store, selectorChartSeriesProcessed);\n  const center = useSelector(store, selectorChartPolarCenter);\n  const isInteractionEnabled = useSelector(store, selectorChartsInteractionIsInitialized);\n  const {\n    axis: rotationAxisWithScale,\n    axisIds: rotationAxisIds\n  } = useSelector(store, selectorChartRotationAxis);\n  const {\n    axis: radiusAxisWithScale,\n    axisIds: radiusAxisIds\n  } = useSelector(store, selectorChartRadiusAxis);\n\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useChartPolarAxis`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    store.update(prev => _extends({}, prev, {\n      polarAxis: _extends({}, prev.polarAxis, {\n        rotation: defaultizeAxis(rotationAxis, dataset, 'rotation'),\n        radius: defaultizeAxis(radiusAxis, dataset, 'radius')\n      })\n    }));\n  }, [seriesConfig, drawingArea, rotationAxis, radiusAxis, dataset, store]);\n  const svg2rotation = React.useMemo(() => generateSvg2rotation({\n    cx: center.cx,\n    cy: center.cy\n  }), [center.cx, center.cy]);\n  const svg2polar = React.useMemo(() => generateSvg2polar({\n    cx: center.cx,\n    cy: center.cy\n  }), [center.cx, center.cy]);\n  const polar2svg = React.useMemo(() => generatePolar2svg({\n    cx: center.cx,\n    cy: center.cy\n  }), [center.cx, center.cy]);\n  const usedRotationAxisId = rotationAxisIds[0];\n  const usedRadiusAxisId = radiusAxisIds[0];\n\n  // Use a ref to avoid rerendering on every mousemove event.\n  const mousePosition = React.useRef({\n    isInChart: false\n  });\n  const hasInteractionPlugin = checkHasInteractionPlugin(instance);\n  React.useEffect(() => {\n    const element = svgRef.current;\n    if (!isInteractionEnabled || !hasInteractionPlugin || element === null || params.disableAxisListener) {\n      return () => {};\n    }\n\n    // Clean the interaction when the mouse leaves the chart.\n    const moveEndHandler = instance.addInteractionListener('moveEnd', event => {\n      if (!event.detail.activeGestures.pan) {\n        mousePosition.current.isInChart = false;\n        instance.cleanInteraction();\n      }\n    });\n    const panEndHandler = instance.addInteractionListener('panEnd', event => {\n      if (!event.detail.activeGestures.move) {\n        mousePosition.current.isInChart = false;\n        instance.cleanInteraction?.();\n      }\n    });\n    const pressEndHandler = instance.addInteractionListener('quickPressEnd', event => {\n      if (!event.detail.activeGestures.move && !event.detail.activeGestures.pan) {\n        mousePosition.current.isInChart = false;\n        instance.cleanInteraction?.();\n      }\n    });\n    const gestureHandler = event => {\n      const srcEvent = event.detail.srcEvent;\n\n      // On touch, we want to allow user to interact with the entire svg area in\n      // order to better display the tooltip.\n      if (event.detail.srcEvent.pointerType === 'touch') {\n        const svgRect = element.getBoundingClientRect();\n        if (srcEvent.clientX < svgRect.left || srcEvent.clientX > svgRect.right || srcEvent.clientY < svgRect.top || srcEvent.clientY > svgRect.bottom) {\n          mousePosition.current.isInChart = false;\n          instance.cleanInteraction?.();\n          return;\n        }\n        const svgPoint = getSVGPoint(element, srcEvent);\n        mousePosition.current.isInChart = true;\n        instance.setPointerCoordinate?.(svgPoint);\n        return;\n      }\n\n      // On mouse, we want to restrict the interaction to the drawing area and radar circle.\n\n      const svgPoint = getSVGPoint(element, srcEvent);\n\n      // Test if it's in the drawing area\n      if (!instance.isPointInside(svgPoint.x, svgPoint.y, event.detail.target)) {\n        if (mousePosition.current.isInChart) {\n          instance.cleanInteraction?.();\n          mousePosition.current.isInChart = false;\n        }\n        return;\n      }\n\n      // Test if it's in the radar circle\n      const radiusSquare = (center.cx - svgPoint.x) ** 2 + (center.cy - svgPoint.y) ** 2;\n      const maxRadius = radiusAxisWithScale[usedRadiusAxisId].scale.range()[1];\n      if (radiusSquare > maxRadius ** 2) {\n        if (mousePosition.current.isInChart) {\n          instance.cleanInteraction?.();\n          mousePosition.current.isInChart = false;\n        }\n        return;\n      }\n      mousePosition.current.isInChart = true;\n      instance.setPointerCoordinate?.(svgPoint);\n    };\n    const moveHandler = instance.addInteractionListener('move', gestureHandler);\n    const panHandler = instance.addInteractionListener('pan', gestureHandler);\n    const pressHandler = instance.addInteractionListener('quickPress', gestureHandler);\n    return () => {\n      moveHandler.cleanup();\n      moveEndHandler.cleanup();\n      panHandler.cleanup();\n      panEndHandler.cleanup();\n      pressHandler.cleanup();\n      pressEndHandler.cleanup();\n    };\n  }, [svgRef, store, center, radiusAxisWithScale, usedRadiusAxisId, rotationAxisWithScale, usedRotationAxisId, instance, params.disableAxisListener, isInteractionEnabled, svg2rotation, hasInteractionPlugin]);\n  React.useEffect(() => {\n    const element = svgRef.current;\n    const onAxisClick = params.onAxisClick;\n    if (element === null || !onAxisClick) {\n      return () => {};\n    }\n    const axisClickHandler = instance.addInteractionListener('tap', event => {\n      let dataIndex = null;\n      let isRotationAxis = false;\n      const svgPoint = getSVGPoint(element, event.detail.srcEvent);\n      const rotation = generateSvg2rotation(center)(svgPoint.x, svgPoint.y);\n      const rotationIndex = getAxisIndex(rotationAxisWithScale[usedRotationAxisId], rotation);\n      isRotationAxis = rotationIndex !== -1;\n      dataIndex = isRotationAxis ? rotationIndex : null; // radius index is not yet implemented.\n\n      const USED_AXIS_ID = isRotationAxis ? usedRotationAxisId : usedRadiusAxisId;\n      if (dataIndex == null || dataIndex === -1) {\n        return;\n      }\n\n      // The .data exist because otherwise the dataIndex would be null or -1.\n      const axisValue = (isRotationAxis ? rotationAxisWithScale : radiusAxisWithScale)[USED_AXIS_ID].data[dataIndex];\n      const seriesValues = {};\n      Object.keys(processedSeries).filter(seriesType => seriesType === 'radar').forEach(seriesType => {\n        processedSeries[seriesType]?.seriesOrder.forEach(seriesId => {\n          const seriesItem = processedSeries[seriesType].series[seriesId];\n          seriesValues[seriesId] = seriesItem.data[dataIndex];\n        });\n      });\n      onAxisClick(event.detail.srcEvent, {\n        dataIndex,\n        axisValue,\n        seriesValues\n      });\n    });\n    return () => {\n      axisClickHandler.cleanup();\n    };\n  }, [center, instance, params.onAxisClick, processedSeries, radiusAxisWithScale, rotationAxisWithScale, svgRef, usedRadiusAxisId, usedRotationAxisId]);\n  return {\n    instance: {\n      svg2polar,\n      svg2rotation,\n      polar2svg\n    }\n  };\n};\nuseChartPolarAxis.params = {\n  rotationAxis: true,\n  radiusAxis: true,\n  dataset: true,\n  disableAxisListener: true,\n  onAxisClick: true\n};\nuseChartPolarAxis.getInitialState = params => ({\n  polarAxis: {\n    rotation: defaultizeAxis(params.rotationAxis, params.dataset, 'rotation'),\n    radius: defaultizeAxis(params.radiusAxis, params.dataset, 'radius')\n  }\n});"],"mappings":"AAAA,YAAY;;AAEZ,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,QAAQ,0BAA0B;AACnD,SAASC,WAAW,QAAQ,+BAA+B;AAC3D,SAASC,wBAAwB,QAAQ,sEAAsE;AAC/G,SAASC,cAAc,QAAQ,qBAAqB;AACpD,SAASC,sCAAsC,QAAQ,iCAAiC;AACxF,SAASC,wBAAwB,EAAEC,uBAAuB,EAAEC,yBAAyB,QAAQ,kCAAkC;AAC/H,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,iBAAiB,EAAEC,iBAAiB,EAAEC,oBAAoB,QAAQ,+BAA+B;AAC1G,SAASC,YAAY,QAAQ,mBAAmB;AAChD,SAASC,4BAA4B,QAAQ,2CAA2C;AACxF,SAASC,yBAAyB,QAAQ,qDAAqD;AAC/F,OAAO,MAAMC,iBAAiB,GAAGA,CAAC;EAChCC,MAAM;EACNC,KAAK;EACLC,YAAY;EACZC,MAAM;EACNC;AACF,CAAC,KAAK;EACJ,MAAM;IACJC,YAAY;IACZC,UAAU;IACVC;EACF,CAAC,GAAGP,MAAM;EACV,IAAIQ,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzC,MAAMC,GAAG,GAAG,CAAC,IAAIN,YAAY,IAAI,EAAE,CAAC,EAAE,IAAIC,UAAU,IAAI,EAAE,CAAC,CAAC,CAACM,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,CAAC,CAACC,GAAG,CAACF,IAAI,IAAIA,IAAI,CAACC,EAAE,CAAC;IACzG,MAAME,UAAU,GAAG,IAAIC,GAAG,CAACN,GAAG,CAACC,MAAM,CAAC,CAACE,EAAE,EAAEI,KAAK,KAAKP,GAAG,CAACQ,OAAO,CAACL,EAAE,CAAC,KAAKI,KAAK,CAAC,CAAC;IAChF,IAAIF,UAAU,CAACI,IAAI,GAAG,CAAC,EAAE;MACvBpC,QAAQ,CAAC,CAAC,wDAAwDqC,KAAK,CAACC,IAAI,CAACN,UAAU,CAAC,CAACO,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,kDAAkD,CAAC,CAACA,IAAI,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC;IAClL;EACF;EACA,MAAMC,WAAW,GAAGvC,WAAW,CAACgB,KAAK,EAAEf,wBAAwB,CAAC;EAChE,MAAMuC,eAAe,GAAGxC,WAAW,CAACgB,KAAK,EAAEJ,4BAA4B,CAAC;EACxE,MAAM6B,MAAM,GAAGzC,WAAW,CAACgB,KAAK,EAAEZ,wBAAwB,CAAC;EAC3D,MAAMsC,oBAAoB,GAAG1C,WAAW,CAACgB,KAAK,EAAEb,sCAAsC,CAAC;EACvF,MAAM;IACJyB,IAAI,EAAEe,qBAAqB;IAC3BC,OAAO,EAAEC;EACX,CAAC,GAAG7C,WAAW,CAACgB,KAAK,EAAEV,yBAAyB,CAAC;EACjD,MAAM;IACJsB,IAAI,EAAEkB,mBAAmB;IACzBF,OAAO,EAAEG;EACX,CAAC,GAAG/C,WAAW,CAACgB,KAAK,EAAEX,uBAAuB,CAAC;;EAE/C;EACA;EACA,MAAM2C,aAAa,GAAGlD,KAAK,CAACmD,MAAM,CAAC,IAAI,CAAC;EACxCnD,KAAK,CAACoD,SAAS,CAAC,MAAM;IACpB,IAAIF,aAAa,CAACG,OAAO,EAAE;MACzBH,aAAa,CAACG,OAAO,GAAG,KAAK;MAC7B;IACF;IACAnC,KAAK,CAACoC,MAAM,CAACC,IAAI,IAAIxD,QAAQ,CAAC,CAAC,CAAC,EAAEwD,IAAI,EAAE;MACtCC,SAAS,EAAEzD,QAAQ,CAAC,CAAC,CAAC,EAAEwD,IAAI,CAACC,SAAS,EAAE;QACtCC,QAAQ,EAAErD,cAAc,CAACkB,YAAY,EAAEE,OAAO,EAAE,UAAU,CAAC;QAC3DkC,MAAM,EAAEtD,cAAc,CAACmB,UAAU,EAAEC,OAAO,EAAE,QAAQ;MACtD,CAAC;IACH,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,CAACL,YAAY,EAAEsB,WAAW,EAAEnB,YAAY,EAAEC,UAAU,EAAEC,OAAO,EAAEN,KAAK,CAAC,CAAC;EACzE,MAAMyC,YAAY,GAAG3D,KAAK,CAAC4D,OAAO,CAAC,MAAMhD,oBAAoB,CAAC;IAC5DiD,EAAE,EAAElB,MAAM,CAACkB,EAAE;IACbC,EAAE,EAAEnB,MAAM,CAACmB;EACb,CAAC,CAAC,EAAE,CAACnB,MAAM,CAACkB,EAAE,EAAElB,MAAM,CAACmB,EAAE,CAAC,CAAC;EAC3B,MAAMC,SAAS,GAAG/D,KAAK,CAAC4D,OAAO,CAAC,MAAMjD,iBAAiB,CAAC;IACtDkD,EAAE,EAAElB,MAAM,CAACkB,EAAE;IACbC,EAAE,EAAEnB,MAAM,CAACmB;EACb,CAAC,CAAC,EAAE,CAACnB,MAAM,CAACkB,EAAE,EAAElB,MAAM,CAACmB,EAAE,CAAC,CAAC;EAC3B,MAAME,SAAS,GAAGhE,KAAK,CAAC4D,OAAO,CAAC,MAAMlD,iBAAiB,CAAC;IACtDmD,EAAE,EAAElB,MAAM,CAACkB,EAAE;IACbC,EAAE,EAAEnB,MAAM,CAACmB;EACb,CAAC,CAAC,EAAE,CAACnB,MAAM,CAACkB,EAAE,EAAElB,MAAM,CAACmB,EAAE,CAAC,CAAC;EAC3B,MAAMG,kBAAkB,GAAGlB,eAAe,CAAC,CAAC,CAAC;EAC7C,MAAMmB,gBAAgB,GAAGjB,aAAa,CAAC,CAAC,CAAC;;EAEzC;EACA,MAAMkB,aAAa,GAAGnE,KAAK,CAACmD,MAAM,CAAC;IACjCiB,SAAS,EAAE;EACb,CAAC,CAAC;EACF,MAAMC,oBAAoB,GAAGtD,yBAAyB,CAACM,QAAQ,CAAC;EAChErB,KAAK,CAACoD,SAAS,CAAC,MAAM;IACpB,MAAMkB,OAAO,GAAGlD,MAAM,CAACiC,OAAO;IAC9B,IAAI,CAACT,oBAAoB,IAAI,CAACyB,oBAAoB,IAAIC,OAAO,KAAK,IAAI,IAAIrD,MAAM,CAACsD,mBAAmB,EAAE;MACpG,OAAO,MAAM,CAAC,CAAC;IACjB;;IAEA;IACA,MAAMC,cAAc,GAAGnD,QAAQ,CAACoD,sBAAsB,CAAC,SAAS,EAAEC,KAAK,IAAI;MACzE,IAAI,CAACA,KAAK,CAACC,MAAM,CAACC,cAAc,CAACC,GAAG,EAAE;QACpCV,aAAa,CAACd,OAAO,CAACe,SAAS,GAAG,KAAK;QACvC/C,QAAQ,CAACyD,gBAAgB,CAAC,CAAC;MAC7B;IACF,CAAC,CAAC;IACF,MAAMC,aAAa,GAAG1D,QAAQ,CAACoD,sBAAsB,CAAC,QAAQ,EAAEC,KAAK,IAAI;MACvE,IAAI,CAACA,KAAK,CAACC,MAAM,CAACC,cAAc,CAACI,IAAI,EAAE;QACrCb,aAAa,CAACd,OAAO,CAACe,SAAS,GAAG,KAAK;QACvC/C,QAAQ,CAACyD,gBAAgB,GAAG,CAAC;MAC/B;IACF,CAAC,CAAC;IACF,MAAMG,eAAe,GAAG5D,QAAQ,CAACoD,sBAAsB,CAAC,eAAe,EAAEC,KAAK,IAAI;MAChF,IAAI,CAACA,KAAK,CAACC,MAAM,CAACC,cAAc,CAACI,IAAI,IAAI,CAACN,KAAK,CAACC,MAAM,CAACC,cAAc,CAACC,GAAG,EAAE;QACzEV,aAAa,CAACd,OAAO,CAACe,SAAS,GAAG,KAAK;QACvC/C,QAAQ,CAACyD,gBAAgB,GAAG,CAAC;MAC/B;IACF,CAAC,CAAC;IACF,MAAMI,cAAc,GAAGR,KAAK,IAAI;MAC9B,MAAMS,QAAQ,GAAGT,KAAK,CAACC,MAAM,CAACQ,QAAQ;;MAEtC;MACA;MACA,IAAIT,KAAK,CAACC,MAAM,CAACQ,QAAQ,CAACC,WAAW,KAAK,OAAO,EAAE;QACjD,MAAMC,OAAO,GAAGf,OAAO,CAACgB,qBAAqB,CAAC,CAAC;QAC/C,IAAIH,QAAQ,CAACI,OAAO,GAAGF,OAAO,CAACG,IAAI,IAAIL,QAAQ,CAACI,OAAO,GAAGF,OAAO,CAACI,KAAK,IAAIN,QAAQ,CAACO,OAAO,GAAGL,OAAO,CAACM,GAAG,IAAIR,QAAQ,CAACO,OAAO,GAAGL,OAAO,CAACO,MAAM,EAAE;UAC9IzB,aAAa,CAACd,OAAO,CAACe,SAAS,GAAG,KAAK;UACvC/C,QAAQ,CAACyD,gBAAgB,GAAG,CAAC;UAC7B;QACF;QACA,MAAMe,QAAQ,GAAGpF,WAAW,CAAC6D,OAAO,EAAEa,QAAQ,CAAC;QAC/ChB,aAAa,CAACd,OAAO,CAACe,SAAS,GAAG,IAAI;QACtC/C,QAAQ,CAACyE,oBAAoB,GAAGD,QAAQ,CAAC;QACzC;MACF;;MAEA;;MAEA,MAAMA,QAAQ,GAAGpF,WAAW,CAAC6D,OAAO,EAAEa,QAAQ,CAAC;;MAE/C;MACA,IAAI,CAAC9D,QAAQ,CAAC0E,aAAa,CAACF,QAAQ,CAACG,CAAC,EAAEH,QAAQ,CAACI,CAAC,EAAEvB,KAAK,CAACC,MAAM,CAACuB,MAAM,CAAC,EAAE;QACxE,IAAI/B,aAAa,CAACd,OAAO,CAACe,SAAS,EAAE;UACnC/C,QAAQ,CAACyD,gBAAgB,GAAG,CAAC;UAC7BX,aAAa,CAACd,OAAO,CAACe,SAAS,GAAG,KAAK;QACzC;QACA;MACF;;MAEA;MACA,MAAM+B,YAAY,GAAG,CAACxD,MAAM,CAACkB,EAAE,GAAGgC,QAAQ,CAACG,CAAC,KAAK,CAAC,GAAG,CAACrD,MAAM,CAACmB,EAAE,GAAG+B,QAAQ,CAACI,CAAC,KAAK,CAAC;MAClF,MAAMG,SAAS,GAAGpD,mBAAmB,CAACkB,gBAAgB,CAAC,CAACmC,KAAK,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;MACxE,IAAIH,YAAY,GAAGC,SAAS,IAAI,CAAC,EAAE;QACjC,IAAIjC,aAAa,CAACd,OAAO,CAACe,SAAS,EAAE;UACnC/C,QAAQ,CAACyD,gBAAgB,GAAG,CAAC;UAC7BX,aAAa,CAACd,OAAO,CAACe,SAAS,GAAG,KAAK;QACzC;QACA;MACF;MACAD,aAAa,CAACd,OAAO,CAACe,SAAS,GAAG,IAAI;MACtC/C,QAAQ,CAACyE,oBAAoB,GAAGD,QAAQ,CAAC;IAC3C,CAAC;IACD,MAAMU,WAAW,GAAGlF,QAAQ,CAACoD,sBAAsB,CAAC,MAAM,EAAES,cAAc,CAAC;IAC3E,MAAMsB,UAAU,GAAGnF,QAAQ,CAACoD,sBAAsB,CAAC,KAAK,EAAES,cAAc,CAAC;IACzE,MAAMuB,YAAY,GAAGpF,QAAQ,CAACoD,sBAAsB,CAAC,YAAY,EAAES,cAAc,CAAC;IAClF,OAAO,MAAM;MACXqB,WAAW,CAACG,OAAO,CAAC,CAAC;MACrBlC,cAAc,CAACkC,OAAO,CAAC,CAAC;MACxBF,UAAU,CAACE,OAAO,CAAC,CAAC;MACpB3B,aAAa,CAAC2B,OAAO,CAAC,CAAC;MACvBD,YAAY,CAACC,OAAO,CAAC,CAAC;MACtBzB,eAAe,CAACyB,OAAO,CAAC,CAAC;IAC3B,CAAC;EACH,CAAC,EAAE,CAACtF,MAAM,EAAEF,KAAK,EAAEyB,MAAM,EAAEK,mBAAmB,EAAEkB,gBAAgB,EAAErB,qBAAqB,EAAEoB,kBAAkB,EAAE5C,QAAQ,EAAEJ,MAAM,CAACsD,mBAAmB,EAAE3B,oBAAoB,EAAEe,YAAY,EAAEU,oBAAoB,CAAC,CAAC;EAC7MrE,KAAK,CAACoD,SAAS,CAAC,MAAM;IACpB,MAAMkB,OAAO,GAAGlD,MAAM,CAACiC,OAAO;IAC9B,MAAMsD,WAAW,GAAG1F,MAAM,CAAC0F,WAAW;IACtC,IAAIrC,OAAO,KAAK,IAAI,IAAI,CAACqC,WAAW,EAAE;MACpC,OAAO,MAAM,CAAC,CAAC;IACjB;IACA,MAAMC,gBAAgB,GAAGvF,QAAQ,CAACoD,sBAAsB,CAAC,KAAK,EAAEC,KAAK,IAAI;MACvE,IAAImC,SAAS,GAAG,IAAI;MACpB,IAAIC,cAAc,GAAG,KAAK;MAC1B,MAAMjB,QAAQ,GAAGpF,WAAW,CAAC6D,OAAO,EAAEI,KAAK,CAACC,MAAM,CAACQ,QAAQ,CAAC;MAC5D,MAAM1B,QAAQ,GAAG7C,oBAAoB,CAAC+B,MAAM,CAAC,CAACkD,QAAQ,CAACG,CAAC,EAAEH,QAAQ,CAACI,CAAC,CAAC;MACrE,MAAMc,aAAa,GAAGlG,YAAY,CAACgC,qBAAqB,CAACoB,kBAAkB,CAAC,EAAER,QAAQ,CAAC;MACvFqD,cAAc,GAAGC,aAAa,KAAK,CAAC,CAAC;MACrCF,SAAS,GAAGC,cAAc,GAAGC,aAAa,GAAG,IAAI,CAAC,CAAC;;MAEnD,MAAMC,YAAY,GAAGF,cAAc,GAAG7C,kBAAkB,GAAGC,gBAAgB;MAC3E,IAAI2C,SAAS,IAAI,IAAI,IAAIA,SAAS,KAAK,CAAC,CAAC,EAAE;QACzC;MACF;;MAEA;MACA,MAAMI,SAAS,GAAG,CAACH,cAAc,GAAGjE,qBAAqB,GAAGG,mBAAmB,EAAEgE,YAAY,CAAC,CAACE,IAAI,CAACL,SAAS,CAAC;MAC9G,MAAMM,YAAY,GAAG,CAAC,CAAC;MACvBC,MAAM,CAACC,IAAI,CAAC3E,eAAe,CAAC,CAACb,MAAM,CAACyF,UAAU,IAAIA,UAAU,KAAK,OAAO,CAAC,CAACC,OAAO,CAACD,UAAU,IAAI;QAC9F5E,eAAe,CAAC4E,UAAU,CAAC,EAAEE,WAAW,CAACD,OAAO,CAACE,QAAQ,IAAI;UAC3D,MAAMC,UAAU,GAAGhF,eAAe,CAAC4E,UAAU,CAAC,CAACK,MAAM,CAACF,QAAQ,CAAC;UAC/DN,YAAY,CAACM,QAAQ,CAAC,GAAGC,UAAU,CAACR,IAAI,CAACL,SAAS,CAAC;QACrD,CAAC,CAAC;MACJ,CAAC,CAAC;MACFF,WAAW,CAACjC,KAAK,CAACC,MAAM,CAACQ,QAAQ,EAAE;QACjC0B,SAAS;QACTI,SAAS;QACTE;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,OAAO,MAAM;MACXP,gBAAgB,CAACF,OAAO,CAAC,CAAC;IAC5B,CAAC;EACH,CAAC,EAAE,CAAC/D,MAAM,EAAEtB,QAAQ,EAAEJ,MAAM,CAAC0F,WAAW,EAAEjE,eAAe,EAAEM,mBAAmB,EAAEH,qBAAqB,EAAEzB,MAAM,EAAE8C,gBAAgB,EAAED,kBAAkB,CAAC,CAAC;EACrJ,OAAO;IACL5C,QAAQ,EAAE;MACR0C,SAAS;MACTJ,YAAY;MACZK;IACF;EACF,CAAC;AACH,CAAC;AACDhD,iBAAiB,CAACC,MAAM,GAAG;EACzBK,YAAY,EAAE,IAAI;EAClBC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,IAAI;EACb+C,mBAAmB,EAAE,IAAI;EACzBoC,WAAW,EAAE;AACf,CAAC;AACD3F,iBAAiB,CAAC4G,eAAe,GAAG3G,MAAM,KAAK;EAC7CuC,SAAS,EAAE;IACTC,QAAQ,EAAErD,cAAc,CAACa,MAAM,CAACK,YAAY,EAAEL,MAAM,CAACO,OAAO,EAAE,UAAU,CAAC;IACzEkC,MAAM,EAAEtD,cAAc,CAACa,MAAM,CAACM,UAAU,EAAEN,MAAM,CAACO,OAAO,EAAE,QAAQ;EACpE;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
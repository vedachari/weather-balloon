import { createSelector } from "../../utils/selectors.js";
import { selectorChartRawXAxis, selectorChartRawYAxis } from "./useChartCartesianAxisLayout.selectors.js";
import { selectorChartSeriesConfig, selectorChartSeriesProcessed } from "../../corePlugins/useChartSeries/index.js";
import { computeAxisValue } from "./computeAxisValue.js";
import { selectorChartNormalizedXScales, selectorChartNormalizedYScales, selectorChartXDomains, selectorChartYDomains, selectorChartZoomOptionsLookup } from "./useChartCartesianAxisRendering.selectors.js";
import { selectorChartDrawingArea } from "../../corePlugins/useChartDimensions/index.js";
import { ZOOM_SLIDER_PREVIEW_SIZE } from "../../../constants.js";
import { getRange } from "./getAxisScale.js";
import { zoomScaleRange } from "./zoom.js";
import { isOrdinalScale } from "../../../scaleGuards.js";
function createPreviewDrawingArea(axisDirection, mainChartDrawingArea) {
  return axisDirection === 'x' ? {
    left: 0,
    top: 0,
    width: mainChartDrawingArea.width,
    height: ZOOM_SLIDER_PREVIEW_SIZE,
    right: mainChartDrawingArea.width,
    bottom: ZOOM_SLIDER_PREVIEW_SIZE
  } : {
    left: 0,
    top: 0,
    width: ZOOM_SLIDER_PREVIEW_SIZE,
    height: mainChartDrawingArea.height,
    right: ZOOM_SLIDER_PREVIEW_SIZE,
    bottom: mainChartDrawingArea.height
  };
}
export const selectorChartPreviewXScales = createSelector([selectorChartRawXAxis, selectorChartDrawingArea, selectorChartZoomOptionsLookup, selectorChartNormalizedXScales, (_, axisId) => axisId], function selectorChartPreviewXScales(xAxes, chartDrawingArea, zoomOptions, normalizedXScales, axisId) {
  const hasAxis = xAxes?.some(axis => axis.id === axisId);
  const drawingArea = createPreviewDrawingArea(hasAxis ? 'x' : 'y', chartDrawingArea);
  const options = zoomOptions[axisId];
  const scales = {};
  xAxes?.forEach(eachAxis => {
    const axis = eachAxis;
    const scale = normalizedXScales[axis.id].copy();
    const range = getRange(drawingArea, 'x', axis);
    const zoomedRange = zoomScaleRange(range, [options.minStart, options.maxEnd]);
    scale.range(zoomedRange);
    scales[axis.id] = scale;
  });
  return scales;
});
export const selectorChartPreviewComputedXAxis = createSelector([selectorChartRawXAxis, selectorChartSeriesProcessed, selectorChartSeriesConfig, selectorChartZoomOptionsLookup, selectorChartDrawingArea, selectorChartPreviewXScales, selectorChartXDomains, (_, axisId) => axisId], (xAxes, formattedSeries, seriesConfig, zoomOptions, chartDrawingArea, scales, domains, axisId) => {
  const hasAxis = xAxes?.some(axis => axis.id === axisId);
  const drawingArea = createPreviewDrawingArea(hasAxis ? 'x' : 'y', chartDrawingArea);
  const options = zoomOptions[axisId];
  const zoomMap = new Map([[axisId, {
    axisId,
    start: options.minStart,
    end: options.maxEnd
  }]]);
  const computedAxes = computeAxisValue({
    scales,
    drawingArea,
    formattedSeries,
    axis: xAxes,
    seriesConfig,
    axisDirection: 'x',
    zoomMap,
    domains
  });
  if (computedAxes.axis[axisId]) {
    return {
      [axisId]: computedAxes.axis[axisId]
    };
  }
  return computedAxes.axis;
});
export const selectorChartPreviewYScales = createSelector([selectorChartRawYAxis, selectorChartDrawingArea, selectorChartZoomOptionsLookup, selectorChartNormalizedYScales, (_, axisId) => axisId], function selectorChartPreviewYScales(yAxes, chartDrawingArea, zoomOptions, normalizedYScales, axisId) {
  const hasAxis = yAxes?.some(axis => axis.id === axisId);
  const drawingArea = createPreviewDrawingArea(hasAxis ? 'y' : 'x', chartDrawingArea);
  const options = zoomOptions[axisId];
  const scales = {};
  yAxes?.forEach(eachAxis => {
    const axis = eachAxis;
    const scale = normalizedYScales[axis.id].copy();
    let range = getRange(drawingArea, 'y', axis);
    if (isOrdinalScale(scale)) {
      range = range.reverse();
    }
    const zoomedRange = zoomScaleRange(range, [options.minStart, options.maxEnd]);
    scale.range(zoomedRange);
    scales[axis.id] = scale;
  });
  return scales;
});
export const selectorChartPreviewComputedYAxis = createSelector([selectorChartRawYAxis, selectorChartSeriesProcessed, selectorChartSeriesConfig, selectorChartZoomOptionsLookup, selectorChartDrawingArea, selectorChartPreviewYScales, selectorChartYDomains, (_, axisId) => axisId], (yAxes, formattedSeries, seriesConfig, zoomOptions, chartDrawingArea, scales, domains, axisId) => {
  const hasAxis = yAxes?.some(axis => axis.id === axisId);
  const drawingArea = createPreviewDrawingArea(hasAxis ? 'y' : 'x', chartDrawingArea);
  const options = zoomOptions[axisId];
  const zoomMap = new Map([[axisId, {
    axisId,
    start: options.minStart,
    end: options.maxEnd
  }]]);
  const computedAxes = computeAxisValue({
    scales,
    drawingArea,
    formattedSeries,
    axis: yAxes,
    seriesConfig,
    axisDirection: 'y',
    zoomMap,
    domains
  });
  if (computedAxes.axis[axisId]) {
    return {
      [axisId]: computedAxes.axis[axisId]
    };
  }
  return computedAxes.axis;
});
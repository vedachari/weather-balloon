{"ast":null,"code":"/** @template T */\nexport default class FlatQueue {\n  constructor() {\n    /** @type T[] */\n    this.ids = [];\n\n    /** @type number[] */\n    this.values = [];\n\n    /** Number of items in the queue. */\n    this.length = 0;\n  }\n\n  /** Removes all items from the queue. */\n  clear() {\n    this.length = 0;\n  }\n\n  /**\n   * Adds `item` to the queue with the specified `priority`.\n   *\n   * `priority` must be a number. Items are sorted and returned from low to high priority. Multiple items\n   * with the same priority value can be added to the queue, but there is no guaranteed order between these items.\n   *\n   * @param {T} item\n   * @param {number} priority\n   */\n  push(item, priority) {\n    let pos = this.length++;\n    while (pos > 0) {\n      const parent = pos - 1 >> 1;\n      const parentValue = this.values[parent];\n      if (priority >= parentValue) break;\n      this.ids[pos] = this.ids[parent];\n      this.values[pos] = parentValue;\n      pos = parent;\n    }\n    this.ids[pos] = item;\n    this.values[pos] = priority;\n  }\n\n  /**\n   * Removes and returns the item from the head of this queue, which is one of\n   * the items with the lowest priority. If this queue is empty, returns `undefined`.\n   */\n  pop() {\n    if (this.length === 0) return undefined;\n    const ids = this.ids,\n      values = this.values,\n      top = ids[0],\n      last = --this.length;\n    if (last > 0) {\n      const id = ids[last];\n      const value = values[last];\n      let pos = 0;\n      const halfLen = last >> 1;\n      while (pos < halfLen) {\n        const left = (pos << 1) + 1;\n        const right = left + 1;\n        const child = left + (+(right < last) & +(values[right] < values[left]));\n        if (values[child] >= value) break;\n        ids[pos] = ids[child];\n        values[pos] = values[child];\n        pos = child;\n      }\n      ids[pos] = id;\n      values[pos] = value;\n    }\n    return top;\n  }\n\n  /** Returns the item from the head of this queue without removing it. If this queue is empty, returns `undefined`. */\n  peek() {\n    return this.length > 0 ? this.ids[0] : undefined;\n  }\n\n  /**\n   * Returns the priority value of the item at the head of this queue without\n   * removing it. If this queue is empty, returns `undefined`.\n   */\n  peekValue() {\n    return this.length > 0 ? this.values[0] : undefined;\n  }\n\n  /**\n   * Shrinks the internal arrays to `this.length`.\n   *\n   * `pop()` and `clear()` calls don't free memory automatically to avoid unnecessary resize operations.\n   * This also means that items that have been added to the queue can't be garbage collected until\n   * a new item is pushed in their place, or this method is called.\n   */\n  shrink() {\n    this.ids.length = this.values.length = this.length;\n  }\n}","map":{"version":3,"names":["FlatQueue","constructor","ids","values","length","clear","push","item","priority","pos","parent","parentValue","pop","undefined","top","last","id","value","halfLen","left","right","child","peek","peekValue","shrink"],"sources":["/Users/vedachari/projects/weather-balloon/node_modules/flatqueue/index.js"],"sourcesContent":["\n/** @template T */\nexport default class FlatQueue {\n\n    constructor() {\n        /** @type T[] */\n        this.ids = [];\n\n        /** @type number[] */\n        this.values = [];\n\n        /** Number of items in the queue. */\n        this.length = 0;\n    }\n\n    /** Removes all items from the queue. */\n    clear() {\n        this.length = 0;\n    }\n\n    /**\n     * Adds `item` to the queue with the specified `priority`.\n     *\n     * `priority` must be a number. Items are sorted and returned from low to high priority. Multiple items\n     * with the same priority value can be added to the queue, but there is no guaranteed order between these items.\n     *\n     * @param {T} item\n     * @param {number} priority\n     */\n    push(item, priority) {\n        let pos = this.length++;\n\n        while (pos > 0) {\n            const parent = (pos - 1) >> 1;\n            const parentValue = this.values[parent];\n            if (priority >= parentValue) break;\n            this.ids[pos] = this.ids[parent];\n            this.values[pos] = parentValue;\n            pos = parent;\n        }\n\n        this.ids[pos] = item;\n        this.values[pos] = priority;\n    }\n\n    /**\n     * Removes and returns the item from the head of this queue, which is one of\n     * the items with the lowest priority. If this queue is empty, returns `undefined`.\n     */\n    pop() {\n        if (this.length === 0) return undefined;\n\n        const ids = this.ids,\n            values = this.values,\n            top = ids[0],\n            last = --this.length;\n\n        if (last > 0) {\n            const id = ids[last];\n            const value = values[last];\n            let pos = 0;\n            const halfLen = last >> 1;\n\n            while (pos < halfLen) {\n                const left = (pos << 1) + 1;\n                const right = left + 1;\n                const child = left + (+(right < last) & +(values[right] < values[left]));\n                if (values[child] >= value) break;\n                ids[pos] = ids[child];\n                values[pos] = values[child];\n                pos = child;\n            }\n\n            ids[pos] = id;\n            values[pos] = value;\n        }\n\n        return top;\n    }\n\n    /** Returns the item from the head of this queue without removing it. If this queue is empty, returns `undefined`. */\n    peek() {\n        return this.length > 0 ? this.ids[0] : undefined;\n    }\n\n    /**\n     * Returns the priority value of the item at the head of this queue without\n     * removing it. If this queue is empty, returns `undefined`.\n     */\n    peekValue() {\n        return this.length > 0 ? this.values[0] : undefined;\n    }\n\n    /**\n     * Shrinks the internal arrays to `this.length`.\n     *\n     * `pop()` and `clear()` calls don't free memory automatically to avoid unnecessary resize operations.\n     * This also means that items that have been added to the queue can't be garbage collected until\n     * a new item is pushed in their place, or this method is called.\n     */\n    shrink() {\n        this.ids.length = this.values.length = this.length;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
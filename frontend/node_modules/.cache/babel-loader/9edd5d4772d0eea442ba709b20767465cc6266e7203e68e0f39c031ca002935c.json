{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { rainbowSurgePalette } from \"../../../../colorPalettes/index.js\";\nimport { preprocessSeries } from \"./processSeries.js\";\nexport const useChartSeries = ({\n  params,\n  store,\n  seriesConfig\n}) => {\n  const {\n    series,\n    dataset,\n    theme,\n    colors\n  } = params;\n\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useChartSeries`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    store.update(prev => _extends({}, prev, {\n      series: _extends({}, prev.series, {\n        processedSeries: preprocessSeries({\n          series,\n          colors: typeof colors === 'function' ? colors(theme) : colors,\n          seriesConfig,\n          dataset\n        })\n      })\n    }));\n  }, [colors, dataset, series, theme, seriesConfig, store]);\n  return {};\n};\nuseChartSeries.params = {\n  dataset: true,\n  series: true,\n  colors: true,\n  theme: true\n};\nconst EMPTY_ARRAY = [];\nuseChartSeries.getDefaultizedParams = ({\n  params\n}) => _extends({}, params, {\n  series: params.series?.length ? params.series : EMPTY_ARRAY,\n  colors: params.colors ?? rainbowSurgePalette,\n  theme: params.theme ?? 'light'\n});\nuseChartSeries.getInitialState = ({\n  series = [],\n  colors,\n  theme,\n  dataset\n}, _, seriesConfig) => {\n  return {\n    series: {\n      seriesConfig,\n      processedSeries: preprocessSeries({\n        series,\n        colors: typeof colors === 'function' ? colors(theme) : colors,\n        seriesConfig,\n        dataset\n      })\n    }\n  };\n};","map":{"version":3,"names":["_extends","React","rainbowSurgePalette","preprocessSeries","useChartSeries","params","store","seriesConfig","series","dataset","theme","colors","isFirstRender","useRef","useEffect","current","update","prev","processedSeries","EMPTY_ARRAY","getDefaultizedParams","length","getInitialState","_"],"sources":["/Users/vedachari/projects/weather-balloon/node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartSeries/useChartSeries.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { rainbowSurgePalette } from \"../../../../colorPalettes/index.js\";\nimport { preprocessSeries } from \"./processSeries.js\";\nexport const useChartSeries = ({\n  params,\n  store,\n  seriesConfig\n}) => {\n  const {\n    series,\n    dataset,\n    theme,\n    colors\n  } = params;\n\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useChartSeries`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    store.update(prev => _extends({}, prev, {\n      series: _extends({}, prev.series, {\n        processedSeries: preprocessSeries({\n          series,\n          colors: typeof colors === 'function' ? colors(theme) : colors,\n          seriesConfig,\n          dataset\n        })\n      })\n    }));\n  }, [colors, dataset, series, theme, seriesConfig, store]);\n  return {};\n};\nuseChartSeries.params = {\n  dataset: true,\n  series: true,\n  colors: true,\n  theme: true\n};\nconst EMPTY_ARRAY = [];\nuseChartSeries.getDefaultizedParams = ({\n  params\n}) => _extends({}, params, {\n  series: params.series?.length ? params.series : EMPTY_ARRAY,\n  colors: params.colors ?? rainbowSurgePalette,\n  theme: params.theme ?? 'light'\n});\nuseChartSeries.getInitialState = ({\n  series = [],\n  colors,\n  theme,\n  dataset\n}, _, seriesConfig) => {\n  return {\n    series: {\n      seriesConfig,\n      processedSeries: preprocessSeries({\n        series,\n        colors: typeof colors === 'function' ? colors(theme) : colors,\n        seriesConfig,\n        dataset\n      })\n    }\n  };\n};"],"mappings":"AAAA,YAAY;;AAEZ,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,mBAAmB,QAAQ,oCAAoC;AACxE,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,OAAO,MAAMC,cAAc,GAAGA,CAAC;EAC7BC,MAAM;EACNC,KAAK;EACLC;AACF,CAAC,KAAK;EACJ,MAAM;IACJC,MAAM;IACNC,OAAO;IACPC,KAAK;IACLC;EACF,CAAC,GAAGN,MAAM;;EAEV;EACA;EACA,MAAMO,aAAa,GAAGX,KAAK,CAACY,MAAM,CAAC,IAAI,CAAC;EACxCZ,KAAK,CAACa,SAAS,CAAC,MAAM;IACpB,IAAIF,aAAa,CAACG,OAAO,EAAE;MACzBH,aAAa,CAACG,OAAO,GAAG,KAAK;MAC7B;IACF;IACAT,KAAK,CAACU,MAAM,CAACC,IAAI,IAAIjB,QAAQ,CAAC,CAAC,CAAC,EAAEiB,IAAI,EAAE;MACtCT,MAAM,EAAER,QAAQ,CAAC,CAAC,CAAC,EAAEiB,IAAI,CAACT,MAAM,EAAE;QAChCU,eAAe,EAAEf,gBAAgB,CAAC;UAChCK,MAAM;UACNG,MAAM,EAAE,OAAOA,MAAM,KAAK,UAAU,GAAGA,MAAM,CAACD,KAAK,CAAC,GAAGC,MAAM;UAC7DJ,YAAY;UACZE;QACF,CAAC;MACH,CAAC;IACH,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,CAACE,MAAM,EAAEF,OAAO,EAAED,MAAM,EAAEE,KAAK,EAAEH,YAAY,EAAED,KAAK,CAAC,CAAC;EACzD,OAAO,CAAC,CAAC;AACX,CAAC;AACDF,cAAc,CAACC,MAAM,GAAG;EACtBI,OAAO,EAAE,IAAI;EACbD,MAAM,EAAE,IAAI;EACZG,MAAM,EAAE,IAAI;EACZD,KAAK,EAAE;AACT,CAAC;AACD,MAAMS,WAAW,GAAG,EAAE;AACtBf,cAAc,CAACgB,oBAAoB,GAAG,CAAC;EACrCf;AACF,CAAC,KAAKL,QAAQ,CAAC,CAAC,CAAC,EAAEK,MAAM,EAAE;EACzBG,MAAM,EAAEH,MAAM,CAACG,MAAM,EAAEa,MAAM,GAAGhB,MAAM,CAACG,MAAM,GAAGW,WAAW;EAC3DR,MAAM,EAAEN,MAAM,CAACM,MAAM,IAAIT,mBAAmB;EAC5CQ,KAAK,EAAEL,MAAM,CAACK,KAAK,IAAI;AACzB,CAAC,CAAC;AACFN,cAAc,CAACkB,eAAe,GAAG,CAAC;EAChCd,MAAM,GAAG,EAAE;EACXG,MAAM;EACND,KAAK;EACLD;AACF,CAAC,EAAEc,CAAC,EAAEhB,YAAY,KAAK;EACrB,OAAO;IACLC,MAAM,EAAE;MACND,YAAY;MACZW,eAAe,EAAEf,gBAAgB,CAAC;QAChCK,MAAM;QACNG,MAAM,EAAE,OAAOA,MAAM,KAAK,UAAU,GAAGA,MAAM,CAACD,KAAK,CAAC,GAAGC,MAAM;QAC7DJ,YAAY;QACZE;MACF,CAAC;IACH;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
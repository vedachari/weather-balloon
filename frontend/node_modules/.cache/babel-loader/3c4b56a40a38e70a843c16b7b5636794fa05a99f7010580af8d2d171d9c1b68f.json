{"ast":null,"code":"var _jsxFileName = \"/Users/vedachari/projects/weather-balloon/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Map from './components/Map';\nimport Slider from './components/Slider';\nimport Meteo from './components/Meteo';\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/*basic flow\n- get hour 0 and display all\n- if user enters balloon/ generates random number: switch to single balloon\n- user can switch back to see all balloons at that time\n- hour changes using slider: stays consistent across time toggle */\n\nconst App = () => {\n  _s();\n  //states\n  const [allBalloons, setAllBalloons] = useState(true); //currently viewing all balloons?\n  const [getWeather, setGetWeather] = useState(false); //shoudl fetch weather for balloon\n  //data\n  const [rand, setRand] = useState(null);\n  const randRef = useRef(rand);\n  const [data, setData] = useState(null); //all balloons\n  const [balloon, setBalloon] = useState(null);\n  const [hour, setHour] = useState(-1);\n  const [weatherData, setWeatherData] = useState(null); // weather data for #rand balloon\n\n  //change rand ref\n  useEffect(() => {\n    randRef.current = rand;\n  }, [rand]);\n\n  // Generate initial random number\n  useEffect(() => {\n    const r = Math.floor(Math.random() * 1000);\n    setHour(0);\n    setRand(r);\n  }, []);\n\n  // Log whenever rand changes\n  useEffect(() => {\n    console.log(\"Random index chosen:\", rand);\n  }, [rand, allBalloons]);\n\n  // Handler for \"New Random Balloon\" button\n  const handleNewBalloon = () => {\n    // choose random balloon\n    const r = Math.floor(Math.random() * 1000);\n    if (data) {\n      setBalloon(data[r]);\n      setGetWeather(true);\n      console.log(\"Changed get weather to true\");\n    }\n    ;\n    setAllBalloons(false);\n    setRand(r);\n  };\n\n  // Handler for \"switch view\" button\n  const handleSwitchView = () => {\n    console.log('All balloons now ', !allBalloons);\n    setAllBalloons(!allBalloons); //switch view\n    if (weatherData == null) {\n      setGetWeather(true);\n    }\n  };\n\n  // Hour changed so get new balloon values\n  useEffect(() => {\n    const fetchBalloons = async () => {\n      try {\n        console.log(\"fetching hour %d\", hour);\n        const res = await fetch(`/api/treasure/get/${hour}`);\n        if (!res.ok) {\n          setHour(hour + 1);\n          throw new Error(\"Failed to fetch data\");\n        }\n        ;\n        const json = await res.json();\n\n        // convert API data to {lat, lon} format\n        const mapped = json.map(b => ({\n          lat: b[0],\n          lon: b[1],\n          alt: b[2]\n        }));\n        console.log(mapped[randRef.current]);\n        setData(mapped);\n        setBalloon(mapped[randRef.current]);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    if (randRef.current === null) {\n      console.log(\"rand not chosen\");\n      return;\n    } else {\n      fetchBalloons();\n    }\n    ;\n  }, [hour]);\n\n  // // //get weather data: put here to all fewer times\n  // useEffect(() => {\n  //     const fetchWeather = async () => {\n  //       console.log(\"getting weather\");\n  //         if(balloon?.lat == null || balloon?.lon == null){\n  //           return\n  //         }\n  //         try{\n  //             const params = {\n  //             \"latitude\": balloon.lat,\n  //             \"longitude\": balloon.lon,\n  //             \"daily\": [\"temperature_2m_max\", \"temperature_2m_min\"],\n  //             \"hourly\": [\"temperature_2m\", \"relative_humidity_2m\", \"precipitation_probability\", \"precipitation\"],\n  //             \"timezone\": \"auto\",\n  //             \"forecast_days\": 1,\n  //         };\n  //         const url = \"https://api.open-meteo.com/v1/forecast\";\n  //         const responses = await fetchWeatherApi(url, params);\n\n  //         const response = responses[0];\n  //         console.log('response',response);\n\n  //         // Attributes\n  //         const utcOffsetSeconds = response.utcOffsetSeconds();\n\n  //         const hourly = response.hourly()!;\n  //         const daily = response.daily()!;\n\n  //         const data = {\n  //             latitude: response.latitude(),\n  //             longitude: response.longitude(),\n  //             elevation: response.elevation(),\n  //             utcOffsetSeconds: response.utcOffsetSeconds(),\n  //             timezone: response.timezone(),\n  //             timezone_abbreviation: response.timezoneAbbreviation(),\n  //             hourly: {\n  //                 time: [...Array((Number(hourly.timeEnd()) - Number(hourly.time())) / hourly.interval())].map(\n  //                     (_, i) => new Date((Number(hourly.time()) + i * hourly.interval() + utcOffsetSeconds) * 1000)\n  //                 ),\n  //                 temperature_2m: hourly.variables(0)!.valuesArray(),\n  //                 relative_humidity_2m: hourly.variables(1)!.valuesArray(),\n  //                 precipitation_probability: hourly.variables(2)!.valuesArray(),\n  //                 precipitation: hourly.variables(3)!.valuesArray(),\n  //             },\n  //             daily: {\n  //                 time: [...Array((Number(daily.timeEnd()) - Number(daily.time())) / daily.interval())].map(\n  //                     (_, i) => new Date((Number(daily.time()) + i * daily.interval() + utcOffsetSeconds) * 1000)\n  //                 ),\n  //                 temperature_2m_max: daily.variables(0)!.valuesArray(),\n  //                 temperature_2m_min: daily.variables(1)!.valuesArray(),\n  //             },\n  //         };\n  //         console.log(\n  //             `\\nCoordinates: ${data.latitude}°N ${data.longitude}°E`,\n  //             `\\nElevation: ${data.elevation}m asl`,\n  //             `\\nTimezone difference to GMT+0: ${data.utcOffsetSeconds}s`,\n  //             `\\nTimezone: ${data.timezone}s`,\n  //         );\n  //         console.log(\"\\nHourly data\", data.hourly)\n  //         console.log(\"\\nDaily data\", data.daily)\n  //         setWeatherData(data);\n  //         setGetWeather(false);\n  //         } catch (error) {\n  //             console.error(\"Failed to fetch weather data:\", error);\n  //         }\n  //     };\n  //     if(!getWeather){\n  //       console.log(\"get weather is false so not getting\");\n  //       return;\n  //     }\n  //     fetchWeather();\n  // }, [getWeather]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNewBalloon,\n        className: \"generate-button\",\n        children: \"Show New Random Balloon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), allBalloons && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSwitchView,\n        className: \"generate-button\",\n        children: [\"Show Balloon # \", rand]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 26\n      }, this), !allBalloons && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSwitchView,\n        className: \"generate-button\",\n        children: \"Show all balloons\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map\",\n        children: data && /*#__PURE__*/_jsxDEV(Map, {\n          rand: rand,\n          allBalloons: allBalloons,\n          balloons: data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 23\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slider\",\n      children: /*#__PURE__*/_jsxDEV(Slider, {\n        hour: hour,\n        setHour: setHour\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Weather Info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this), !allBalloons && /*#__PURE__*/_jsxDEV(Meteo, {\n        weatherData: weatherData,\n        hour: hour\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"yHjBZ0lCWcwd8tMOPKvWYAZcg2I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","Slider","Meteo","jsxDEV","_jsxDEV","App","_s","allBalloons","setAllBalloons","getWeather","setGetWeather","rand","setRand","randRef","data","setData","balloon","setBalloon","hour","setHour","weatherData","setWeatherData","current","r","Math","floor","random","console","log","handleNewBalloon","handleSwitchView","fetchBalloons","res","fetch","ok","Error","json","mapped","map","b","lat","lon","alt","err","error","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","balloons","_c","$RefreshReg$"],"sources":["/Users/vedachari/projects/weather-balloon/src/App.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport Map from './components/Map';\nimport Slider from './components/Slider';\nimport Meteo from './components/Meteo';\nimport { fetchWeatherApi } from 'openmeteo';\nimport \"./App.css\";\n\ntype Balloon = {\n  lat: number;\n  lon: number;\n  alt: number;\n};\n\n/*basic flow\n- get hour 0 and display all\n- if user enters balloon/ generates random number: switch to single balloon\n- user can switch back to see all balloons at that time\n- hour changes using slider: stays consistent across time toggle */\n\nconst App: React.FC = () => {\n  //states\n  const [allBalloons, setAllBalloons] = useState<boolean>(true); //currently viewing all balloons?\n  const [getWeather, setGetWeather] = useState<boolean>(false); //shoudl fetch weather for balloon\n  //data\n  const [rand, setRand] = useState<number | null>(null);\n  const randRef = useRef(rand);\n  const [data, setData] = useState<Balloon[] | null> (null); //all balloons\n  const [balloon, setBalloon] = useState<Balloon|null>(null);\n  const [hour, setHour] = useState< number>(-1);\n  const [weatherData, setWeatherData] = useState<any>(null); // weather data for #rand balloon\n\n  //change rand ref\n  useEffect(() => {\n    randRef.current = rand;\n  }, [rand]);\n\n  // Generate initial random number\n  useEffect(() => {\n    const r = Math.floor(Math.random() * 1000);\n    setHour(0);\n    setRand(r);\n  }, []);\n\n  // Log whenever rand changes\n  useEffect(() => {\n    console.log(\"Random index chosen:\", rand);\n  }, [rand, allBalloons]);\n\n  // Handler for \"New Random Balloon\" button\n  const handleNewBalloon = () => {\n    // choose random balloon\n    const r = Math.floor(Math.random() * 1000);\n    if (data){\n      setBalloon(data[r]);\n      setGetWeather(true);\n      console.log(\"Changed get weather to true\");\n    };\n    setAllBalloons(false);\n    setRand(r);\n  };\n\n  // Handler for \"switch view\" button\n  const handleSwitchView = () => {\n    console.log('All balloons now ', !allBalloons);\n    setAllBalloons(!allBalloons); //switch view\n    if(weatherData == null){\n      setGetWeather(true);\n    }\n  };\n\n\n  // Hour changed so get new balloon values\n  useEffect(() => {\n      const fetchBalloons = async () => {\n        try {\n          console.log(\"fetching hour %d\", hour);\n          const res = await fetch(`/api/treasure/get/${hour}`);\n          if (!res.ok){ \n            setHour(hour+1);\n            throw new Error(\"Failed to fetch data\");\n          };\n  \n          const json = await res.json();\n  \n          // convert API data to {lat, lon} format\n          const mapped = json.map((b: any) => ({\n            lat: b[0],\n            lon: b[1],\n            alt: b[2],\n          }));\n          console.log(mapped[randRef.current!]);\n\n          setData(mapped);\n          setBalloon(mapped[randRef.current!]);\n        } catch (err) {\n          console.error(err);\n        }\n      };\n      if (randRef.current === null){\n          console.log(\"rand not chosen\");\n          return;\n      }else{\n        fetchBalloons();\n      };\n    }, [hour]);\n\n    // // //get weather data: put here to all fewer times\n    // useEffect(() => {\n    //     const fetchWeather = async () => {\n    //       console.log(\"getting weather\");\n    //         if(balloon?.lat == null || balloon?.lon == null){\n    //           return\n    //         }\n    //         try{\n    //             const params = {\n    //             \"latitude\": balloon.lat,\n    //             \"longitude\": balloon.lon,\n    //             \"daily\": [\"temperature_2m_max\", \"temperature_2m_min\"],\n    //             \"hourly\": [\"temperature_2m\", \"relative_humidity_2m\", \"precipitation_probability\", \"precipitation\"],\n    //             \"timezone\": \"auto\",\n    //             \"forecast_days\": 1,\n    //         };\n    //         const url = \"https://api.open-meteo.com/v1/forecast\";\n    //         const responses = await fetchWeatherApi(url, params);\n\n    //         const response = responses[0];\n    //         console.log('response',response);\n\n    //         // Attributes\n    //         const utcOffsetSeconds = response.utcOffsetSeconds();\n\n    //         const hourly = response.hourly()!;\n    //         const daily = response.daily()!;\n\n    //         const data = {\n    //             latitude: response.latitude(),\n    //             longitude: response.longitude(),\n    //             elevation: response.elevation(),\n    //             utcOffsetSeconds: response.utcOffsetSeconds(),\n    //             timezone: response.timezone(),\n    //             timezone_abbreviation: response.timezoneAbbreviation(),\n    //             hourly: {\n    //                 time: [...Array((Number(hourly.timeEnd()) - Number(hourly.time())) / hourly.interval())].map(\n    //                     (_, i) => new Date((Number(hourly.time()) + i * hourly.interval() + utcOffsetSeconds) * 1000)\n    //                 ),\n    //                 temperature_2m: hourly.variables(0)!.valuesArray(),\n    //                 relative_humidity_2m: hourly.variables(1)!.valuesArray(),\n    //                 precipitation_probability: hourly.variables(2)!.valuesArray(),\n    //                 precipitation: hourly.variables(3)!.valuesArray(),\n    //             },\n    //             daily: {\n    //                 time: [...Array((Number(daily.timeEnd()) - Number(daily.time())) / daily.interval())].map(\n    //                     (_, i) => new Date((Number(daily.time()) + i * daily.interval() + utcOffsetSeconds) * 1000)\n    //                 ),\n    //                 temperature_2m_max: daily.variables(0)!.valuesArray(),\n    //                 temperature_2m_min: daily.variables(1)!.valuesArray(),\n    //             },\n    //         };\n    //         console.log(\n    //             `\\nCoordinates: ${data.latitude}°N ${data.longitude}°E`,\n    //             `\\nElevation: ${data.elevation}m asl`,\n    //             `\\nTimezone difference to GMT+0: ${data.utcOffsetSeconds}s`,\n    //             `\\nTimezone: ${data.timezone}s`,\n    //         );\n    //         console.log(\"\\nHourly data\", data.hourly)\n    //         console.log(\"\\nDaily data\", data.daily)\n    //         setWeatherData(data);\n    //         setGetWeather(false);\n    //         } catch (error) {\n    //             console.error(\"Failed to fetch weather data:\", error);\n    //         }\n    //     };\n    //     if(!getWeather){\n    //       console.log(\"get weather is false so not getting\");\n    //       return;\n    //     }\n    //     fetchWeather();\n    // }, [getWeather]);\n\n  return (\n    <div className=\"page\">\n      {/* Button at the top */}\n      <div className=\"button\">\n        <button onClick={handleNewBalloon} className=\"generate-button\">\n          Show New Random Balloon\n        </button>\n        {allBalloons && (<button onClick={handleSwitchView} className=\"generate-button\">\n          Show Balloon # {rand}\n        </button>)}\n        {!allBalloons && (<button onClick={handleSwitchView} className=\"generate-button\">\n          Show all balloons\n        </button>)}\n      </div>\n\n      {/* Map container */}\n      <div className=\"map-container\">\n          <div className=\"map\">\n            {data && (<Map rand={rand} allBalloons= {allBalloons} balloons={data}/>)}\n          </div>\n          \n      </div>\n      <div className=\"slider\">\n            <Slider \n              hour = {hour}\n              setHour = {setHour}/>\n          </div>\n        <div className=\"info-container\">\n          <h1>Weather Info</h1>\n          {!allBalloons && (<Meteo weatherData = {weatherData} hour = {hour}/>)}\n        </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,GAAG,MAAM,kBAAkB;AAClC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,KAAK,MAAM,oBAAoB;AAEtC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQnB;AACA;AACA;AACA;AACA;;AAEA,MAAMC,GAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAU,IAAI,CAAC,CAAC,CAAC;EAC/D,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAU,KAAK,CAAC,CAAC,CAAC;EAC9D;EACA,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAgB,IAAI,CAAC;EACrD,MAAMc,OAAO,GAAGf,MAAM,CAACa,IAAI,CAAC;EAC5B,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAoB,IAAI,CAAC,CAAC,CAAC;EAC3D,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAe,IAAI,CAAC;EAC1D,MAAM,CAACmB,IAAI,EAAEC,OAAO,CAAC,GAAGpB,QAAQ,CAAU,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACqB,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAM,IAAI,CAAC,CAAC,CAAC;;EAE3D;EACAF,SAAS,CAAC,MAAM;IACdgB,OAAO,CAACS,OAAO,GAAGX,IAAI;EACxB,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;;EAEV;EACAd,SAAS,CAAC,MAAM;IACd,MAAM0B,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC;IAC1CP,OAAO,CAAC,CAAC,CAAC;IACVP,OAAO,CAACW,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA1B,SAAS,CAAC,MAAM;IACd8B,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEjB,IAAI,CAAC;EAC3C,CAAC,EAAE,CAACA,IAAI,EAAEJ,WAAW,CAAC,CAAC;;EAEvB;EACA,MAAMsB,gBAAgB,GAAGA,CAAA,KAAM;IAC7B;IACA,MAAMN,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC;IAC1C,IAAIZ,IAAI,EAAC;MACPG,UAAU,CAACH,IAAI,CAACS,CAAC,CAAC,CAAC;MACnBb,aAAa,CAAC,IAAI,CAAC;MACnBiB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC5C;IAAC;IACDpB,cAAc,CAAC,KAAK,CAAC;IACrBI,OAAO,CAACW,CAAC,CAAC;EACZ,CAAC;;EAED;EACA,MAAMO,gBAAgB,GAAGA,CAAA,KAAM;IAC7BH,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE,CAACrB,WAAW,CAAC;IAC9CC,cAAc,CAAC,CAACD,WAAW,CAAC,CAAC,CAAC;IAC9B,IAAGa,WAAW,IAAI,IAAI,EAAC;MACrBV,aAAa,CAAC,IAAI,CAAC;IACrB;EACF,CAAC;;EAGD;EACAb,SAAS,CAAC,MAAM;IACZ,MAAMkC,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACFJ,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEV,IAAI,CAAC;QACrC,MAAMc,GAAG,GAAG,MAAMC,KAAK,CAAC,qBAAqBf,IAAI,EAAE,CAAC;QACpD,IAAI,CAACc,GAAG,CAACE,EAAE,EAAC;UACVf,OAAO,CAACD,IAAI,GAAC,CAAC,CAAC;UACf,MAAM,IAAIiB,KAAK,CAAC,sBAAsB,CAAC;QACzC;QAAC;QAED,MAAMC,IAAI,GAAG,MAAMJ,GAAG,CAACI,IAAI,CAAC,CAAC;;QAE7B;QACA,MAAMC,MAAM,GAAGD,IAAI,CAACE,GAAG,CAAEC,CAAM,KAAM;UACnCC,GAAG,EAAED,CAAC,CAAC,CAAC,CAAC;UACTE,GAAG,EAAEF,CAAC,CAAC,CAAC,CAAC;UACTG,GAAG,EAAEH,CAAC,CAAC,CAAC;QACV,CAAC,CAAC,CAAC;QACHZ,OAAO,CAACC,GAAG,CAACS,MAAM,CAACxB,OAAO,CAACS,OAAO,CAAE,CAAC;QAErCP,OAAO,CAACsB,MAAM,CAAC;QACfpB,UAAU,CAACoB,MAAM,CAACxB,OAAO,CAACS,OAAO,CAAE,CAAC;MACtC,CAAC,CAAC,OAAOqB,GAAG,EAAE;QACZhB,OAAO,CAACiB,KAAK,CAACD,GAAG,CAAC;MACpB;IACF,CAAC;IACD,IAAI9B,OAAO,CAACS,OAAO,KAAK,IAAI,EAAC;MACzBK,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;MAC9B;IACJ,CAAC,MAAI;MACHG,aAAa,CAAC,CAAC;IACjB;IAAC;EACH,CAAC,EAAE,CAACb,IAAI,CAAC,CAAC;;EAEV;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEF,oBACEd,OAAA;IAAKyC,SAAS,EAAC,MAAM;IAAAC,QAAA,gBAEnB1C,OAAA;MAAKyC,SAAS,EAAC,QAAQ;MAAAC,QAAA,gBACrB1C,OAAA;QAAQ2C,OAAO,EAAElB,gBAAiB;QAACgB,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAAC;MAE/D;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACR5C,WAAW,iBAAKH,OAAA;QAAQ2C,OAAO,EAAEjB,gBAAiB;QAACe,SAAS,EAAC,iBAAiB;QAAAC,QAAA,GAAC,iBAC/D,EAACnC,IAAI;MAAA;QAAAqC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACd,CAAE,EACT,CAAC5C,WAAW,iBAAKH,OAAA;QAAQ2C,OAAO,EAAEjB,gBAAiB;QAACe,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAAC;MAEjF;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAE;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC,eAGN/C,OAAA;MAAKyC,SAAS,EAAC,eAAe;MAAAC,QAAA,eAC1B1C,OAAA;QAAKyC,SAAS,EAAC,KAAK;QAAAC,QAAA,EACjBhC,IAAI,iBAAKV,OAAA,CAACJ,GAAG;UAACW,IAAI,EAAEA,IAAK;UAACJ,WAAW,EAAGA,WAAY;UAAC6C,QAAQ,EAAEtC;QAAK;UAAAkC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEL,CAAC,eACN/C,OAAA;MAAKyC,SAAS,EAAC,QAAQ;MAAAC,QAAA,eACjB1C,OAAA,CAACH,MAAM;QACLiB,IAAI,EAAIA,IAAK;QACbC,OAAO,EAAIA;MAAQ;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC,eACR/C,OAAA;MAAKyC,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7B1C,OAAA;QAAA0C,QAAA,EAAI;MAAY;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACpB,CAAC5C,WAAW,iBAAKH,OAAA,CAACF,KAAK;QAACkB,WAAW,EAAIA,WAAY;QAACF,IAAI,EAAIA;MAAK;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAE;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAAC7C,EAAA,CAjMID,GAAa;AAAAgD,EAAA,GAAbhD,GAAa;AAmMnB,eAAeA,GAAG;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
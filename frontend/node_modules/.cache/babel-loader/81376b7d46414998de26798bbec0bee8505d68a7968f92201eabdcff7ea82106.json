{"ast":null,"code":"var _jsxFileName = \"/Users/vedachari/projects/weather-balloon/src/components/Map.tsx\";\nimport React from \"react\";\nimport BalloonMap from \"./BalloonMap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = balloon => {\n  //   const [balloons, setBalloons] = useState<Balloon|null>(null);\n  // //   useEffect(() => {\n  // //     if (rand === null) return; // don’t fetch until rand is set\n  // //     fetchBalloons();\n  // //     }, [rand]);\n\n  //   useEffect(() => {\n  //     if (rand === null){\n  //         console.log(\"rand not chosen\");\n  //         return;\n  //     };\n  //     const fetchBalloons = async () => {\n  //       try {\n  //         const res = await fetch(`/api/treasure/get/${file}`);\n  //         if (!res.ok) throw new Error(\"Failed to fetch data\");\n\n  //         const json = await res.json();\n\n  //         // convert API data to {lat, lon} format\n  //         const mapped = json.map((b: any) => ({\n  //           lat: b[0],\n  //           lon: b[1],\n  //           alt: b[2],\n  //         }));\n  //         console.log(mapped[rand]);\n\n  //         setBalloons(mapped[rand]);\n  //       } catch (err) {\n  //         console.error(err);\n  //       }\n  //     };\n\n  //     // only fetch if rand is set\n  //     if (rand !== null) {\n  //       console.log(rand);\n  //       fetchBalloons();\n  //     };\n  //   }, [rand]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(BalloonMap, {\n      balloon: balloon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","BalloonMap","jsxDEV","_jsxDEV","Map","balloon","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vedachari/projects/weather-balloon/src/components/Map.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport BalloonMap from \"./BalloonMap\";\n\ntype Balloon = {\n  lat: number;\n  lon: number;\n  alt: number;\n};\n\nconst Map: React.FC<Balloon> = ( balloon ) => {\n//   const [balloons, setBalloons] = useState<Balloon|null>(null);\n// //   useEffect(() => {\n// //     if (rand === null) return; // don’t fetch until rand is set\n// //     fetchBalloons();\n// //     }, [rand]);\n\n//   useEffect(() => {\n//     if (rand === null){\n//         console.log(\"rand not chosen\");\n//         return;\n//     };\n//     const fetchBalloons = async () => {\n//       try {\n//         const res = await fetch(`/api/treasure/get/${file}`);\n//         if (!res.ok) throw new Error(\"Failed to fetch data\");\n\n//         const json = await res.json();\n\n//         // convert API data to {lat, lon} format\n//         const mapped = json.map((b: any) => ({\n//           lat: b[0],\n//           lon: b[1],\n//           alt: b[2],\n//         }));\n//         console.log(mapped[rand]);\n\n//         setBalloons(mapped[rand]);\n//       } catch (err) {\n//         console.error(err);\n//       }\n//     };\n\n//     // only fetch if rand is set\n//     if (rand !== null) {\n//       console.log(rand);\n//       fetchBalloons();\n//     };\n//   }, [rand]);\n\n  return (\n    <div>\n      <BalloonMap balloon={balloon} />\n    </div>\n  );\n};\n\nexport default Map;\n"],"mappings":";AAAA,OAAOA,KAAK,MAA+B,OAAO;AAClD,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQtC,MAAMC,GAAsB,GAAKC,OAAO,IAAM;EAC9C;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEE,oBACEF,OAAA;IAAAG,QAAA,eACEH,OAAA,CAACF,UAAU;MAACI,OAAO,EAAEA;IAAQ;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7B,CAAC;AAEV,CAAC;AAACC,EAAA,GA7CIP,GAAsB;AA+C5B,eAAeA,GAAG;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
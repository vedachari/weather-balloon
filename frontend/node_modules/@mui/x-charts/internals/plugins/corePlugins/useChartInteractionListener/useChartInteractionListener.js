"use strict";
'use client';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useChartInteractionListener = void 0;
var React = _interopRequireWildcard(require("react"));
var _core = require("@mui/x-internal-gestures/core");
const preventDefault = event => event.preventDefault();
const useChartInteractionListener = ({
  svgRef
}) => {
  const gestureManagerRef = React.useRef(null);
  React.useEffect(() => {
    const svg = svgRef.current;
    if (!gestureManagerRef.current) {
      gestureManagerRef.current = new _core.GestureManager({
        gestures: [
        // We separate the zoom gestures from the gestures that are not zoom related
        // This allows us to configure the zoom gestures based on the zoom configuration.
        new _core.PanGesture({
          name: 'pan',
          threshold: 0,
          maxPointers: 1
        }), new _core.PanGesture({
          name: 'zoomPan',
          threshold: 0,
          maxPointers: 1,
          preventIf: ['zoomTapAndDrag', 'zoomPressAndDrag']
        }), new _core.MoveGesture({
          name: 'move',
          preventIf: ['pan', 'zoomPinch', 'zoomPan'] // Prevent move gesture when pan is active
        }), new _core.PinchGesture({
          name: 'zoomPinch',
          threshold: 5,
          preventIf: ['pan', 'zoomPan']
        }), new _core.TurnWheelGesture({
          name: 'zoomTurnWheel',
          sensitivity: 0.01,
          initialDelta: 1
        }), new _core.TapGesture({
          name: 'tap',
          preventIf: ['pan', 'zoomPan', 'zoomPinch']
        }), new _core.PressGesture({
          name: 'quickPress',
          duration: 50
        }), new _core.TapAndDragGesture({
          name: 'zoomTapAndDrag',
          dragThreshold: 10
        }), new _core.PressAndDragGesture({
          name: 'zoomPressAndDrag',
          dragThreshold: 10,
          preventIf: ['zoomPinch']
        })]
      });
    }

    // Assign gesture manager after initialization
    const gestureManager = gestureManagerRef.current;
    if (!svg || !gestureManager) {
      return undefined;
    }
    gestureManager.registerElement(['pan', 'move', 'zoomPinch', 'zoomPan', 'zoomTurnWheel', 'tap', 'quickPress', 'zoomTapAndDrag', 'zoomPressAndDrag'], svg);
    return () => {
      // Cleanup gesture manager
      gestureManager.unregisterAllGestures(svg);
    };
  }, [svgRef, gestureManagerRef]);
  const addInteractionListener = React.useCallback((interaction, callback, options) => {
    // Forcefully cast the svgRef to any, it is annoying to fix the types.
    const svg = svgRef.current;
    svg?.addEventListener(interaction, callback, options);
    return {
      cleanup: () => svg?.removeEventListener(interaction, callback)
    };
  }, [svgRef]);
  const updateZoomInteractionListeners = React.useCallback((interaction, options) => {
    const svg = svgRef.current;
    const gestureManager = gestureManagerRef.current;
    if (!gestureManager || !svg) {
      return;
    }
    gestureManager.setGestureOptions(interaction, svg, options ?? {});
  }, [svgRef, gestureManagerRef]);
  React.useEffect(() => {
    const svg = svgRef.current;

    // Disable gesture on safari
    // https://use-gesture.netlify.app/docs/gestures/#about-the-pinch-gesture
    svg?.addEventListener('gesturestart', preventDefault);
    svg?.addEventListener('gesturechange', preventDefault);
    svg?.addEventListener('gestureend', preventDefault);
    return () => {
      svg?.removeEventListener('gesturestart', preventDefault);
      svg?.removeEventListener('gesturechange', preventDefault);
      svg?.removeEventListener('gestureend', preventDefault);
    };
  }, [svgRef]);
  return {
    instance: {
      addInteractionListener,
      updateZoomInteractionListeners
    }
  };
};
exports.useChartInteractionListener = useChartInteractionListener;
useChartInteractionListener.params = {};
useChartInteractionListener.getInitialState = () => {
  return {};
};
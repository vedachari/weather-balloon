{"ast":null,"code":"import { createSelector } from \"../../utils/selectors.js\";\nimport { selectorChartRawXAxis, selectorChartRawYAxis } from \"./useChartCartesianAxisLayout.selectors.js\";\nimport { selectorChartSeriesConfig, selectorChartSeriesProcessed } from \"../../corePlugins/useChartSeries/index.js\";\nimport { computeAxisValue } from \"./computeAxisValue.js\";\nimport { selectorChartNormalizedXScales, selectorChartNormalizedYScales, selectorChartXDomains, selectorChartYDomains, selectorChartZoomOptionsLookup } from \"./useChartCartesianAxisRendering.selectors.js\";\nimport { selectorChartDrawingArea } from \"../../corePlugins/useChartDimensions/index.js\";\nimport { ZOOM_SLIDER_PREVIEW_SIZE } from \"../../../constants.js\";\nimport { getRange } from \"./getAxisScale.js\";\nimport { zoomScaleRange } from \"./zoom.js\";\nimport { isOrdinalScale } from \"../../../scaleGuards.js\";\nfunction createPreviewDrawingArea(axisDirection, mainChartDrawingArea) {\n  return axisDirection === 'x' ? {\n    left: 0,\n    top: 0,\n    width: mainChartDrawingArea.width,\n    height: ZOOM_SLIDER_PREVIEW_SIZE,\n    right: mainChartDrawingArea.width,\n    bottom: ZOOM_SLIDER_PREVIEW_SIZE\n  } : {\n    left: 0,\n    top: 0,\n    width: ZOOM_SLIDER_PREVIEW_SIZE,\n    height: mainChartDrawingArea.height,\n    right: ZOOM_SLIDER_PREVIEW_SIZE,\n    bottom: mainChartDrawingArea.height\n  };\n}\nexport const selectorChartPreviewXScales = createSelector([selectorChartRawXAxis, selectorChartDrawingArea, selectorChartZoomOptionsLookup, selectorChartNormalizedXScales, (_, axisId) => axisId], function selectorChartPreviewXScales(xAxes, chartDrawingArea, zoomOptions, normalizedXScales, axisId) {\n  const hasAxis = xAxes?.some(axis => axis.id === axisId);\n  const drawingArea = createPreviewDrawingArea(hasAxis ? 'x' : 'y', chartDrawingArea);\n  const options = zoomOptions[axisId];\n  const scales = {};\n  xAxes?.forEach(eachAxis => {\n    const axis = eachAxis;\n    const scale = normalizedXScales[axis.id].copy();\n    const range = getRange(drawingArea, 'x', axis);\n    const zoomedRange = zoomScaleRange(range, [options.minStart, options.maxEnd]);\n    scale.range(zoomedRange);\n    scales[axis.id] = scale;\n  });\n  return scales;\n});\nexport const selectorChartPreviewComputedXAxis = createSelector([selectorChartRawXAxis, selectorChartSeriesProcessed, selectorChartSeriesConfig, selectorChartZoomOptionsLookup, selectorChartDrawingArea, selectorChartPreviewXScales, selectorChartXDomains, (_, axisId) => axisId], (xAxes, formattedSeries, seriesConfig, zoomOptions, chartDrawingArea, scales, domains, axisId) => {\n  const hasAxis = xAxes?.some(axis => axis.id === axisId);\n  const drawingArea = createPreviewDrawingArea(hasAxis ? 'x' : 'y', chartDrawingArea);\n  const options = zoomOptions[axisId];\n  const zoomMap = new Map([[axisId, {\n    axisId,\n    start: options.minStart,\n    end: options.maxEnd\n  }]]);\n  const computedAxes = computeAxisValue({\n    scales,\n    drawingArea,\n    formattedSeries,\n    axis: xAxes,\n    seriesConfig,\n    axisDirection: 'x',\n    zoomMap,\n    domains\n  });\n  if (computedAxes.axis[axisId]) {\n    return {\n      [axisId]: computedAxes.axis[axisId]\n    };\n  }\n  return computedAxes.axis;\n});\nexport const selectorChartPreviewYScales = createSelector([selectorChartRawYAxis, selectorChartDrawingArea, selectorChartZoomOptionsLookup, selectorChartNormalizedYScales, (_, axisId) => axisId], function selectorChartPreviewYScales(yAxes, chartDrawingArea, zoomOptions, normalizedYScales, axisId) {\n  const hasAxis = yAxes?.some(axis => axis.id === axisId);\n  const drawingArea = createPreviewDrawingArea(hasAxis ? 'y' : 'x', chartDrawingArea);\n  const options = zoomOptions[axisId];\n  const scales = {};\n  yAxes?.forEach(eachAxis => {\n    const axis = eachAxis;\n    const scale = normalizedYScales[axis.id].copy();\n    let range = getRange(drawingArea, 'y', axis);\n    if (isOrdinalScale(scale)) {\n      range = range.reverse();\n    }\n    const zoomedRange = zoomScaleRange(range, [options.minStart, options.maxEnd]);\n    scale.range(zoomedRange);\n    scales[axis.id] = scale;\n  });\n  return scales;\n});\nexport const selectorChartPreviewComputedYAxis = createSelector([selectorChartRawYAxis, selectorChartSeriesProcessed, selectorChartSeriesConfig, selectorChartZoomOptionsLookup, selectorChartDrawingArea, selectorChartPreviewYScales, selectorChartYDomains, (_, axisId) => axisId], (yAxes, formattedSeries, seriesConfig, zoomOptions, chartDrawingArea, scales, domains, axisId) => {\n  const hasAxis = yAxes?.some(axis => axis.id === axisId);\n  const drawingArea = createPreviewDrawingArea(hasAxis ? 'y' : 'x', chartDrawingArea);\n  const options = zoomOptions[axisId];\n  const zoomMap = new Map([[axisId, {\n    axisId,\n    start: options.minStart,\n    end: options.maxEnd\n  }]]);\n  const computedAxes = computeAxisValue({\n    scales,\n    drawingArea,\n    formattedSeries,\n    axis: yAxes,\n    seriesConfig,\n    axisDirection: 'y',\n    zoomMap,\n    domains\n  });\n  if (computedAxes.axis[axisId]) {\n    return {\n      [axisId]: computedAxes.axis[axisId]\n    };\n  }\n  return computedAxes.axis;\n});","map":{"version":3,"names":["createSelector","selectorChartRawXAxis","selectorChartRawYAxis","selectorChartSeriesConfig","selectorChartSeriesProcessed","computeAxisValue","selectorChartNormalizedXScales","selectorChartNormalizedYScales","selectorChartXDomains","selectorChartYDomains","selectorChartZoomOptionsLookup","selectorChartDrawingArea","ZOOM_SLIDER_PREVIEW_SIZE","getRange","zoomScaleRange","isOrdinalScale","createPreviewDrawingArea","axisDirection","mainChartDrawingArea","left","top","width","height","right","bottom","selectorChartPreviewXScales","_","axisId","xAxes","chartDrawingArea","zoomOptions","normalizedXScales","hasAxis","some","axis","id","drawingArea","options","scales","forEach","eachAxis","scale","copy","range","zoomedRange","minStart","maxEnd","selectorChartPreviewComputedXAxis","formattedSeries","seriesConfig","domains","zoomMap","Map","start","end","computedAxes","selectorChartPreviewYScales","yAxes","normalizedYScales","reverse","selectorChartPreviewComputedYAxis"],"sources":["/Users/vedachari/projects/weather-balloon/node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxisPreview.selectors.js"],"sourcesContent":["import { createSelector } from \"../../utils/selectors.js\";\nimport { selectorChartRawXAxis, selectorChartRawYAxis } from \"./useChartCartesianAxisLayout.selectors.js\";\nimport { selectorChartSeriesConfig, selectorChartSeriesProcessed } from \"../../corePlugins/useChartSeries/index.js\";\nimport { computeAxisValue } from \"./computeAxisValue.js\";\nimport { selectorChartNormalizedXScales, selectorChartNormalizedYScales, selectorChartXDomains, selectorChartYDomains, selectorChartZoomOptionsLookup } from \"./useChartCartesianAxisRendering.selectors.js\";\nimport { selectorChartDrawingArea } from \"../../corePlugins/useChartDimensions/index.js\";\nimport { ZOOM_SLIDER_PREVIEW_SIZE } from \"../../../constants.js\";\nimport { getRange } from \"./getAxisScale.js\";\nimport { zoomScaleRange } from \"./zoom.js\";\nimport { isOrdinalScale } from \"../../../scaleGuards.js\";\nfunction createPreviewDrawingArea(axisDirection, mainChartDrawingArea) {\n  return axisDirection === 'x' ? {\n    left: 0,\n    top: 0,\n    width: mainChartDrawingArea.width,\n    height: ZOOM_SLIDER_PREVIEW_SIZE,\n    right: mainChartDrawingArea.width,\n    bottom: ZOOM_SLIDER_PREVIEW_SIZE\n  } : {\n    left: 0,\n    top: 0,\n    width: ZOOM_SLIDER_PREVIEW_SIZE,\n    height: mainChartDrawingArea.height,\n    right: ZOOM_SLIDER_PREVIEW_SIZE,\n    bottom: mainChartDrawingArea.height\n  };\n}\nexport const selectorChartPreviewXScales = createSelector([selectorChartRawXAxis, selectorChartDrawingArea, selectorChartZoomOptionsLookup, selectorChartNormalizedXScales, (_, axisId) => axisId], function selectorChartPreviewXScales(xAxes, chartDrawingArea, zoomOptions, normalizedXScales, axisId) {\n  const hasAxis = xAxes?.some(axis => axis.id === axisId);\n  const drawingArea = createPreviewDrawingArea(hasAxis ? 'x' : 'y', chartDrawingArea);\n  const options = zoomOptions[axisId];\n  const scales = {};\n  xAxes?.forEach(eachAxis => {\n    const axis = eachAxis;\n    const scale = normalizedXScales[axis.id].copy();\n    const range = getRange(drawingArea, 'x', axis);\n    const zoomedRange = zoomScaleRange(range, [options.minStart, options.maxEnd]);\n    scale.range(zoomedRange);\n    scales[axis.id] = scale;\n  });\n  return scales;\n});\nexport const selectorChartPreviewComputedXAxis = createSelector([selectorChartRawXAxis, selectorChartSeriesProcessed, selectorChartSeriesConfig, selectorChartZoomOptionsLookup, selectorChartDrawingArea, selectorChartPreviewXScales, selectorChartXDomains, (_, axisId) => axisId], (xAxes, formattedSeries, seriesConfig, zoomOptions, chartDrawingArea, scales, domains, axisId) => {\n  const hasAxis = xAxes?.some(axis => axis.id === axisId);\n  const drawingArea = createPreviewDrawingArea(hasAxis ? 'x' : 'y', chartDrawingArea);\n  const options = zoomOptions[axisId];\n  const zoomMap = new Map([[axisId, {\n    axisId,\n    start: options.minStart,\n    end: options.maxEnd\n  }]]);\n  const computedAxes = computeAxisValue({\n    scales,\n    drawingArea,\n    formattedSeries,\n    axis: xAxes,\n    seriesConfig,\n    axisDirection: 'x',\n    zoomMap,\n    domains\n  });\n  if (computedAxes.axis[axisId]) {\n    return {\n      [axisId]: computedAxes.axis[axisId]\n    };\n  }\n  return computedAxes.axis;\n});\nexport const selectorChartPreviewYScales = createSelector([selectorChartRawYAxis, selectorChartDrawingArea, selectorChartZoomOptionsLookup, selectorChartNormalizedYScales, (_, axisId) => axisId], function selectorChartPreviewYScales(yAxes, chartDrawingArea, zoomOptions, normalizedYScales, axisId) {\n  const hasAxis = yAxes?.some(axis => axis.id === axisId);\n  const drawingArea = createPreviewDrawingArea(hasAxis ? 'y' : 'x', chartDrawingArea);\n  const options = zoomOptions[axisId];\n  const scales = {};\n  yAxes?.forEach(eachAxis => {\n    const axis = eachAxis;\n    const scale = normalizedYScales[axis.id].copy();\n    let range = getRange(drawingArea, 'y', axis);\n    if (isOrdinalScale(scale)) {\n      range = range.reverse();\n    }\n    const zoomedRange = zoomScaleRange(range, [options.minStart, options.maxEnd]);\n    scale.range(zoomedRange);\n    scales[axis.id] = scale;\n  });\n  return scales;\n});\nexport const selectorChartPreviewComputedYAxis = createSelector([selectorChartRawYAxis, selectorChartSeriesProcessed, selectorChartSeriesConfig, selectorChartZoomOptionsLookup, selectorChartDrawingArea, selectorChartPreviewYScales, selectorChartYDomains, (_, axisId) => axisId], (yAxes, formattedSeries, seriesConfig, zoomOptions, chartDrawingArea, scales, domains, axisId) => {\n  const hasAxis = yAxes?.some(axis => axis.id === axisId);\n  const drawingArea = createPreviewDrawingArea(hasAxis ? 'y' : 'x', chartDrawingArea);\n  const options = zoomOptions[axisId];\n  const zoomMap = new Map([[axisId, {\n    axisId,\n    start: options.minStart,\n    end: options.maxEnd\n  }]]);\n  const computedAxes = computeAxisValue({\n    scales,\n    drawingArea,\n    formattedSeries,\n    axis: yAxes,\n    seriesConfig,\n    axisDirection: 'y',\n    zoomMap,\n    domains\n  });\n  if (computedAxes.axis[axisId]) {\n    return {\n      [axisId]: computedAxes.axis[axisId]\n    };\n  }\n  return computedAxes.axis;\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
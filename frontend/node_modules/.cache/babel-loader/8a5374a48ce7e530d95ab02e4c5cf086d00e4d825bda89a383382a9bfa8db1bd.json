{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\n\n/** Returns true after hydration is done on the client.\n *\n * Basically a implementation of Option 2 of this gist: https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85#option-2-lazily-show-component-with-uselayouteffect. */\nexport function useIsHydrated() {\n  const [isHydrated, setIsHydrated] = React.useState(typeof window !== 'undefined' || process.env.NODE_ENV === 'test');\n  React.useEffect(() => {\n    setIsHydrated(true);\n  }, []);\n  return isHydrated;\n}","map":{"version":3,"names":["React","useIsHydrated","isHydrated","setIsHydrated","useState","window","process","env","NODE_ENV","useEffect"],"sources":["/Users/vedachari/projects/weather-balloon/node_modules/@mui/x-charts/esm/hooks/useIsHydrated.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\n\n/** Returns true after hydration is done on the client.\n *\n * Basically a implementation of Option 2 of this gist: https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85#option-2-lazily-show-component-with-uselayouteffect. */\nexport function useIsHydrated() {\n  const [isHydrated, setIsHydrated] = React.useState(typeof window !== 'undefined' || process.env.NODE_ENV === 'test');\n  React.useEffect(() => {\n    setIsHydrated(true);\n  }, []);\n  return isHydrated;\n}"],"mappings":"AAAA,YAAY;;AAEZ,OAAO,KAAKA,KAAK,MAAM,OAAO;;AAE9B;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAAA,EAAG;EAC9B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGH,KAAK,CAACI,QAAQ,CAAC,OAAOC,MAAM,KAAK,WAAW,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM,CAAC;EACpHR,KAAK,CAACS,SAAS,CAAC,MAAM;IACpBN,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EACN,OAAOD,UAAU;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
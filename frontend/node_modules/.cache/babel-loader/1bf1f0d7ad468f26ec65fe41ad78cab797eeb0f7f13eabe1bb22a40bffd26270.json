{"ast":null,"code":"'use client';\n\nimport { createSeriesSelectorsOfType, createAllSeriesSelectorOfType } from \"../internals/createSeriesSelectorOfType.js\";\nconst useSelectorSeries = createSeriesSelectorsOfType('line');\nconst useSelectorSeriesContext = createAllSeriesSelectorOfType('line');\n\n/**\n * Get access to the internal state of line series.\n *\n * @param {SeriesId} seriesId The id of the series to get.\n * @returns {UseLineSeriesReturnValue} the line series\n */\n\n/**\n * Get access to the internal state of line series.\n *\n * When called without arguments, it returns all line series.\n *\n * @returns {UseLineSeriesReturnValue[]} the line series\n */\n\n/**\n * Get access to the internal state of line series.\n *\n * @param {SeriesId[]} seriesIds The ids of the series to get. Order is preserved.\n * @returns {UseLineSeriesReturnValue[]} the line series\n */\n\nexport function useLineSeries(seriesIds) {\n  return useSelectorSeries(seriesIds);\n}\n\n/**\n * Get access to the internal state of line series.\n * The returned object contains:\n * - series: a mapping from ids to series attributes.\n * - seriesOrder: the array of series ids.\n * - stackingGroups: the array of stacking groups. Each group contains the series ids stacked and the strategy to use.\n * @returns the line series\n */\nexport function useLineSeriesContext() {\n  return useSelectorSeriesContext();\n}","map":{"version":3,"names":["createSeriesSelectorsOfType","createAllSeriesSelectorOfType","useSelectorSeries","useSelectorSeriesContext","useLineSeries","seriesIds","useLineSeriesContext"],"sources":["/Users/vedachari/projects/weather-balloon/node_modules/@mui/x-charts/esm/hooks/useLineSeries.js"],"sourcesContent":["'use client';\n\nimport { createSeriesSelectorsOfType, createAllSeriesSelectorOfType } from \"../internals/createSeriesSelectorOfType.js\";\nconst useSelectorSeries = createSeriesSelectorsOfType('line');\nconst useSelectorSeriesContext = createAllSeriesSelectorOfType('line');\n\n/**\n * Get access to the internal state of line series.\n *\n * @param {SeriesId} seriesId The id of the series to get.\n * @returns {UseLineSeriesReturnValue} the line series\n */\n\n/**\n * Get access to the internal state of line series.\n *\n * When called without arguments, it returns all line series.\n *\n * @returns {UseLineSeriesReturnValue[]} the line series\n */\n\n/**\n * Get access to the internal state of line series.\n *\n * @param {SeriesId[]} seriesIds The ids of the series to get. Order is preserved.\n * @returns {UseLineSeriesReturnValue[]} the line series\n */\n\nexport function useLineSeries(seriesIds) {\n  return useSelectorSeries(seriesIds);\n}\n\n/**\n * Get access to the internal state of line series.\n * The returned object contains:\n * - series: a mapping from ids to series attributes.\n * - seriesOrder: the array of series ids.\n * - stackingGroups: the array of stacking groups. Each group contains the series ids stacked and the strategy to use.\n * @returns the line series\n */\nexport function useLineSeriesContext() {\n  return useSelectorSeriesContext();\n}"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,2BAA2B,EAAEC,6BAA6B,QAAQ,4CAA4C;AACvH,MAAMC,iBAAiB,GAAGF,2BAA2B,CAAC,MAAM,CAAC;AAC7D,MAAMG,wBAAwB,GAAGF,6BAA6B,CAAC,MAAM,CAAC;;AAEtE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASG,aAAaA,CAACC,SAAS,EAAE;EACvC,OAAOH,iBAAiB,CAACG,SAAS,CAAC;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoBA,CAAA,EAAG;EACrC,OAAOH,wBAAwB,CAAC,CAAC;AACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/**\n * ActiveGesturesRegistry - Centralized registry for tracking which gestures are active on elements\n *\n * This singleton class keeps track of all gesture instances that are currently in their active state,\n * allowing both the system and applications to query which gestures are active on specific elements.\n */\n\n/**\n * Type for entries in the active gestures registry\n */\n\n/**\n * Registry that maintains a record of all currently active gestures across elements\n */\nexport class ActiveGesturesRegistry {\n  /** Map of elements to their active gestures */\n  activeGestures = (() => new Map())();\n\n  /**\n   * Register a gesture as active on an element\n   *\n   * @param element - The DOM element on which the gesture is active\n   * @param gesture - The gesture instance that is active\n   */\n  registerActiveGesture(element, gesture) {\n    if (!this.activeGestures.has(element)) {\n      this.activeGestures.set(element, new Set());\n    }\n    const elementGestures = this.activeGestures.get(element);\n    const entry = {\n      gesture,\n      element\n    };\n    elementGestures.add(entry);\n  }\n\n  /**\n   * Remove a gesture from the active registry\n   *\n   * @param element - The DOM element on which the gesture was active\n   * @param gesture - The gesture instance to deactivate\n   */\n  unregisterActiveGesture(element, gesture) {\n    const elementGestures = this.activeGestures.get(element);\n    if (!elementGestures) {\n      return;\n    }\n\n    // Find and remove the specific gesture entry\n    elementGestures.forEach(entry => {\n      if (entry.gesture === gesture) {\n        elementGestures.delete(entry);\n      }\n    });\n\n    // Remove the element from the map if it no longer has any active gestures\n    if (elementGestures.size === 0) {\n      this.activeGestures.delete(element);\n    }\n  }\n\n  /**\n   * Get all active gestures for a specific element\n   *\n   * @param element - The DOM element to query\n   * @returns Array of active gesture names\n   */\n  getActiveGestures(element) {\n    const elementGestures = this.activeGestures.get(element);\n    if (!elementGestures) {\n      return {};\n    }\n    return Array.from(elementGestures).reduce((acc, entry) => {\n      acc[entry.gesture.name] = true;\n      return acc;\n    }, {});\n  }\n\n  /**\n   * Check if a specific gesture is active on an element\n   *\n   * @param element - The DOM element to check\n   * @param gesture - The gesture instance to check\n   * @returns True if the gesture is active on the element, false otherwise\n   */\n  isGestureActive(element, gesture) {\n    const elementGestures = this.activeGestures.get(element);\n    if (!elementGestures) {\n      return false;\n    }\n    return Array.from(elementGestures).some(entry => entry.gesture === gesture);\n  }\n\n  /**\n   * Clear all active gestures from the registry\n   */\n  destroy() {\n    this.activeGestures.clear();\n  }\n\n  /**\n   * Clear all active gestures for a specific element\n   *\n   * @param element - The DOM element to clear\n   */\n  unregisterElement(element) {\n    this.activeGestures.delete(element);\n  }\n}","map":{"version":3,"names":["ActiveGesturesRegistry","activeGestures","Map","registerActiveGesture","element","gesture","has","set","Set","elementGestures","get","entry","add","unregisterActiveGesture","forEach","delete","size","getActiveGestures","Array","from","reduce","acc","name","isGestureActive","some","destroy","clear","unregisterElement"],"sources":["/Users/vedachari/projects/weather-balloon/node_modules/@mui/x-internal-gestures/esm/core/ActiveGesturesRegistry.js"],"sourcesContent":["/**\n * ActiveGesturesRegistry - Centralized registry for tracking which gestures are active on elements\n *\n * This singleton class keeps track of all gesture instances that are currently in their active state,\n * allowing both the system and applications to query which gestures are active on specific elements.\n */\n\n/**\n * Type for entries in the active gestures registry\n */\n\n/**\n * Registry that maintains a record of all currently active gestures across elements\n */\nexport class ActiveGesturesRegistry {\n  /** Map of elements to their active gestures */\n  activeGestures = (() => new Map())();\n\n  /**\n   * Register a gesture as active on an element\n   *\n   * @param element - The DOM element on which the gesture is active\n   * @param gesture - The gesture instance that is active\n   */\n  registerActiveGesture(element, gesture) {\n    if (!this.activeGestures.has(element)) {\n      this.activeGestures.set(element, new Set());\n    }\n    const elementGestures = this.activeGestures.get(element);\n    const entry = {\n      gesture,\n      element\n    };\n    elementGestures.add(entry);\n  }\n\n  /**\n   * Remove a gesture from the active registry\n   *\n   * @param element - The DOM element on which the gesture was active\n   * @param gesture - The gesture instance to deactivate\n   */\n  unregisterActiveGesture(element, gesture) {\n    const elementGestures = this.activeGestures.get(element);\n    if (!elementGestures) {\n      return;\n    }\n\n    // Find and remove the specific gesture entry\n    elementGestures.forEach(entry => {\n      if (entry.gesture === gesture) {\n        elementGestures.delete(entry);\n      }\n    });\n\n    // Remove the element from the map if it no longer has any active gestures\n    if (elementGestures.size === 0) {\n      this.activeGestures.delete(element);\n    }\n  }\n\n  /**\n   * Get all active gestures for a specific element\n   *\n   * @param element - The DOM element to query\n   * @returns Array of active gesture names\n   */\n  getActiveGestures(element) {\n    const elementGestures = this.activeGestures.get(element);\n    if (!elementGestures) {\n      return {};\n    }\n    return Array.from(elementGestures).reduce((acc, entry) => {\n      acc[entry.gesture.name] = true;\n      return acc;\n    }, {});\n  }\n\n  /**\n   * Check if a specific gesture is active on an element\n   *\n   * @param element - The DOM element to check\n   * @param gesture - The gesture instance to check\n   * @returns True if the gesture is active on the element, false otherwise\n   */\n  isGestureActive(element, gesture) {\n    const elementGestures = this.activeGestures.get(element);\n    if (!elementGestures) {\n      return false;\n    }\n    return Array.from(elementGestures).some(entry => entry.gesture === gesture);\n  }\n\n  /**\n   * Clear all active gestures from the registry\n   */\n  destroy() {\n    this.activeGestures.clear();\n  }\n\n  /**\n   * Clear all active gestures for a specific element\n   *\n   * @param element - The DOM element to clear\n   */\n  unregisterElement(element) {\n    this.activeGestures.delete(element);\n  }\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO,MAAMA,sBAAsB,CAAC;EAClC;EACAC,cAAc,GAAG,CAAC,MAAM,IAAIC,GAAG,CAAC,CAAC,EAAE,CAAC;;EAEpC;AACF;AACA;AACA;AACA;AACA;EACEC,qBAAqBA,CAACC,OAAO,EAAEC,OAAO,EAAE;IACtC,IAAI,CAAC,IAAI,CAACJ,cAAc,CAACK,GAAG,CAACF,OAAO,CAAC,EAAE;MACrC,IAAI,CAACH,cAAc,CAACM,GAAG,CAACH,OAAO,EAAE,IAAII,GAAG,CAAC,CAAC,CAAC;IAC7C;IACA,MAAMC,eAAe,GAAG,IAAI,CAACR,cAAc,CAACS,GAAG,CAACN,OAAO,CAAC;IACxD,MAAMO,KAAK,GAAG;MACZN,OAAO;MACPD;IACF,CAAC;IACDK,eAAe,CAACG,GAAG,CAACD,KAAK,CAAC;EAC5B;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEE,uBAAuBA,CAACT,OAAO,EAAEC,OAAO,EAAE;IACxC,MAAMI,eAAe,GAAG,IAAI,CAACR,cAAc,CAACS,GAAG,CAACN,OAAO,CAAC;IACxD,IAAI,CAACK,eAAe,EAAE;MACpB;IACF;;IAEA;IACAA,eAAe,CAACK,OAAO,CAACH,KAAK,IAAI;MAC/B,IAAIA,KAAK,CAACN,OAAO,KAAKA,OAAO,EAAE;QAC7BI,eAAe,CAACM,MAAM,CAACJ,KAAK,CAAC;MAC/B;IACF,CAAC,CAAC;;IAEF;IACA,IAAIF,eAAe,CAACO,IAAI,KAAK,CAAC,EAAE;MAC9B,IAAI,CAACf,cAAc,CAACc,MAAM,CAACX,OAAO,CAAC;IACrC;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEa,iBAAiBA,CAACb,OAAO,EAAE;IACzB,MAAMK,eAAe,GAAG,IAAI,CAACR,cAAc,CAACS,GAAG,CAACN,OAAO,CAAC;IACxD,IAAI,CAACK,eAAe,EAAE;MACpB,OAAO,CAAC,CAAC;IACX;IACA,OAAOS,KAAK,CAACC,IAAI,CAACV,eAAe,CAAC,CAACW,MAAM,CAAC,CAACC,GAAG,EAAEV,KAAK,KAAK;MACxDU,GAAG,CAACV,KAAK,CAACN,OAAO,CAACiB,IAAI,CAAC,GAAG,IAAI;MAC9B,OAAOD,GAAG;IACZ,CAAC,EAAE,CAAC,CAAC,CAAC;EACR;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEE,eAAeA,CAACnB,OAAO,EAAEC,OAAO,EAAE;IAChC,MAAMI,eAAe,GAAG,IAAI,CAACR,cAAc,CAACS,GAAG,CAACN,OAAO,CAAC;IACxD,IAAI,CAACK,eAAe,EAAE;MACpB,OAAO,KAAK;IACd;IACA,OAAOS,KAAK,CAACC,IAAI,CAACV,eAAe,CAAC,CAACe,IAAI,CAACb,KAAK,IAAIA,KAAK,CAACN,OAAO,KAAKA,OAAO,CAAC;EAC7E;;EAEA;AACF;AACA;EACEoB,OAAOA,CAAA,EAAG;IACR,IAAI,CAACxB,cAAc,CAACyB,KAAK,CAAC,CAAC;EAC7B;;EAEA;AACF;AACA;AACA;AACA;EACEC,iBAAiBA,CAACvB,OAAO,EAAE;IACzB,IAAI,CAACH,cAAc,CAACc,MAAM,CAACX,OAAO,CAAC;EACrC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
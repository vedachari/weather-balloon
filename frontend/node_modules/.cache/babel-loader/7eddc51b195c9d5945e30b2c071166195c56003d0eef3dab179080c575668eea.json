{"ast":null,"code":"const MAIN_THRESHOLD = 0.00001;\nconst ANGLE_THRESHOLD = 0.00001;\nconst SECONDARY_THRESHOLD = 0.15;\n\n/**\n * Get the direction of movement based on the current and previous positions\n */\nexport function getDirection(previous, current) {\n  const deltaX = current.x - previous.x;\n  const deltaY = current.y - previous.y;\n  const direction = {\n    vertical: null,\n    horizontal: null,\n    mainAxis: null\n  };\n  const isDiagonal = isDiagonalMovement(current, previous);\n  const mainMovement = Math.abs(deltaX) > Math.abs(deltaY) ? 'horizontal' : 'vertical';\n\n  // eslint-disable-next-line no-nested-ternary\n  const horizontalThreshold = isDiagonal ? MAIN_THRESHOLD : mainMovement === 'horizontal' ? MAIN_THRESHOLD : SECONDARY_THRESHOLD;\n  // eslint-disable-next-line no-nested-ternary\n  const verticalThreshold = isDiagonal ? MAIN_THRESHOLD : mainMovement === 'horizontal' ? SECONDARY_THRESHOLD : MAIN_THRESHOLD;\n\n  // Set horizontal direction if there's a significant movement horizontally\n  if (Math.abs(deltaX) > horizontalThreshold) {\n    // Small threshold to avoid noise\n    direction.horizontal = deltaX > 0 ? 'right' : 'left';\n  }\n\n  // Set vertical direction if there's a significant movement vertically\n  if (Math.abs(deltaY) > verticalThreshold) {\n    // Small threshold to avoid noise\n    direction.vertical = deltaY > 0 ? 'down' : 'up';\n  }\n  direction.mainAxis = isDiagonal ? 'diagonal' : mainMovement;\n  return direction;\n}\nfunction isDiagonalMovement(previous, current) {\n  const deltaX = current.x - previous.x;\n  const deltaY = current.y - previous.y;\n\n  // Calculate the angle of movement\n  const angle = Math.atan2(deltaY, deltaX) * 180 / Math.PI;\n\n  // Check if the angle is within the diagonal range\n  return angle >= -45 + ANGLE_THRESHOLD && angle <= -22.5 + ANGLE_THRESHOLD || angle >= 22.5 + ANGLE_THRESHOLD && angle <= 45 + ANGLE_THRESHOLD || angle >= 135 + ANGLE_THRESHOLD && angle <= 157.5 + ANGLE_THRESHOLD || angle >= -157.5 + ANGLE_THRESHOLD && angle <= -135 + ANGLE_THRESHOLD;\n}","map":{"version":3,"names":["MAIN_THRESHOLD","ANGLE_THRESHOLD","SECONDARY_THRESHOLD","getDirection","previous","current","deltaX","x","deltaY","y","direction","vertical","horizontal","mainAxis","isDiagonal","isDiagonalMovement","mainMovement","Math","abs","horizontalThreshold","verticalThreshold","angle","atan2","PI"],"sources":["/Users/vedachari/projects/weather-balloon/node_modules/@mui/x-internal-gestures/esm/core/utils/getDirection.js"],"sourcesContent":["const MAIN_THRESHOLD = 0.00001;\nconst ANGLE_THRESHOLD = 0.00001;\nconst SECONDARY_THRESHOLD = 0.15;\n\n/**\n * Get the direction of movement based on the current and previous positions\n */\nexport function getDirection(previous, current) {\n  const deltaX = current.x - previous.x;\n  const deltaY = current.y - previous.y;\n  const direction = {\n    vertical: null,\n    horizontal: null,\n    mainAxis: null\n  };\n  const isDiagonal = isDiagonalMovement(current, previous);\n  const mainMovement = Math.abs(deltaX) > Math.abs(deltaY) ? 'horizontal' : 'vertical';\n\n  // eslint-disable-next-line no-nested-ternary\n  const horizontalThreshold = isDiagonal ? MAIN_THRESHOLD : mainMovement === 'horizontal' ? MAIN_THRESHOLD : SECONDARY_THRESHOLD;\n  // eslint-disable-next-line no-nested-ternary\n  const verticalThreshold = isDiagonal ? MAIN_THRESHOLD : mainMovement === 'horizontal' ? SECONDARY_THRESHOLD : MAIN_THRESHOLD;\n\n  // Set horizontal direction if there's a significant movement horizontally\n  if (Math.abs(deltaX) > horizontalThreshold) {\n    // Small threshold to avoid noise\n    direction.horizontal = deltaX > 0 ? 'right' : 'left';\n  }\n\n  // Set vertical direction if there's a significant movement vertically\n  if (Math.abs(deltaY) > verticalThreshold) {\n    // Small threshold to avoid noise\n    direction.vertical = deltaY > 0 ? 'down' : 'up';\n  }\n  direction.mainAxis = isDiagonal ? 'diagonal' : mainMovement;\n  return direction;\n}\nfunction isDiagonalMovement(previous, current) {\n  const deltaX = current.x - previous.x;\n  const deltaY = current.y - previous.y;\n\n  // Calculate the angle of movement\n  const angle = Math.atan2(deltaY, deltaX) * 180 / Math.PI;\n\n  // Check if the angle is within the diagonal range\n  return angle >= -45 + ANGLE_THRESHOLD && angle <= -22.5 + ANGLE_THRESHOLD || angle >= 22.5 + ANGLE_THRESHOLD && angle <= 45 + ANGLE_THRESHOLD || angle >= 135 + ANGLE_THRESHOLD && angle <= 157.5 + ANGLE_THRESHOLD || angle >= -157.5 + ANGLE_THRESHOLD && angle <= -135 + ANGLE_THRESHOLD;\n}"],"mappings":"AAAA,MAAMA,cAAc,GAAG,OAAO;AAC9B,MAAMC,eAAe,GAAG,OAAO;AAC/B,MAAMC,mBAAmB,GAAG,IAAI;;AAEhC;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACC,QAAQ,EAAEC,OAAO,EAAE;EAC9C,MAAMC,MAAM,GAAGD,OAAO,CAACE,CAAC,GAAGH,QAAQ,CAACG,CAAC;EACrC,MAAMC,MAAM,GAAGH,OAAO,CAACI,CAAC,GAAGL,QAAQ,CAACK,CAAC;EACrC,MAAMC,SAAS,GAAG;IAChBC,QAAQ,EAAE,IAAI;IACdC,UAAU,EAAE,IAAI;IAChBC,QAAQ,EAAE;EACZ,CAAC;EACD,MAAMC,UAAU,GAAGC,kBAAkB,CAACV,OAAO,EAAED,QAAQ,CAAC;EACxD,MAAMY,YAAY,GAAGC,IAAI,CAACC,GAAG,CAACZ,MAAM,CAAC,GAAGW,IAAI,CAACC,GAAG,CAACV,MAAM,CAAC,GAAG,YAAY,GAAG,UAAU;;EAEpF;EACA,MAAMW,mBAAmB,GAAGL,UAAU,GAAGd,cAAc,GAAGgB,YAAY,KAAK,YAAY,GAAGhB,cAAc,GAAGE,mBAAmB;EAC9H;EACA,MAAMkB,iBAAiB,GAAGN,UAAU,GAAGd,cAAc,GAAGgB,YAAY,KAAK,YAAY,GAAGd,mBAAmB,GAAGF,cAAc;;EAE5H;EACA,IAAIiB,IAAI,CAACC,GAAG,CAACZ,MAAM,CAAC,GAAGa,mBAAmB,EAAE;IAC1C;IACAT,SAAS,CAACE,UAAU,GAAGN,MAAM,GAAG,CAAC,GAAG,OAAO,GAAG,MAAM;EACtD;;EAEA;EACA,IAAIW,IAAI,CAACC,GAAG,CAACV,MAAM,CAAC,GAAGY,iBAAiB,EAAE;IACxC;IACAV,SAAS,CAACC,QAAQ,GAAGH,MAAM,GAAG,CAAC,GAAG,MAAM,GAAG,IAAI;EACjD;EACAE,SAAS,CAACG,QAAQ,GAAGC,UAAU,GAAG,UAAU,GAAGE,YAAY;EAC3D,OAAON,SAAS;AAClB;AACA,SAASK,kBAAkBA,CAACX,QAAQ,EAAEC,OAAO,EAAE;EAC7C,MAAMC,MAAM,GAAGD,OAAO,CAACE,CAAC,GAAGH,QAAQ,CAACG,CAAC;EACrC,MAAMC,MAAM,GAAGH,OAAO,CAACI,CAAC,GAAGL,QAAQ,CAACK,CAAC;;EAErC;EACA,MAAMY,KAAK,GAAGJ,IAAI,CAACK,KAAK,CAACd,MAAM,EAAEF,MAAM,CAAC,GAAG,GAAG,GAAGW,IAAI,CAACM,EAAE;;EAExD;EACA,OAAOF,KAAK,IAAI,CAAC,EAAE,GAAGpB,eAAe,IAAIoB,KAAK,IAAI,CAAC,IAAI,GAAGpB,eAAe,IAAIoB,KAAK,IAAI,IAAI,GAAGpB,eAAe,IAAIoB,KAAK,IAAI,EAAE,GAAGpB,eAAe,IAAIoB,KAAK,IAAI,GAAG,GAAGpB,eAAe,IAAIoB,KAAK,IAAI,KAAK,GAAGpB,eAAe,IAAIoB,KAAK,IAAI,CAAC,KAAK,GAAGpB,eAAe,IAAIoB,KAAK,IAAI,CAAC,GAAG,GAAGpB,eAAe;AAC7R","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/vedachari/projects/weather-balloon/src/components/Meteo.tsx\",\n  _s = $RefreshSig$();\nimport { fetchWeatherApi } from 'openmeteo';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Meteo = ({\n  lat,\n  lon,\n  hour\n}) => {\n  _s();\n  var _weatherData$hourly$t, _weatherData$hourly$p, _weatherData$hourly$r;\n  const [weatherData, setWeatherData] = useState(null);\n  useEffect(() => {\n    const fetchWeather = async () => {\n      try {\n        const params = {\n          \"latitude\": lat,\n          \"longitude\": lon,\n          \"daily\": [\"temperature_2m_max\", \"temperature_2m_min\"],\n          \"hourly\": [\"temperature_2m\", \"relative_humidity_2m\", \"precipitation_probability\", \"precipitation\"],\n          \"timezone\": \"auto\",\n          \"forecast_days\": 1\n        };\n        const url = \"https://api.open-meteo.com/v1/forecast\";\n        const responses = await fetchWeatherApi(url, params);\n\n        // Process first location. Add a for-loop for multiple locations or weather models\n        const response = responses[0];\n        console.log('response', response);\n\n        // Attributes\n        const utcOffsetSeconds = response.utcOffsetSeconds();\n        const hourly = response.hourly();\n        const daily = response.daily();\n\n        // Note: The order of weather variables in the URL query and the indices below need to match!\n        const data = {\n          latitude: response.latitude(),\n          longitude: response.longitude(),\n          elevation: response.elevation(),\n          utcOffsetSeconds: response.utcOffsetSeconds(),\n          timezone: response.timezone(),\n          timezone_abbreviation: response.timezoneAbbreviation(),\n          hourly: {\n            time: [...Array((Number(hourly.timeEnd()) - Number(hourly.time())) / hourly.interval())].map((_, i) => new Date((Number(hourly.time()) + i * hourly.interval() + utcOffsetSeconds) * 1000)),\n            temperature_2m: hourly.variables(0).valuesArray(),\n            relative_humidity_2m: hourly.variables(1).valuesArray(),\n            precipitation_probability: hourly.variables(2).valuesArray(),\n            precipitation: hourly.variables(3).valuesArray()\n          },\n          daily: {\n            time: [...Array((Number(daily.timeEnd()) - Number(daily.time())) / daily.interval())].map((_, i) => new Date((Number(daily.time()) + i * daily.interval() + utcOffsetSeconds) * 1000)),\n            temperature_2m_max: daily.variables(0).valuesArray(),\n            temperature_2m_min: daily.variables(1).valuesArray()\n          }\n        };\n        console.log(`\\nCoordinates: ${data.latitude}°N ${data.longitude}°E`, `\\nElevation: ${data.elevation}m asl`, `\\nTimezone difference to GMT+0: ${data.utcOffsetSeconds}s`, `\\nTimezone: ${data.timezone}s`);\n        console.log(\"\\nHourly data\", data.hourly);\n        console.log(\"\\nDaily data\", data.daily);\n        setWeatherData(data);\n      } catch (error) {\n        console.error(\"Failed to fetch weather data:\", error);\n      }\n    };\n    fetchWeather();\n  }, [lat, lon]);\n  if (!weatherData) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \" Loading weather data\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 29\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [hour === 0 && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Balloon is here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 24\n    }, this), hour > 0 && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Balloon was here \", hour, \" hours ago\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Coordinates: \", weatherData.latitude.toFixed(2), \"\\xB0,\", \" \", weatherData.longitude.toFixed(2), \"\\xB0\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Elevation: \", weatherData.elevation, \" m\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Time Zone: \", weatherData.timezone, \" (\", weatherData.timezone_abbreviation, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"UTC offset: \", weatherData.utcOffsetSeconds / 3600, \": \", weatherData.utcOffsetSeconds % 60]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Temperature: \", (_weatherData$hourly$t = weatherData.hourly.temperature_2m) === null || _weatherData$hourly$t === void 0 ? void 0 : _weatherData$hourly$t[24 - hour], \" \\xB0C\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Chance of Precipitation: \", (_weatherData$hourly$p = weatherData.hourly.precipitation_probability) === null || _weatherData$hourly$p === void 0 ? void 0 : _weatherData$hourly$p[24 - hour], \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Relative Humidity: \", (_weatherData$hourly$r = weatherData.hourly.relative_humidity_2m) === null || _weatherData$hourly$r === void 0 ? void 0 : _weatherData$hourly$r[24 - hour], \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(Meteo, \"BCUo9muHyxrqajg6diFxqqqjG/A=\");\n_c = Meteo;\nexport default Meteo;\nvar _c;\n$RefreshReg$(_c, \"Meteo\");","map":{"version":3,"names":["fetchWeatherApi","useEffect","useState","jsxDEV","_jsxDEV","Meteo","lat","lon","hour","_s","_weatherData$hourly$t","_weatherData$hourly$p","_weatherData$hourly$r","weatherData","setWeatherData","fetchWeather","params","url","responses","response","console","log","utcOffsetSeconds","hourly","daily","data","latitude","longitude","elevation","timezone","timezone_abbreviation","timezoneAbbreviation","time","Array","Number","timeEnd","interval","map","_","i","Date","temperature_2m","variables","valuesArray","relative_humidity_2m","precipitation_probability","precipitation","temperature_2m_max","temperature_2m_min","error","children","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","_c","$RefreshReg$"],"sources":["/Users/vedachari/projects/weather-balloon/src/components/Meteo.tsx"],"sourcesContent":["import { fetchWeatherApi } from 'openmeteo';\nimport { useEffect, useState } from 'react';\n\ninterface MeteoProps{\n    lat: number;\n    lon: number;\n    hour: number;\n}\n\nconst Meteo: React.FC<MeteoProps> = ({lat, lon, hour}) => {\n    const [weatherData, setWeatherData] = useState<any>(null);\n\n    useEffect(() => {\n        const fetchWeather = async () => {\n            try{\n                const params = {\n                \"latitude\": lat,\n                \"longitude\": lon,\n                \"daily\": [\"temperature_2m_max\", \"temperature_2m_min\"],\n                \"hourly\": [\"temperature_2m\", \"relative_humidity_2m\", \"precipitation_probability\", \"precipitation\"],\n                \"timezone\": \"auto\",\n                \"forecast_days\": 1,\n            };\n            const url = \"https://api.open-meteo.com/v1/forecast\";\n            const responses = await fetchWeatherApi(url, params);\n\n            // Process first location. Add a for-loop for multiple locations or weather models\n            const response = responses[0];\n            console.log('response',response);\n\n            // Attributes\n            const utcOffsetSeconds = response.utcOffsetSeconds();\n\n            const hourly = response.hourly()!;\n            const daily = response.daily()!;\n\n            // Note: The order of weather variables in the URL query and the indices below need to match!\n            const data = {\n                latitude: response.latitude(),\n                longitude: response.longitude(),\n                elevation: response.elevation(),\n                utcOffsetSeconds: response.utcOffsetSeconds(),\n                timezone: response.timezone(),\n                timezone_abbreviation: response.timezoneAbbreviation(),\n                hourly: {\n                    time: [...Array((Number(hourly.timeEnd()) - Number(hourly.time())) / hourly.interval())].map(\n                        (_, i) => new Date((Number(hourly.time()) + i * hourly.interval() + utcOffsetSeconds) * 1000)\n                    ),\n                    temperature_2m: hourly.variables(0)!.valuesArray(),\n                    relative_humidity_2m: hourly.variables(1)!.valuesArray(),\n                    precipitation_probability: hourly.variables(2)!.valuesArray(),\n                    precipitation: hourly.variables(3)!.valuesArray(),\n                },\n                daily: {\n                    time: [...Array((Number(daily.timeEnd()) - Number(daily.time())) / daily.interval())].map(\n                        (_, i) => new Date((Number(daily.time()) + i * daily.interval() + utcOffsetSeconds) * 1000)\n                    ),\n                    temperature_2m_max: daily.variables(0)!.valuesArray(),\n                    temperature_2m_min: daily.variables(1)!.valuesArray(),\n                },\n            };\n            console.log(\n                `\\nCoordinates: ${data.latitude}°N ${data.longitude}°E`,\n                `\\nElevation: ${data.elevation}m asl`,\n                `\\nTimezone difference to GMT+0: ${data.utcOffsetSeconds}s`,\n                `\\nTimezone: ${data.timezone}s`,\n            );\n            console.log(\"\\nHourly data\", data.hourly)\n            console.log(\"\\nDaily data\", data.daily)\n            setWeatherData(data);\n            } catch (error) {\n                console.error(\"Failed to fetch weather data:\", error);\n            }\n        };\n        fetchWeather();\n    }, [lat, lon]);\n\n    if(!weatherData) return <p> Loading weather data</p>\n    return (\n    <div>\n        {hour===0 &&  (<h3>Balloon is here</h3>)}\n        {hour > 0 && (<h3>Balloon was here {hour } hours ago</h3>)}\n      <p>\n        Coordinates: {weatherData.latitude.toFixed(2)}°,{\" \"}\n        {weatherData.longitude.toFixed(2)}°\n      </p>\n      <p>Elevation: {weatherData.elevation} m</p>\n      <p>Time Zone: {weatherData.timezone} ({weatherData.timezone_abbreviation})</p>\n      <p>UTC offset: {weatherData.utcOffsetSeconds/3600}: {weatherData.utcOffsetSeconds%60}</p>\n      <p>Temperature: {weatherData.hourly.temperature_2m?.[24-hour]} °C</p>\n      <p>Chance of Precipitation: {weatherData.hourly.precipitation_probability?.[24-hour]}%</p>\n      <p>Relative Humidity: {weatherData.hourly.relative_humidity_2m?.[24-hour]}%</p>\n    </div>\n  );\n}\n\nexport default Meteo;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
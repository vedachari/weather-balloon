{"ast":null,"code":"/**\n * KeyboardManager - Manager for keyboard events in the gesture recognition system\n *\n * This class tracks keyboard state:\n * 1. Capturing and tracking all pressed keys\n * 2. Providing methods to check if specific keys are pressed\n */\n\n/**\n * Type definition for keyboard keys\n */\n\n/**\n * Class responsible for tracking keyboard state\n */\nexport class KeyboardManager {\n  pressedKeys = (() => new Set())();\n\n  /**\n   * Create a new KeyboardManager instance\n   */\n  constructor() {\n    this.initialize();\n  }\n\n  /**\n   * Initialize the keyboard event listeners\n   */\n  initialize() {\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    // Add keyboard event listeners\n    window.addEventListener('keydown', this.handleKeyDown);\n    window.addEventListener('keyup', this.handleKeyUp);\n    // Reset keys when window loses focus\n    window.addEventListener('blur', this.clearKeys);\n  }\n\n  /**\n   * Handle keydown events\n   */\n  handleKeyDown = event => {\n    this.pressedKeys.add(event.key);\n  };\n\n  /**\n   * Handle keyup events\n   */\n  handleKeyUp = event => {\n    this.pressedKeys.delete(event.key);\n  };\n\n  /**\n   * Clear all pressed keys\n   */\n  clearKeys = () => {\n    this.pressedKeys.clear();\n  };\n\n  /**\n   * Check if a set of keys are all currently pressed\n   * @param keys The keys to check\n   * @returns True if all specified keys are pressed, false otherwise\n   */\n  areKeysPressed(keys) {\n    if (!keys || keys.length === 0) {\n      return true; // No keys required means the condition is satisfied\n    }\n    return keys.every(key => {\n      if (key === 'ControlOrMeta') {\n        // May be \"deprecated\" on types, but it is still the best option for cross-platform detection\n        // https://stackoverflow.com/a/71785253/24269134\n        return navigator.platform.includes('Mac') ? this.pressedKeys.has('Meta') : this.pressedKeys.has('Control');\n      }\n      return this.pressedKeys.has(key);\n    });\n  }\n\n  /**\n   * Cleanup method to remove event listeners\n   */\n  destroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('keydown', this.handleKeyDown);\n      window.removeEventListener('keyup', this.handleKeyUp);\n      window.removeEventListener('blur', this.clearKeys);\n    }\n    this.clearKeys();\n  }\n}","map":{"version":3,"names":["KeyboardManager","pressedKeys","Set","constructor","initialize","window","addEventListener","handleKeyDown","handleKeyUp","clearKeys","event","add","key","delete","clear","areKeysPressed","keys","length","every","navigator","platform","includes","has","destroy","removeEventListener"],"sources":["/Users/vedachari/projects/weather-balloon/node_modules/@mui/x-internal-gestures/esm/core/KeyboardManager.js"],"sourcesContent":["/**\n * KeyboardManager - Manager for keyboard events in the gesture recognition system\n *\n * This class tracks keyboard state:\n * 1. Capturing and tracking all pressed keys\n * 2. Providing methods to check if specific keys are pressed\n */\n\n/**\n * Type definition for keyboard keys\n */\n\n/**\n * Class responsible for tracking keyboard state\n */\nexport class KeyboardManager {\n  pressedKeys = (() => new Set())();\n\n  /**\n   * Create a new KeyboardManager instance\n   */\n  constructor() {\n    this.initialize();\n  }\n\n  /**\n   * Initialize the keyboard event listeners\n   */\n  initialize() {\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    // Add keyboard event listeners\n    window.addEventListener('keydown', this.handleKeyDown);\n    window.addEventListener('keyup', this.handleKeyUp);\n    // Reset keys when window loses focus\n    window.addEventListener('blur', this.clearKeys);\n  }\n\n  /**\n   * Handle keydown events\n   */\n  handleKeyDown = event => {\n    this.pressedKeys.add(event.key);\n  };\n\n  /**\n   * Handle keyup events\n   */\n  handleKeyUp = event => {\n    this.pressedKeys.delete(event.key);\n  };\n\n  /**\n   * Clear all pressed keys\n   */\n  clearKeys = () => {\n    this.pressedKeys.clear();\n  };\n\n  /**\n   * Check if a set of keys are all currently pressed\n   * @param keys The keys to check\n   * @returns True if all specified keys are pressed, false otherwise\n   */\n  areKeysPressed(keys) {\n    if (!keys || keys.length === 0) {\n      return true; // No keys required means the condition is satisfied\n    }\n    return keys.every(key => {\n      if (key === 'ControlOrMeta') {\n        // May be \"deprecated\" on types, but it is still the best option for cross-platform detection\n        // https://stackoverflow.com/a/71785253/24269134\n        return navigator.platform.includes('Mac') ? this.pressedKeys.has('Meta') : this.pressedKeys.has('Control');\n      }\n      return this.pressedKeys.has(key);\n    });\n  }\n\n  /**\n   * Cleanup method to remove event listeners\n   */\n  destroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('keydown', this.handleKeyDown);\n      window.removeEventListener('keyup', this.handleKeyUp);\n      window.removeEventListener('blur', this.clearKeys);\n    }\n    this.clearKeys();\n  }\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO,MAAMA,eAAe,CAAC;EAC3BC,WAAW,GAAG,CAAC,MAAM,IAAIC,GAAG,CAAC,CAAC,EAAE,CAAC;;EAEjC;AACF;AACA;EACEC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,UAAU,CAAC,CAAC;EACnB;;EAEA;AACF;AACA;EACEA,UAAUA,CAAA,EAAG;IACX,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;MACjC;IACF;;IAEA;IACAA,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAACC,aAAa,CAAC;IACtDF,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAACE,WAAW,CAAC;IAClD;IACAH,MAAM,CAACC,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAACG,SAAS,CAAC;EACjD;;EAEA;AACF;AACA;EACEF,aAAa,GAAGG,KAAK,IAAI;IACvB,IAAI,CAACT,WAAW,CAACU,GAAG,CAACD,KAAK,CAACE,GAAG,CAAC;EACjC,CAAC;;EAED;AACF;AACA;EACEJ,WAAW,GAAGE,KAAK,IAAI;IACrB,IAAI,CAACT,WAAW,CAACY,MAAM,CAACH,KAAK,CAACE,GAAG,CAAC;EACpC,CAAC;;EAED;AACF;AACA;EACEH,SAAS,GAAGA,CAAA,KAAM;IAChB,IAAI,CAACR,WAAW,CAACa,KAAK,CAAC,CAAC;EAC1B,CAAC;;EAED;AACF;AACA;AACA;AACA;EACEC,cAAcA,CAACC,IAAI,EAAE;IACnB,IAAI,CAACA,IAAI,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;MAC9B,OAAO,IAAI,CAAC,CAAC;IACf;IACA,OAAOD,IAAI,CAACE,KAAK,CAACN,GAAG,IAAI;MACvB,IAAIA,GAAG,KAAK,eAAe,EAAE;QAC3B;QACA;QACA,OAAOO,SAAS,CAACC,QAAQ,CAACC,QAAQ,CAAC,KAAK,CAAC,GAAG,IAAI,CAACpB,WAAW,CAACqB,GAAG,CAAC,MAAM,CAAC,GAAG,IAAI,CAACrB,WAAW,CAACqB,GAAG,CAAC,SAAS,CAAC;MAC5G;MACA,OAAO,IAAI,CAACrB,WAAW,CAACqB,GAAG,CAACV,GAAG,CAAC;IAClC,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACEW,OAAOA,CAAA,EAAG;IACR,IAAI,OAAOlB,MAAM,KAAK,WAAW,EAAE;MACjCA,MAAM,CAACmB,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAACjB,aAAa,CAAC;MACzDF,MAAM,CAACmB,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAChB,WAAW,CAAC;MACrDH,MAAM,CAACmB,mBAAmB,CAAC,MAAM,EAAE,IAAI,CAACf,SAAS,CAAC;IACpD;IACA,IAAI,CAACA,SAAS,CAAC,CAAC;EAClB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
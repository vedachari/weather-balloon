import { NumberValue } from '@mui/x-charts-vendor/d3-scale.js';
import { ZoomData } from "@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/zoom.types.js";
import { AxisId, D3Scale } from "@mui/x-charts/models/axis.js";
import { SeriesId } from "@mui/x-charts/models/seriesType/common.js";
import { Flatbush } from "@mui/x-charts/internals/Flatbush.js";
export declare const createZoomMap: (zoom: readonly ZoomData[]) => Map<AxisId, ZoomData>;
/**
 * Following selectors are not exported because they exist in the MIT chart only to ba able to reuse the Zoom state from the pro.
 */
export declare const selectorChartZoomIsInteracting: import("reselect").Selector<import("@mui/x-charts/internals/plugins/corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("@mui/x-charts/internals/plugins/corePlugins/useChartExperimentalFeature/useChartExperimentalFeature.types.js").UseChartExperimentalFeaturesState & import("@mui/x-charts/internals/plugins/corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("@mui/x-charts/internals/plugins/corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("@mui/x-charts/internals/index.js").ChartsSeriesConfig> & import("@mui/x-charts/internals/plugins/corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & import("@mui/x-charts/internals/index.js").UseChartInteractionListenerState & Partial<import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
} & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
}, boolean | undefined, []>;
export declare const selectorChartZoomMap: import("reselect").Selector<import("@mui/x-charts/internals/plugins/corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("@mui/x-charts/internals/plugins/corePlugins/useChartExperimentalFeature/useChartExperimentalFeature.types.js").UseChartExperimentalFeaturesState & import("@mui/x-charts/internals/plugins/corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("@mui/x-charts/internals/plugins/corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("@mui/x-charts/internals/index.js").ChartsSeriesConfig> & import("@mui/x-charts/internals/plugins/corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & import("@mui/x-charts/internals/index.js").UseChartInteractionListenerState & Partial<import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
} & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
}, Map<AxisId, ZoomData> | undefined, []>;
export declare const selectorChartAxisZoomData: import("reselect").Selector<any, ZoomData | undefined, [axisId: AxisId]>;
export declare const selectorChartZoomOptionsLookup: import("reselect").Selector<import("@mui/x-charts/internals/plugins/corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("@mui/x-charts/internals/plugins/corePlugins/useChartExperimentalFeature/useChartExperimentalFeature.types.js").UseChartExperimentalFeaturesState & import("@mui/x-charts/internals/plugins/corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("@mui/x-charts/internals/plugins/corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("@mui/x-charts/internals/index.js").ChartsSeriesConfig> & import("@mui/x-charts/internals/plugins/corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & import("@mui/x-charts/internals/index.js").UseChartInteractionListenerState & Partial<import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
} & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
}, {
  [x: string]: import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.types.js").DefaultizedZoomOptions;
  [x: number]: import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.types.js").DefaultizedZoomOptions;
}, []>;
export declare const selectorChartAxisZoomOptionsLookup: import("reselect").Selector<any, import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.types.js").DefaultizedZoomOptions, [axisId: AxisId]>;
export declare const selectorDefaultXAxisTickNumber: import("reselect").Selector<import("@mui/x-charts/internals/plugins/corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("@mui/x-charts/internals/plugins/corePlugins/useChartExperimentalFeature/useChartExperimentalFeature.types.js").UseChartExperimentalFeaturesState & import("@mui/x-charts/internals/plugins/corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("@mui/x-charts/internals/plugins/corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("@mui/x-charts/internals/index.js").ChartsSeriesConfig> & import("@mui/x-charts/internals/plugins/corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & import("@mui/x-charts/internals/index.js").UseChartInteractionListenerState & Partial<{}> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
} & Partial<import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
}, number, []>;
export declare const selectorDefaultYAxisTickNumber: import("reselect").Selector<import("@mui/x-charts/internals/plugins/corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("@mui/x-charts/internals/plugins/corePlugins/useChartExperimentalFeature/useChartExperimentalFeature.types.js").UseChartExperimentalFeaturesState & import("@mui/x-charts/internals/plugins/corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("@mui/x-charts/internals/plugins/corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("@mui/x-charts/internals/index.js").ChartsSeriesConfig> & import("@mui/x-charts/internals/plugins/corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & import("@mui/x-charts/internals/index.js").UseChartInteractionListenerState & Partial<{}> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
} & Partial<import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
}, number, []>;
type DomainDefinition = {
  domain: ReadonlyArray<string | NumberValue>;
  tickNumber?: number;
};
export declare const selectorChartXDomains: import("reselect").Selector<import("@mui/x-charts/internals/plugins/corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("@mui/x-charts/internals/plugins/corePlugins/useChartExperimentalFeature/useChartExperimentalFeature.types.js").UseChartExperimentalFeaturesState & import("@mui/x-charts/internals/plugins/corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("@mui/x-charts/internals/plugins/corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("@mui/x-charts/internals/index.js").ChartsSeriesConfig> & import("@mui/x-charts/internals/plugins/corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & import("@mui/x-charts/internals/index.js").UseChartInteractionListenerState & Partial<import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
} & Partial<{}> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
}, Record<AxisId, DomainDefinition>, []>;
export declare const selectorChartYDomains: import("reselect").Selector<import("@mui/x-charts/internals/plugins/corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("@mui/x-charts/internals/plugins/corePlugins/useChartExperimentalFeature/useChartExperimentalFeature.types.js").UseChartExperimentalFeaturesState & import("@mui/x-charts/internals/plugins/corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("@mui/x-charts/internals/plugins/corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("@mui/x-charts/internals/index.js").ChartsSeriesConfig> & import("@mui/x-charts/internals/plugins/corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & import("@mui/x-charts/internals/index.js").UseChartInteractionListenerState & Partial<import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
} & Partial<{}> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
}, Record<AxisId, DomainDefinition>, []>;
export declare const selectorChartZoomAxisFilters: import("reselect").Selector<import("@mui/x-charts/internals/plugins/corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("@mui/x-charts/internals/plugins/corePlugins/useChartExperimentalFeature/useChartExperimentalFeature.types.js").UseChartExperimentalFeaturesState & import("@mui/x-charts/internals/plugins/corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("@mui/x-charts/internals/plugins/corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("@mui/x-charts/internals/index.js").ChartsSeriesConfig> & import("@mui/x-charts/internals/plugins/corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & import("@mui/x-charts/internals/index.js").UseChartInteractionListenerState & Partial<import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
} & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
} & Partial<{}>, import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/zoom.types.js").GetZoomAxisFilters | undefined, []>;
export declare const selectorChartFilteredXDomains: import("reselect").Selector<import("@mui/x-charts/internals/plugins/corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("@mui/x-charts/internals/plugins/corePlugins/useChartExperimentalFeature/useChartExperimentalFeature.types.js").UseChartExperimentalFeaturesState & import("@mui/x-charts/internals/plugins/corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("@mui/x-charts/internals/plugins/corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("@mui/x-charts/internals/index.js").ChartsSeriesConfig> & import("@mui/x-charts/internals/plugins/corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & import("@mui/x-charts/internals/index.js").UseChartInteractionListenerState & Partial<import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
} & Partial<{}> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
}, Record<AxisId, readonly (string | NumberValue)[]>, []>;
export declare const selectorChartFilteredYDomains: import("reselect").Selector<import("@mui/x-charts/internals/plugins/corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("@mui/x-charts/internals/plugins/corePlugins/useChartExperimentalFeature/useChartExperimentalFeature.types.js").UseChartExperimentalFeaturesState & import("@mui/x-charts/internals/plugins/corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("@mui/x-charts/internals/plugins/corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("@mui/x-charts/internals/index.js").ChartsSeriesConfig> & import("@mui/x-charts/internals/plugins/corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & import("@mui/x-charts/internals/index.js").UseChartInteractionListenerState & Partial<import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
} & Partial<{}> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
}, Record<AxisId, readonly (string | NumberValue)[]>, []>;
export declare const selectorChartNormalizedXScales: import("reselect").Selector<import("@mui/x-charts/internals/plugins/corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("@mui/x-charts/internals/plugins/corePlugins/useChartExperimentalFeature/useChartExperimentalFeature.types.js").UseChartExperimentalFeaturesState & import("@mui/x-charts/internals/plugins/corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("@mui/x-charts/internals/plugins/corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("@mui/x-charts/internals/index.js").ChartsSeriesConfig> & import("@mui/x-charts/internals/plugins/corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & import("@mui/x-charts/internals/index.js").UseChartInteractionListenerState & Partial<import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
} & Partial<{}> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
}, Record<AxisId, D3Scale>, []>;
export declare const selectorChartNormalizedYScales: import("reselect").Selector<import("@mui/x-charts/internals/plugins/corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("@mui/x-charts/internals/plugins/corePlugins/useChartExperimentalFeature/useChartExperimentalFeature.types.js").UseChartExperimentalFeaturesState & import("@mui/x-charts/internals/plugins/corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("@mui/x-charts/internals/plugins/corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("@mui/x-charts/internals/index.js").ChartsSeriesConfig> & import("@mui/x-charts/internals/plugins/corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & import("@mui/x-charts/internals/index.js").UseChartInteractionListenerState & Partial<import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
} & Partial<{}> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
}, Record<AxisId, D3Scale>, []>;
export declare const selectorChartXScales: import("reselect").Selector<import("@mui/x-charts/internals/plugins/corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("@mui/x-charts/internals/plugins/corePlugins/useChartExperimentalFeature/useChartExperimentalFeature.types.js").UseChartExperimentalFeaturesState & import("@mui/x-charts/internals/plugins/corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("@mui/x-charts/internals/plugins/corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("@mui/x-charts/internals/index.js").ChartsSeriesConfig> & import("@mui/x-charts/internals/plugins/corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & import("@mui/x-charts/internals/index.js").UseChartInteractionListenerState & Partial<import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
} & Partial<{}> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
}, Record<AxisId, D3Scale>, []>;
export declare const selectorChartYScales: import("reselect").Selector<import("@mui/x-charts/internals/plugins/corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("@mui/x-charts/internals/plugins/corePlugins/useChartExperimentalFeature/useChartExperimentalFeature.types.js").UseChartExperimentalFeaturesState & import("@mui/x-charts/internals/plugins/corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("@mui/x-charts/internals/plugins/corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("@mui/x-charts/internals/index.js").ChartsSeriesConfig> & import("@mui/x-charts/internals/plugins/corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & import("@mui/x-charts/internals/index.js").UseChartInteractionListenerState & Partial<import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
} & Partial<{}> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
}, Record<AxisId, D3Scale>, []>;
/**
 * The only interesting selectors that merge axis data and zoom if provided.
 */
export declare const selectorChartXAxis: import("reselect").Selector<import("@mui/x-charts/internals/plugins/corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("@mui/x-charts/internals/plugins/corePlugins/useChartExperimentalFeature/useChartExperimentalFeature.types.js").UseChartExperimentalFeaturesState & import("@mui/x-charts/internals/plugins/corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("@mui/x-charts/internals/plugins/corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("@mui/x-charts/internals/index.js").ChartsSeriesConfig> & import("@mui/x-charts/internals/plugins/corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & import("@mui/x-charts/internals/index.js").UseChartInteractionListenerState & Partial<import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
} & Partial<{}> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
}, import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/computeAxisValue.js").ComputeResult<import("@mui/x-charts/internals/index.js").ChartsXAxisProps>, []>;
export declare const selectorChartYAxis: import("reselect").Selector<import("@mui/x-charts/internals/plugins/corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("@mui/x-charts/internals/plugins/corePlugins/useChartExperimentalFeature/useChartExperimentalFeature.types.js").UseChartExperimentalFeaturesState & import("@mui/x-charts/internals/plugins/corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("@mui/x-charts/internals/plugins/corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("@mui/x-charts/internals/index.js").ChartsSeriesConfig> & import("@mui/x-charts/internals/plugins/corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & import("@mui/x-charts/internals/index.js").UseChartInteractionListenerState & Partial<import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
} & Partial<{}> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
}, import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/computeAxisValue.js").ComputeResult<import("@mui/x-charts/internals/index.js").ChartsYAxisProps>, []>;
export declare const selectorChartAxis: import("reselect").Selector<any, import("@mui/x-charts/internals/index.js").ComputedAxis<keyof import("@mui/x-charts/internals/index.js").AxisScaleConfig, any, import("@mui/x-charts/internals/index.js").ChartsXAxisProps>, [axisId: AxisId]>;
export declare const selectorChartRawAxis: import("reselect").Selector<any, ({
  offset?: number;
} & {
  id: AxisId;
  data?: readonly any[] | undefined;
  dataKey?: string;
  valueFormatter?: (<TScaleName extends keyof import("@mui/x-charts/internals/index.js").AxisScaleConfig>(value: any, context: import("@mui/x-charts/internals/index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
  hideTooltip?: boolean;
  reverse?: boolean;
  domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
    min: number;
    max: number;
  });
  ignoreTooltip?: boolean;
} & Omit<Partial<import("@mui/x-charts/internals/index.js").ChartsXAxisProps>, "axisId"> & Partial<Omit<{
  scaleType: "time";
  scale: import("@mui/x-charts-vendor/d3-scale.js").ScaleTime<number, number>;
  colorMap?: import("@mui/x-charts/models/colorMapping.js").ContinuousColorConfig | import("@mui/x-charts/models/colorMapping.js").PiecewiseColorConfig;
} | {
  scaleType: "linear";
  scale: import("@mui/x-charts-vendor/d3-scale.js").ScaleLinear<number, number>;
  colorMap?: import("@mui/x-charts/models/colorMapping.js").ContinuousColorConfig | import("@mui/x-charts/models/colorMapping.js").PiecewiseColorConfig;
} | {
  scaleType: "log";
  scale: import("@mui/x-charts-vendor/d3-scale.js").ScaleLogarithmic<number, number>;
  colorMap?: import("@mui/x-charts/models/colorMapping.js").ContinuousColorConfig | import("@mui/x-charts/models/colorMapping.js").PiecewiseColorConfig;
} | {
  scaleType: "symlog";
  scale: import("@mui/x-charts-vendor/d3-scale.js").ScaleSymLog<number, number>;
  colorMap?: import("@mui/x-charts/models/colorMapping.js").ContinuousColorConfig | import("@mui/x-charts/models/colorMapping.js").PiecewiseColorConfig;
  constant?: number;
} | {
  scaleType: "pow";
  scale: import("@mui/x-charts-vendor/d3-scale.js").ScalePower<number, number>;
  colorMap?: import("@mui/x-charts/models/colorMapping.js").ContinuousColorConfig | import("@mui/x-charts/models/colorMapping.js").PiecewiseColorConfig;
} | {
  scaleType: "sqrt";
  scale: import("@mui/x-charts-vendor/d3-scale.js").ScalePower<number, number>;
  colorMap?: import("@mui/x-charts/models/colorMapping.js").ContinuousColorConfig | import("@mui/x-charts/models/colorMapping.js").PiecewiseColorConfig;
} | {
  scaleType: "utc";
  scale: import("@mui/x-charts-vendor/d3-scale.js").ScaleTime<number, number>;
  colorMap?: import("@mui/x-charts/models/colorMapping.js").ContinuousColorConfig | import("@mui/x-charts/models/colorMapping.js").PiecewiseColorConfig;
} | ({
  scaleType: "band";
  scale: import("@mui/x-charts-vendor/d3-scale.js").ScaleBand<{
    toString(): string;
  }>;
  categoryGapRatio: number;
  barGapRatio: number;
  colorMap?: import("@mui/x-charts/models/colorMapping.js").OrdinalColorConfig | import("@mui/x-charts/models/colorMapping.js").ContinuousColorConfig | import("@mui/x-charts/models/colorMapping.js").PiecewiseColorConfig;
} & import("@mui/x-charts/internals/index.js").AxisGroups & Pick<import("@mui/x-charts/hooks/useTicks.js").TickParams, "tickPlacement" | "tickLabelPlacement">) | ({
  scaleType: "point";
  scale: import("@mui/x-charts-vendor/d3-scale.js").ScalePoint<{
    toString(): string;
  }>;
  colorMap?: import("@mui/x-charts/models/colorMapping.js").OrdinalColorConfig | import("@mui/x-charts/models/colorMapping.js").ContinuousColorConfig | import("@mui/x-charts/models/colorMapping.js").PiecewiseColorConfig;
} & import("@mui/x-charts/internals/index.js").AxisGroups), "scale">> & {
  position?: "top" | "bottom" | "none";
  height?: number;
} & import("@mui/x-charts/hooks/useTicks.js").TickParams & import("@mui/x-charts/internals/index.js").AxisConfigExtension & {
  zoom: import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.types.js").DefaultizedZoomOptions | undefined;
}) | ({
  offset?: number;
} & {
  id: AxisId;
  data?: readonly any[] | undefined;
  dataKey?: string;
  valueFormatter?: (<TScaleName extends keyof import("@mui/x-charts/internals/index.js").AxisScaleConfig>(value: any, context: import("@mui/x-charts/internals/index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
  hideTooltip?: boolean;
  reverse?: boolean;
  domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
    min: number;
    max: number;
  });
  ignoreTooltip?: boolean;
} & Omit<Partial<import("@mui/x-charts/internals/index.js").ChartsYAxisProps>, "axisId"> & Partial<Omit<{
  scaleType: "time";
  scale: import("@mui/x-charts-vendor/d3-scale.js").ScaleTime<number, number>;
  colorMap?: import("@mui/x-charts/models/colorMapping.js").ContinuousColorConfig | import("@mui/x-charts/models/colorMapping.js").PiecewiseColorConfig;
} | {
  scaleType: "linear";
  scale: import("@mui/x-charts-vendor/d3-scale.js").ScaleLinear<number, number>;
  colorMap?: import("@mui/x-charts/models/colorMapping.js").ContinuousColorConfig | import("@mui/x-charts/models/colorMapping.js").PiecewiseColorConfig;
} | {
  scaleType: "log";
  scale: import("@mui/x-charts-vendor/d3-scale.js").ScaleLogarithmic<number, number>;
  colorMap?: import("@mui/x-charts/models/colorMapping.js").ContinuousColorConfig | import("@mui/x-charts/models/colorMapping.js").PiecewiseColorConfig;
} | {
  scaleType: "symlog";
  scale: import("@mui/x-charts-vendor/d3-scale.js").ScaleSymLog<number, number>;
  colorMap?: import("@mui/x-charts/models/colorMapping.js").ContinuousColorConfig | import("@mui/x-charts/models/colorMapping.js").PiecewiseColorConfig;
  constant?: number;
} | {
  scaleType: "pow";
  scale: import("@mui/x-charts-vendor/d3-scale.js").ScalePower<number, number>;
  colorMap?: import("@mui/x-charts/models/colorMapping.js").ContinuousColorConfig | import("@mui/x-charts/models/colorMapping.js").PiecewiseColorConfig;
} | {
  scaleType: "sqrt";
  scale: import("@mui/x-charts-vendor/d3-scale.js").ScalePower<number, number>;
  colorMap?: import("@mui/x-charts/models/colorMapping.js").ContinuousColorConfig | import("@mui/x-charts/models/colorMapping.js").PiecewiseColorConfig;
} | {
  scaleType: "utc";
  scale: import("@mui/x-charts-vendor/d3-scale.js").ScaleTime<number, number>;
  colorMap?: import("@mui/x-charts/models/colorMapping.js").ContinuousColorConfig | import("@mui/x-charts/models/colorMapping.js").PiecewiseColorConfig;
} | ({
  scaleType: "band";
  scale: import("@mui/x-charts-vendor/d3-scale.js").ScaleBand<{
    toString(): string;
  }>;
  categoryGapRatio: number;
  barGapRatio: number;
  colorMap?: import("@mui/x-charts/models/colorMapping.js").OrdinalColorConfig | import("@mui/x-charts/models/colorMapping.js").ContinuousColorConfig | import("@mui/x-charts/models/colorMapping.js").PiecewiseColorConfig;
} & import("@mui/x-charts/internals/index.js").AxisGroups & Pick<import("@mui/x-charts/hooks/useTicks.js").TickParams, "tickPlacement" | "tickLabelPlacement">) | ({
  scaleType: "point";
  scale: import("@mui/x-charts-vendor/d3-scale.js").ScalePoint<{
    toString(): string;
  }>;
  colorMap?: import("@mui/x-charts/models/colorMapping.js").OrdinalColorConfig | import("@mui/x-charts/models/colorMapping.js").ContinuousColorConfig | import("@mui/x-charts/models/colorMapping.js").PiecewiseColorConfig;
} & import("@mui/x-charts/internals/index.js").AxisGroups), "scale">> & {
  position?: "left" | "right" | "none";
  width?: number;
} & import("@mui/x-charts/hooks/useTicks.js").TickParams & import("@mui/x-charts/internals/index.js").AxisConfigExtension & {
  zoom: import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.types.js").DefaultizedZoomOptions | undefined;
}) | undefined, [axisId: AxisId]>;
export declare const selectorChartDefaultXAxisId: import("reselect").Selector<import("@mui/x-charts/internals/plugins/corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("@mui/x-charts/internals/plugins/corePlugins/useChartExperimentalFeature/useChartExperimentalFeature.types.js").UseChartExperimentalFeaturesState & import("@mui/x-charts/internals/plugins/corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("@mui/x-charts/internals/plugins/corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("@mui/x-charts/internals/index.js").ChartsSeriesConfig> & import("@mui/x-charts/internals/plugins/corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & import("@mui/x-charts/internals/index.js").UseChartInteractionListenerState & Partial<import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
} & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
}, AxisId, []>;
export declare const selectorChartDefaultYAxisId: import("reselect").Selector<import("@mui/x-charts/internals/plugins/corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("@mui/x-charts/internals/plugins/corePlugins/useChartExperimentalFeature/useChartExperimentalFeature.types.js").UseChartExperimentalFeaturesState & import("@mui/x-charts/internals/plugins/corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("@mui/x-charts/internals/plugins/corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("@mui/x-charts/internals/index.js").ChartsSeriesConfig> & import("@mui/x-charts/internals/plugins/corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & import("@mui/x-charts/internals/index.js").UseChartInteractionListenerState & Partial<import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
} & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
}, AxisId, []>;
export declare const selectorChartSeriesEmptyFlatbushMap: () => Map<SeriesId, Flatbush>;
export declare const selectorChartSeriesFlatbushMap: import("reselect").Selector<import("@mui/x-charts/internals/plugins/corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("@mui/x-charts/internals/plugins/corePlugins/useChartExperimentalFeature/useChartExperimentalFeature.types.js").UseChartExperimentalFeaturesState & import("@mui/x-charts/internals/plugins/corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("@mui/x-charts/internals/plugins/corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("@mui/x-charts/internals/index.js").ChartsSeriesConfig> & import("@mui/x-charts/internals/plugins/corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & import("@mui/x-charts/internals/index.js").UseChartInteractionListenerState & Partial<{}> & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
} & {
  cacheKey: import("@mui/x-charts/internals/plugins/models/index.js").ChartStateCacheKey;
} & Partial<import("@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.types.js").UseChartCartesianAxisState>, Map<SeriesId, Flatbush>, any[]>;
export {};
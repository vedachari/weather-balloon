{"ast":null,"code":"'use client';\n\n/* eslint-disable react-compiler/react-compiler */\nimport * as React from 'react';\nimport useLazyRef from '@mui/utils/useLazyRef';\nconst noop = () => {};\nexport function useLazySelectorEffect(store, selector, effect,\n/**\n * If true, the selector will be ignored.\n */\nskip) {\n  const instance = useLazyRef(initialize, {\n    store,\n    selector,\n    skip\n  }).current;\n  instance.effect = effect;\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  React.useEffect(instance.onMount(skip), [skip]);\n}\n\n// `useLazyRef` typings are incorrect, `params` should not be optional\nfunction initialize(params) {\n  const {\n    store,\n    selector,\n    skip: initialSkip\n  } = params;\n  let isRunning = false;\n  let previousState;\n\n  // We want a single subscription done right away and cleared on unmount only,\n  // but React triggers `useOnMount` multiple times in dev, so we need to manage\n  // the subscription anyway.\n  const subscribe = () => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    instance.dispose ??= store.subscribe(state => {\n      const nextState = selector(state);\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      instance.effect(previousState, nextState);\n      previousState = nextState;\n    });\n  };\n  const instance = {\n    effect: noop,\n    dispose: null,\n    onMount: skip => () => {\n      if (skip) {\n        return undefined;\n      }\n      if (!isRunning) {\n        // Initialize values\n        isRunning = true;\n        previousState = selector(store.value);\n      }\n      subscribe();\n      return () => {\n        instance.dispose?.();\n        instance.dispose = null;\n      };\n    }\n  };\n  if (!initialSkip) {\n    // Initialize values\n    isRunning = true;\n    previousState = selector(store.value);\n    subscribe();\n  }\n  return instance;\n}","map":{"version":3,"names":["React","useLazyRef","noop","useLazySelectorEffect","store","selector","effect","skip","instance","initialize","current","useEffect","onMount","params","initialSkip","isRunning","previousState","subscribe","dispose","state","nextState","undefined","value"],"sources":["/Users/vedachari/projects/weather-balloon/node_modules/@mui/x-charts/esm/internals/plugins/utils/useLazySelectorEffect.js"],"sourcesContent":["'use client';\n\n/* eslint-disable react-compiler/react-compiler */\nimport * as React from 'react';\nimport useLazyRef from '@mui/utils/useLazyRef';\nconst noop = () => {};\nexport function useLazySelectorEffect(store, selector, effect,\n/**\n * If true, the selector will be ignored.\n */\nskip) {\n  const instance = useLazyRef(initialize, {\n    store,\n    selector,\n    skip\n  }).current;\n  instance.effect = effect;\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  React.useEffect(instance.onMount(skip), [skip]);\n}\n\n// `useLazyRef` typings are incorrect, `params` should not be optional\nfunction initialize(params) {\n  const {\n    store,\n    selector,\n    skip: initialSkip\n  } = params;\n  let isRunning = false;\n  let previousState;\n\n  // We want a single subscription done right away and cleared on unmount only,\n  // but React triggers `useOnMount` multiple times in dev, so we need to manage\n  // the subscription anyway.\n  const subscribe = () => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    instance.dispose ??= store.subscribe(state => {\n      const nextState = selector(state);\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      instance.effect(previousState, nextState);\n      previousState = nextState;\n    });\n  };\n  const instance = {\n    effect: noop,\n    dispose: null,\n    onMount: skip => () => {\n      if (skip) {\n        return undefined;\n      }\n      if (!isRunning) {\n        // Initialize values\n        isRunning = true;\n        previousState = selector(store.value);\n      }\n      subscribe();\n      return () => {\n        instance.dispose?.();\n        instance.dispose = null;\n      };\n    }\n  };\n  if (!initialSkip) {\n    // Initialize values\n    isRunning = true;\n    previousState = selector(store.value);\n    subscribe();\n  }\n  return instance;\n}"],"mappings":"AAAA,YAAY;;AAEZ;AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,MAAMC,IAAI,GAAGA,CAAA,KAAM,CAAC,CAAC;AACrB,OAAO,SAASC,qBAAqBA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,MAAM;AAC7D;AACA;AACA;AACAC,IAAI,EAAE;EACJ,MAAMC,QAAQ,GAAGP,UAAU,CAACQ,UAAU,EAAE;IACtCL,KAAK;IACLC,QAAQ;IACRE;EACF,CAAC,CAAC,CAACG,OAAO;EACVF,QAAQ,CAACF,MAAM,GAAGA,MAAM;EACxB;EACAN,KAAK,CAACW,SAAS,CAACH,QAAQ,CAACI,OAAO,CAACL,IAAI,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;AACjD;;AAEA;AACA,SAASE,UAAUA,CAACI,MAAM,EAAE;EAC1B,MAAM;IACJT,KAAK;IACLC,QAAQ;IACRE,IAAI,EAAEO;EACR,CAAC,GAAGD,MAAM;EACV,IAAIE,SAAS,GAAG,KAAK;EACrB,IAAIC,aAAa;;EAEjB;EACA;EACA;EACA,MAAMC,SAAS,GAAGA,CAAA,KAAM;IACtB;IACAT,QAAQ,CAACU,OAAO,KAAKd,KAAK,CAACa,SAAS,CAACE,KAAK,IAAI;MAC5C,MAAMC,SAAS,GAAGf,QAAQ,CAACc,KAAK,CAAC;MACjC;MACAX,QAAQ,CAACF,MAAM,CAACU,aAAa,EAAEI,SAAS,CAAC;MACzCJ,aAAa,GAAGI,SAAS;IAC3B,CAAC,CAAC;EACJ,CAAC;EACD,MAAMZ,QAAQ,GAAG;IACfF,MAAM,EAAEJ,IAAI;IACZgB,OAAO,EAAE,IAAI;IACbN,OAAO,EAAEL,IAAI,IAAI,MAAM;MACrB,IAAIA,IAAI,EAAE;QACR,OAAOc,SAAS;MAClB;MACA,IAAI,CAACN,SAAS,EAAE;QACd;QACAA,SAAS,GAAG,IAAI;QAChBC,aAAa,GAAGX,QAAQ,CAACD,KAAK,CAACkB,KAAK,CAAC;MACvC;MACAL,SAAS,CAAC,CAAC;MACX,OAAO,MAAM;QACXT,QAAQ,CAACU,OAAO,GAAG,CAAC;QACpBV,QAAQ,CAACU,OAAO,GAAG,IAAI;MACzB,CAAC;IACH;EACF,CAAC;EACD,IAAI,CAACJ,WAAW,EAAE;IAChB;IACAC,SAAS,GAAG,IAAI;IAChBC,aAAa,GAAGX,QAAQ,CAACD,KAAK,CAACkB,KAAK,CAAC;IACrCL,SAAS,CAAC,CAAC;EACb;EACA,OAAOT,QAAQ;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
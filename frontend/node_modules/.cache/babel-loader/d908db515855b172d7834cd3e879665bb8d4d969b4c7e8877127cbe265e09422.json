{"ast":null,"code":"var _jsxFileName = \"/Users/vedachari/projects/weather-balloon/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Map from './components/Map';\nimport Slider from './components/Slider';\nimport Meteo from './components/Meteo';\nimport { fetchWeatherApi } from 'openmeteo';\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/*basic flow\n- get hour 0 and display all\n- if user enters balloon/ generates random number: switch to single balloon\n- user can switch back to see all balloons at that time\n- hour changes using slider: stays consistent across time toggle */\n\nconst App = () => {\n  _s();\n  //states\n  const [allBalloons, setAllBalloons] = useState(true); //currently viewing all balloons?\n  const [getWeather, setGetWeather] = useState(false); //shoudl fetch weather for balloon\n  //data\n  const [rand, setRand] = useState(null);\n  const randRef = useRef(rand);\n  const [data, setData] = useState(null); //all balloons\n  const [balloon, setBalloon] = useState(null);\n  const [hour, setHour] = useState(-1);\n  const [weatherData, setWeatherData] = useState(null); // weather data for #rand balloon\n\n  //change rand ref\n  useEffect(() => {\n    randRef.current = rand;\n  }, [rand]);\n\n  // Generate initial rand = 1\n  useEffect(() => {\n    setHour(0);\n    setRand(1);\n  }, []);\n\n  // Log whenever rand changes\n  useEffect(() => {\n    // console.log(\"Random index chosen:\", rand);\n    setGetWeather(!getWeather);\n  }, [rand]);\n  useEffect(() => {\n    setWeatherData(null);\n\n    // Update balloon reference\n    if (data && rand !== null) {\n      setBalloon(data[rand]);\n    }\n  }, [rand, data]);\n\n  // Handler for \"New Random Balloon\" button\n  const handleNewBalloon = () => {\n    // choose random balloon\n    const r = Math.floor(Math.random() * 1000);\n    if (data) {\n      setBalloon(data[r]);\n      setGetWeather(true);\n      // console.log(\"Changed get weather to true\");\n      setWeatherData(null);\n    }\n    ;\n    setAllBalloons(false);\n    setRand(r);\n  };\n\n  // Handler for \"switch view\" button\n  const handleSwitchView = () => {\n    // console.log('All balloons now ', !allBalloons);\n    setAllBalloons(!allBalloons); //switch view\n    if (weatherData == null) {\n      setGetWeather(true);\n    }\n  };\n\n  // Hour changed so get new balloon values\n  useEffect(() => {\n    const fetchBalloons = async () => {\n      try {\n        if (hour > 24 || hour < 0) {\n          return;\n        }\n        ;\n        // console.log(\"fetching hour %d\", hour);\n        const res = await fetch(`/api/treasure/get/${hour}`);\n        if (!res.ok) {\n          setHour(hour + 1);\n          throw new Error(\"Failed to fetch data\");\n        }\n        ;\n        const json = await res.json();\n\n        // convert API data to {lat, lon} format\n        const mapped = json.map(b => ({\n          lat: b[0],\n          lon: b[1],\n          alt: b[2]\n        }));\n        // console.log(mapped[randRef.current!]);\n\n        setData(mapped);\n        setBalloon(mapped[randRef.current]);\n      } catch (err) {\n        // console.error(err);\n      }\n    };\n    if (randRef.current === null) {\n      // console.log(\"rand not chosen\");\n      return;\n    } else {\n      fetchBalloons();\n    }\n    ;\n  }, [hour]);\n\n  // //get weather data: put here to all fewer times\n  useEffect(() => {\n    const fetchWeather = async () => {\n      const wait = milliseconds => {\n        return new Promise(resolve => setTimeout(resolve, milliseconds));\n      };\n      // console.log(\"getting weather\");\n      if ((balloon === null || balloon === void 0 ? void 0 : balloon.lat) == null || (balloon === null || balloon === void 0 ? void 0 : balloon.lon) == null) {\n        return;\n      }\n      try {\n        const params = {\n          \"latitude\": balloon.lat,\n          \"longitude\": balloon.lon,\n          \"daily\": [\"temperature_2m_max\", \"temperature_2m_min\"],\n          \"hourly\": [\"temperature_2m\", \"relative_humidity_2m\", \"precipitation_probability\", \"precipitation\"],\n          \"timezone\": \"auto\",\n          \"forecast_days\": 1\n        };\n        const url = \"https://api.open-meteo.com/v1/forecast\";\n        const responses = await fetchWeatherApi(url, params);\n        if (!responses) {\n          console.log('response null so calling again');\n          await wait(2000);\n          fetchWeather();\n        }\n        const response = responses[0];\n        // console.log('response',response);\n\n        // Attributes\n        const utcOffsetSeconds = response.utcOffsetSeconds();\n        const hourly = response.hourly();\n        const daily = response.daily();\n        const data = {\n          latitude: response.latitude(),\n          longitude: response.longitude(),\n          elevation: response.elevation(),\n          utcOffsetSeconds: response.utcOffsetSeconds(),\n          timezone: response.timezone(),\n          timezone_abbreviation: response.timezoneAbbreviation(),\n          hourly: {\n            time: [...Array((Number(hourly.timeEnd()) - Number(hourly.time())) / hourly.interval())].map((_, i) => new Date((Number(hourly.time()) + i * hourly.interval() + utcOffsetSeconds) * 1000)),\n            temperature_2m: hourly.variables(0).valuesArray(),\n            relative_humidity_2m: hourly.variables(1).valuesArray(),\n            precipitation_probability: hourly.variables(2).valuesArray(),\n            precipitation: hourly.variables(3).valuesArray()\n          },\n          daily: {\n            time: [...Array((Number(daily.timeEnd()) - Number(daily.time())) / daily.interval())].map((_, i) => new Date((Number(daily.time()) + i * daily.interval() + utcOffsetSeconds) * 1000)),\n            temperature_2m_max: daily.variables(0).valuesArray(),\n            temperature_2m_min: daily.variables(1).valuesArray()\n          }\n        };\n        console.log(`\\nCoordinates: ${data.latitude}°N ${data.longitude}°E`, `\\nElevation: ${data.elevation}m asl`, `\\nTimezone difference to GMT+0: ${data.utcOffsetSeconds}s`, `\\nTimezone: ${data.timezone}s`);\n        // console.log(\"\\nHourly data\", data.hourly)\n        // console.log(\"\\nDaily data\", data.daily)\n        setWeatherData(data);\n        setGetWeather(false);\n      } catch (error) {\n        console.error(\"Failed to fetch weather data:\", error);\n      }\n    };\n    if (!getWeather) {\n      // console.log('get weather is false');\n      return;\n    }\n    fetchWeather();\n  }, [getWeather]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"View the Balloons\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contianer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"map-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"map\",\n            children: data && /*#__PURE__*/_jsxDEV(Map, {\n              rand: rand,\n              allBalloons: allBalloons,\n              balloons: data,\n              setRand: setRand,\n              setWeatherData: setWeatherData\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Key:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 22\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"dot red\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 22\n              }, this), \" Altitude under 10 km\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"dot black\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 22\n              }, this), \" Altitude over 10 km\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleNewBalloon,\n              className: \"generate-button\",\n              children: \"Show Random Balloon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 17\n            }, this), allBalloons && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleSwitchView,\n              className: \"generate-button\",\n              children: [\"Show Balloon # \", rand]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 34\n            }, this), !allBalloons && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleSwitchView,\n              className: \"generate-button\",\n              children: \"Show all balloons\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 35\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"slider\",\n            children: /*#__PURE__*/_jsxDEV(Slider, {\n              hour: hour,\n              setHour: setHour\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this), weatherData && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Weather On Ground\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Meteo, {\n              weatherData: weatherData,\n              hour: hour,\n              alt: balloon === null || balloon === void 0 ? void 0 : balloon.alt,\n              rand: rand\n            }, rand, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 18\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"aQnSkWSk7Mwkc6XF9ebijGTVnAw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","Slider","Meteo","fetchWeatherApi","jsxDEV","_jsxDEV","App","_s","allBalloons","setAllBalloons","getWeather","setGetWeather","rand","setRand","randRef","data","setData","balloon","setBalloon","hour","setHour","weatherData","setWeatherData","current","handleNewBalloon","r","Math","floor","random","handleSwitchView","fetchBalloons","res","fetch","ok","Error","json","mapped","map","b","lat","lon","alt","err","fetchWeather","wait","milliseconds","Promise","resolve","setTimeout","params","url","responses","console","log","response","utcOffsetSeconds","hourly","daily","latitude","longitude","elevation","timezone","timezone_abbreviation","timezoneAbbreviation","time","Array","Number","timeEnd","interval","_","i","Date","temperature_2m","variables","valuesArray","relative_humidity_2m","precipitation_probability","precipitation","temperature_2m_max","temperature_2m_min","error","children","className","fileName","_jsxFileName","lineNumber","columnNumber","balloons","onClick","_c","$RefreshReg$"],"sources":["/Users/vedachari/projects/weather-balloon/src/App.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport Map from './components/Map';\nimport Slider from './components/Slider';\nimport Meteo from './components/Meteo';\nimport { fetchWeatherApi } from 'openmeteo';\nimport \"./App.css\";\n\ntype Balloon = {\n  lat: number;\n  lon: number;\n  alt: number;\n};\n\n/*basic flow\n- get hour 0 and display all\n- if user enters balloon/ generates random number: switch to single balloon\n- user can switch back to see all balloons at that time\n- hour changes using slider: stays consistent across time toggle */\n\nconst App: React.FC = () => {\n  //states\n  const [allBalloons, setAllBalloons] = useState<boolean>(true); //currently viewing all balloons?\n  const [getWeather, setGetWeather] = useState<boolean>(false); //shoudl fetch weather for balloon\n  //data\n  const [rand, setRand] = useState<number | null>(null);\n  const randRef = useRef(rand);\n  const [data, setData] = useState<Balloon[] | null> (null); //all balloons\n  const [balloon, setBalloon] = useState<Balloon|null>(null);\n  const [hour, setHour] = useState< number>(-1);\n  const [weatherData, setWeatherData] = useState<any>(null); // weather data for #rand balloon\n\n  //change rand ref\n  useEffect(() => {\n    randRef.current = rand;\n  }, [rand]);\n\n  // Generate initial rand = 1\n  useEffect(() => {\n    setHour(0);\n    setRand(1);\n  }, []);\n\n  // Log whenever rand changes\n  useEffect(() => {\n    // console.log(\"Random index chosen:\", rand);\n    setGetWeather(!getWeather);\n  }, [rand]);\n\n  useEffect(() => {\n    setWeatherData(null);\n\n    // Update balloon reference\n    if (data && rand !== null) {\n      setBalloon(data[rand]);\n    }\n  }, [rand, data]);\n\n  // Handler for \"New Random Balloon\" button\n  const handleNewBalloon = () => {\n    // choose random balloon\n    const r = Math.floor(Math.random() * 1000);\n    if (data){\n      setBalloon(data[r]);\n      setGetWeather(true);\n      // console.log(\"Changed get weather to true\");\n      setWeatherData(null);\n    };\n    setAllBalloons(false);\n    setRand(r);\n  };\n\n  // Handler for \"switch view\" button\n  const handleSwitchView = () => {\n    // console.log('All balloons now ', !allBalloons);\n    setAllBalloons(!allBalloons); //switch view\n    if(weatherData == null){\n      setGetWeather(true);\n    }\n  };\n\n\n  // Hour changed so get new balloon values\n  useEffect(() => {\n      const fetchBalloons = async () => {\n        try {\n          if(hour > 24 || hour < 0){\n            return;\n          };\n          // console.log(\"fetching hour %d\", hour);\n          const res = await fetch(`/api/treasure/get/${hour}`);\n          if (!res.ok){ \n            setHour(hour+1);\n            throw new Error(\"Failed to fetch data\");\n          };\n  \n          const json = await res.json();\n  \n          // convert API data to {lat, lon} format\n          const mapped = json.map((b: any) => ({\n            lat: b[0],\n            lon: b[1],\n            alt: b[2],\n          }));\n          // console.log(mapped[randRef.current!]);\n\n          setData(mapped);\n          setBalloon(mapped[randRef.current!]);\n        } catch (err) {\n          // console.error(err);\n        }\n      };\n      if (randRef.current === null){\n          // console.log(\"rand not chosen\");\n          return;\n      }else{\n        fetchBalloons();\n      };\n    }, [hour]);\n\n    // //get weather data: put here to all fewer times\n    useEffect(() => {\n        const fetchWeather = async () => {\n          const wait = (milliseconds: number): Promise<void> => {\n            return new Promise(resolve => setTimeout(resolve, milliseconds));\n          };\n          // console.log(\"getting weather\");\n            if(balloon?.lat == null || balloon?.lon == null){\n              return\n            }\n            try{\n                const params = {\n                \"latitude\": balloon.lat,\n                \"longitude\": balloon.lon,\n                \"daily\": [\"temperature_2m_max\", \"temperature_2m_min\"],\n                \"hourly\": [\"temperature_2m\", \"relative_humidity_2m\", \"precipitation_probability\", \"precipitation\"],\n                \"timezone\": \"auto\",\n                \"forecast_days\": 1,\n            };\n            const url = \"https://api.open-meteo.com/v1/forecast\";\n            const responses = await fetchWeatherApi(url, params);\n\n\n            if(!responses){\n              console.log('response null so calling again');\n              await wait(2000);\n              fetchWeather();\n            }\n\n            const response = responses[0];\n            // console.log('response',response);\n\n            // Attributes\n            const utcOffsetSeconds = response.utcOffsetSeconds();\n\n            const hourly = response.hourly()!;\n            const daily = response.daily()!;\n\n            const data = {\n                latitude: response.latitude(),\n                longitude: response.longitude(),\n                elevation: response.elevation(),\n                utcOffsetSeconds: response.utcOffsetSeconds(),\n                timezone: response.timezone(),\n                timezone_abbreviation: response.timezoneAbbreviation(),\n                hourly: {\n                    time: [...Array((Number(hourly.timeEnd()) - Number(hourly.time())) / hourly.interval())].map(\n                        (_, i) => new Date((Number(hourly.time()) + i * hourly.interval() + utcOffsetSeconds) * 1000)\n                    ),\n                    temperature_2m: hourly.variables(0)!.valuesArray(),\n                    relative_humidity_2m: hourly.variables(1)!.valuesArray(),\n                    precipitation_probability: hourly.variables(2)!.valuesArray(),\n                    precipitation: hourly.variables(3)!.valuesArray(),\n                },\n                daily: {\n                    time: [...Array((Number(daily.timeEnd()) - Number(daily.time())) / daily.interval())].map(\n                        (_, i) => new Date((Number(daily.time()) + i * daily.interval() + utcOffsetSeconds) * 1000)\n                    ),\n                    temperature_2m_max: daily.variables(0)!.valuesArray(),\n                    temperature_2m_min: daily.variables(1)!.valuesArray(),\n                },\n            };\n            console.log(\n                `\\nCoordinates: ${data.latitude}°N ${data.longitude}°E`,\n                `\\nElevation: ${data.elevation}m asl`,\n                `\\nTimezone difference to GMT+0: ${data.utcOffsetSeconds}s`,\n                `\\nTimezone: ${data.timezone}s`,\n            );\n            // console.log(\"\\nHourly data\", data.hourly)\n            // console.log(\"\\nDaily data\", data.daily)\n            setWeatherData(data);\n            setGetWeather(false);\n            } catch (error) {\n                console.error(\"Failed to fetch weather data:\", error);\n            }\n        };\n        if(!getWeather){\n          // console.log('get weather is false');\n          return;\n        }\n        fetchWeather();\n    }, [getWeather]);\n\n  return (\n    <div>\n      <div className=\"App-header\">\n        <h1>View the Balloons</h1>\n      </div>\n      <div >\n        <div className=\"contianer\">\n          {/* Map container */}\n            <div className=\"map-container\">\n                <div className=\"map\">\n                  {data && (<Map rand={rand} allBalloons= {allBalloons} balloons={data}  setRand = {setRand} setWeatherData = {setWeatherData}/>)}\n                </div>\n                <div className=\"legend\">\n                  <p><strong>Key:</strong></p>\n                  <p><span className=\"dot red\"></span> Altitude under 10 km</p>\n                  <p><span className=\"dot black\"></span> Altitude over 10 km</p>\n                </div>\n\n            </div>\n            <div className=\"info-container\">\n              {/* Button at the top */}\n              <div className=\"button\">\n                <button onClick={handleNewBalloon} className=\"generate-button\">\n                  Show Random Balloon\n                </button>\n                {allBalloons && (<button onClick={handleSwitchView} className=\"generate-button\">\n                  Show Balloon # {rand}\n                </button>)}\n                {!allBalloons && (<button onClick={handleSwitchView} className=\"generate-button\">\n                  Show all balloons\n                </button>)}\n              </div>\n              <div className=\"slider\">\n                <Slider \n                  hour = {hour}\n                  setHour = {setHour}/>\n              </div>\n              {weatherData && \n                (<div>\n                  <h1>Weather On Ground</h1>\n                  <Meteo key = {rand} weatherData = {weatherData} hour = {hour} alt = {balloon?.alt} rand = {rand}/>\n                </div>)\n              }\n            </div>\n          </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
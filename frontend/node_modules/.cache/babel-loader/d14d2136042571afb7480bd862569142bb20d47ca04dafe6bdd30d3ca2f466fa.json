{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { isDeepEqual } from '@mui/x-internals/isDeepEqual';\nimport { selectorChartDrawingArea } from \"../../corePlugins/useChartDimensions/index.js\";\nimport { selectorChartSeriesConfig, selectorChartSeriesProcessed } from \"../../corePlugins/useChartSeries/index.js\";\nimport { createSelector } from \"../../utils/selectors.js\";\nimport { computeAxisValue } from \"./computeAxisValue.js\";\nimport { createContinuousScaleGetAxisFilter, createDiscreteScaleGetAxisFilter, createGetAxisFilters } from \"./createAxisFilterMapper.js\";\nimport { createZoomLookup } from \"./createZoomLookup.js\";\nimport { isBandScaleConfig, isPointScaleConfig } from \"../../../../models/axis.js\";\nimport { selectorChartRawXAxis, selectorChartRawYAxis } from \"./useChartCartesianAxisLayout.selectors.js\";\nimport { selectorPreferStrictDomainInLineCharts } from \"../../corePlugins/useChartExperimentalFeature/index.js\";\nimport { getDefaultTickNumber } from \"../../../ticks.js\";\nimport { getNormalizedAxisScale, getRange } from \"./getAxisScale.js\";\nimport { isOrdinalScale } from \"../../../scaleGuards.js\";\nimport { zoomScaleRange } from \"./zoom.js\";\nimport { getAxisExtrema } from \"./getAxisExtrema.js\";\nimport { calculateFinalDomain, calculateInitialDomainAndTickNumber } from \"./domain.js\";\nimport { Flatbush } from \"../../../Flatbush.js\";\nexport const createZoomMap = zoom => {\n  const zoomItemMap = new Map();\n  zoom.forEach(zoomItem => {\n    zoomItemMap.set(zoomItem.axisId, zoomItem);\n  });\n  return zoomItemMap;\n};\nconst selectorChartZoomState = state => state.zoom;\n\n/**\n * Following selectors are not exported because they exist in the MIT chart only to ba able to reuse the Zoom state from the pro.\n */\n\nexport const selectorChartZoomIsInteracting = createSelector([selectorChartZoomState], zoom => zoom?.isInteracting);\nexport const selectorChartZoomMap = createSelector([selectorChartZoomState], zoom => zoom?.zoomData && createZoomMap(zoom?.zoomData));\nexport const selectorChartAxisZoomData = createSelector([selectorChartZoomMap, (_, axisId) => axisId], (zoomMap, axisId) => zoomMap?.get(axisId));\nexport const selectorChartZoomOptionsLookup = createSelector([selectorChartRawXAxis, selectorChartRawYAxis], (xAxis, yAxis) => _extends({}, createZoomLookup('x')(xAxis), createZoomLookup('y')(yAxis)));\nexport const selectorChartAxisZoomOptionsLookup = createSelector([selectorChartZoomOptionsLookup, (_, axisId) => axisId], (axisLookup, axisId) => axisLookup[axisId]);\nexport const selectorDefaultXAxisTickNumber = createSelector([selectorChartDrawingArea], function selectorDefaultXAxisTickNumber(drawingArea) {\n  return getDefaultTickNumber(drawingArea.width);\n});\nexport const selectorDefaultYAxisTickNumber = createSelector([selectorChartDrawingArea], function selectorDefaultYAxisTickNumber(drawingArea) {\n  return getDefaultTickNumber(drawingArea.height);\n});\nexport const selectorChartXDomains = createSelector([selectorChartRawXAxis, selectorChartSeriesProcessed, selectorChartSeriesConfig, selectorPreferStrictDomainInLineCharts, selectorDefaultXAxisTickNumber], function selectorChartXDomains(axes, formattedSeries, seriesConfig, preferStrictDomainInLineCharts, defaultTickNumber) {\n  const axisDirection = 'x';\n  const domains = {};\n  axes?.forEach((eachAxis, axisIndex) => {\n    const axis = eachAxis;\n    if (isBandScaleConfig(axis) || isPointScaleConfig(axis)) {\n      domains[axis.id] = {\n        domain: axis.data\n      };\n      return;\n    }\n    const axisExtrema = getAxisExtrema(axis, axisDirection, seriesConfig, axisIndex, formattedSeries);\n    domains[axis.id] = calculateInitialDomainAndTickNumber(axis, 'x', axisIndex, formattedSeries, axisExtrema, defaultTickNumber, preferStrictDomainInLineCharts);\n  });\n  return domains;\n});\nexport const selectorChartYDomains = createSelector([selectorChartRawYAxis, selectorChartSeriesProcessed, selectorChartSeriesConfig, selectorPreferStrictDomainInLineCharts, selectorDefaultYAxisTickNumber], function selectorChartYDomains(axes, formattedSeries, seriesConfig, preferStrictDomainInLineCharts, defaultTickNumber) {\n  const axisDirection = 'y';\n  const domains = {};\n  axes?.forEach((eachAxis, axisIndex) => {\n    const axis = eachAxis;\n    if (isBandScaleConfig(axis) || isPointScaleConfig(axis)) {\n      domains[axis.id] = {\n        domain: axis.data\n      };\n      return;\n    }\n    const axisExtrema = getAxisExtrema(axis, axisDirection, seriesConfig, axisIndex, formattedSeries);\n    domains[axis.id] = calculateInitialDomainAndTickNumber(axis, 'y', axisIndex, formattedSeries, axisExtrema, defaultTickNumber, preferStrictDomainInLineCharts);\n  });\n  return domains;\n});\nexport const selectorChartZoomAxisFilters = createSelector([selectorChartZoomMap, selectorChartZoomOptionsLookup, selectorChartRawXAxis, selectorChartRawYAxis, selectorChartXDomains, selectorChartYDomains], (zoomMap, zoomOptions, xAxis, yAxis, xDomains, yDomains) => {\n  if (!zoomMap || !zoomOptions) {\n    return undefined;\n  }\n  let hasFilter = false;\n  const filters = {};\n  const axes = [...(xAxis ?? []), ...(yAxis ?? [])];\n  for (let i = 0; i < axes.length; i += 1) {\n    const axis = axes[i];\n    if (!zoomOptions[axis.id] || zoomOptions[axis.id].filterMode !== 'discard') {\n      continue;\n    }\n    const zoom = zoomMap.get(axis.id);\n    if (zoom === undefined || zoom.start <= 0 && zoom.end >= 100) {\n      // No zoom, or zoom with all data visible\n      continue;\n    }\n    const axisDirection = i < (xAxis?.length ?? 0) ? 'x' : 'y';\n    if (axis.scaleType === 'band' || axis.scaleType === 'point') {\n      filters[axis.id] = createDiscreteScaleGetAxisFilter(axis.data, zoom.start, zoom.end, axisDirection);\n    } else {\n      const {\n        domain\n      } = axisDirection === 'x' ? xDomains[axis.id] : yDomains[axis.id];\n      filters[axis.id] = createContinuousScaleGetAxisFilter(\n      // For continuous scales, the domain is always a two-value array.\n      domain, zoom.start, zoom.end, axisDirection, axis.data);\n    }\n    hasFilter = true;\n  }\n  if (!hasFilter) {\n    return undefined;\n  }\n  return createGetAxisFilters(filters);\n});\nexport const selectorChartFilteredXDomains = createSelector([selectorChartRawXAxis, selectorChartSeriesProcessed, selectorChartSeriesConfig, selectorChartZoomMap, selectorChartZoomOptionsLookup, selectorChartZoomAxisFilters, selectorPreferStrictDomainInLineCharts, selectorChartXDomains], (axes, formattedSeries, seriesConfig, zoomMap, zoomOptions, getFilters, preferStrictDomainInLineCharts, domains) => {\n  const filteredDomains = {};\n  axes?.forEach((axis, axisIndex) => {\n    const domain = domains[axis.id].domain;\n    if (isBandScaleConfig(axis) || isPointScaleConfig(axis)) {\n      filteredDomains[axis.id] = domain;\n      return;\n    }\n    const zoom = zoomMap?.get(axis.id);\n    const zoomOption = zoomOptions?.[axis.id];\n    const filter = zoom === undefined && !zoomOption ? getFilters : undefined; // Do not apply filtering if zoom is already defined.\n\n    if (!filter) {\n      filteredDomains[axis.id] = domain;\n      return;\n    }\n    const rawTickNumber = domains[axis.id].tickNumber;\n    const axisExtrema = getAxisExtrema(axis, 'x', seriesConfig, axisIndex, formattedSeries, filter);\n    filteredDomains[axis.id] = calculateFinalDomain(axis, 'x', axisIndex, formattedSeries, axisExtrema, rawTickNumber, preferStrictDomainInLineCharts);\n  });\n  return filteredDomains;\n}, {\n  memoizeOptions: {\n    resultEqualityCheck: (a, b) => isDeepEqual(a, b)\n  }\n});\nexport const selectorChartFilteredYDomains = createSelector([selectorChartRawYAxis, selectorChartSeriesProcessed, selectorChartSeriesConfig, selectorChartZoomMap, selectorChartZoomOptionsLookup, selectorChartZoomAxisFilters, selectorPreferStrictDomainInLineCharts, selectorChartYDomains], (axes, formattedSeries, seriesConfig, zoomMap, zoomOptions, getFilters, preferStrictDomainInLineCharts, domains) => {\n  const filteredDomains = {};\n  axes?.forEach((axis, axisIndex) => {\n    const domain = domains[axis.id].domain;\n    if (isBandScaleConfig(axis) || isPointScaleConfig(axis)) {\n      filteredDomains[axis.id] = domain;\n      return;\n    }\n    const zoom = zoomMap?.get(axis.id);\n    const zoomOption = zoomOptions?.[axis.id];\n    const filter = zoom === undefined && !zoomOption ? getFilters : undefined; // Do not apply filtering if zoom is already defined.\n\n    if (!filter) {\n      filteredDomains[axis.id] = domain;\n      return;\n    }\n    const rawTickNumber = domains[axis.id].tickNumber;\n    const axisExtrema = getAxisExtrema(axis, 'y', seriesConfig, axisIndex, formattedSeries, filter);\n    filteredDomains[axis.id] = calculateFinalDomain(axis, 'y', axisIndex, formattedSeries, axisExtrema, rawTickNumber, preferStrictDomainInLineCharts);\n  });\n  return filteredDomains;\n}, {\n  memoizeOptions: {\n    resultEqualityCheck: (a, b) => isDeepEqual(a, b)\n  }\n});\nexport const selectorChartNormalizedXScales = createSelector([selectorChartRawXAxis, selectorChartFilteredXDomains], function selectorChartNormalizedXScales(axes, filteredDomains) {\n  const scales = {};\n  axes?.forEach(eachAxis => {\n    const axis = eachAxis;\n    const domain = filteredDomains[axis.id];\n    scales[axis.id] = getNormalizedAxisScale(axis, domain);\n  });\n  return scales;\n});\nexport const selectorChartNormalizedYScales = createSelector([selectorChartRawYAxis, selectorChartFilteredYDomains], function selectorChartNormalizedYScales(axes, filteredDomains) {\n  const scales = {};\n  axes?.forEach(eachAxis => {\n    const axis = eachAxis;\n    const domain = filteredDomains[axis.id];\n    scales[axis.id] = getNormalizedAxisScale(axis, domain);\n  });\n  return scales;\n});\nexport const selectorChartXScales = createSelector([selectorChartRawXAxis, selectorChartNormalizedXScales, selectorChartDrawingArea, selectorChartZoomMap], function selectorChartXScales(axes, normalizedScales, drawingArea, zoomMap) {\n  const scales = {};\n  axes?.forEach(eachAxis => {\n    const axis = eachAxis;\n    const zoom = zoomMap?.get(axis.id);\n    const zoomRange = zoom ? [zoom.start, zoom.end] : [0, 100];\n    const range = getRange(drawingArea, 'x', axis);\n    const scale = normalizedScales[axis.id].copy();\n    const zoomedRange = zoomScaleRange(range, zoomRange);\n    scale.range(zoomedRange);\n    scales[axis.id] = scale;\n  });\n  return scales;\n});\nexport const selectorChartYScales = createSelector([selectorChartRawYAxis, selectorChartNormalizedYScales, selectorChartDrawingArea, selectorChartZoomMap], function selectorChartYScales(axes, normalizedScales, drawingArea, zoomMap) {\n  const scales = {};\n  axes?.forEach(eachAxis => {\n    const axis = eachAxis;\n    const zoom = zoomMap?.get(axis.id);\n    const zoomRange = zoom ? [zoom.start, zoom.end] : [0, 100];\n    const range = getRange(drawingArea, 'y', axis);\n    const scale = normalizedScales[axis.id].copy();\n    const scaleRange = isOrdinalScale(scale) ? range.reverse() : range;\n    const zoomedRange = zoomScaleRange(scaleRange, zoomRange);\n    scale.range(zoomedRange);\n    scales[axis.id] = scale;\n  });\n  return scales;\n});\n\n/**\n * The only interesting selectors that merge axis data and zoom if provided.\n */\n\nexport const selectorChartXAxis = createSelector([selectorChartRawXAxis, selectorChartDrawingArea, selectorChartSeriesProcessed, selectorChartSeriesConfig, selectorChartZoomMap, selectorChartXDomains, selectorChartXScales], (axis, drawingArea, formattedSeries, seriesConfig, zoomMap, domains, scales) => computeAxisValue({\n  scales,\n  drawingArea,\n  formattedSeries,\n  axis,\n  seriesConfig,\n  axisDirection: 'x',\n  zoomMap,\n  domains\n}));\nexport const selectorChartYAxis = createSelector([selectorChartRawYAxis, selectorChartDrawingArea, selectorChartSeriesProcessed, selectorChartSeriesConfig, selectorChartZoomMap, selectorChartYDomains, selectorChartYScales], (axis, drawingArea, formattedSeries, seriesConfig, zoomMap, domains, scales) => computeAxisValue({\n  scales,\n  drawingArea,\n  formattedSeries,\n  axis,\n  seriesConfig,\n  axisDirection: 'y',\n  zoomMap,\n  domains\n}));\nexport const selectorChartAxis = createSelector([selectorChartXAxis, selectorChartYAxis, (_, axisId) => axisId], (xAxes, yAxes, axisId) => xAxes?.axis[axisId] ?? yAxes?.axis[axisId]);\nexport const selectorChartRawAxis = createSelector([selectorChartRawXAxis, selectorChartRawYAxis, (state, axisId) => axisId], (xAxes, yAxes, axisId) => {\n  const axis = xAxes?.find(a => a.id === axisId) ?? yAxes?.find(a => a.id === axisId) ?? null;\n  if (!axis) {\n    return undefined;\n  }\n  return axis;\n});\nexport const selectorChartDefaultXAxisId = createSelector([selectorChartRawXAxis], xAxes => xAxes[0].id);\nexport const selectorChartDefaultYAxisId = createSelector([selectorChartRawYAxis], yAxes => yAxes[0].id);\nconst EMPTY_MAP = new Map();\nexport const selectorChartSeriesEmptyFlatbushMap = () => EMPTY_MAP;\nexport const selectorChartSeriesFlatbushMap = createSelector([selectorChartSeriesProcessed, selectorChartNormalizedXScales, selectorChartNormalizedYScales, selectorChartDefaultXAxisId, selectorChartDefaultYAxisId], function selectChartSeriesFlatbushMap(allSeries, xAxesScaleMap, yAxesScaleMap, defaultXAxisId, defaultYAxisId) {\n  // FIXME: Do we want to support non-scatter series here?\n  const validSeries = allSeries.scatter;\n  const flatbushMap = new Map();\n  if (!validSeries) {\n    return flatbushMap;\n  }\n  validSeries.seriesOrder.forEach(seriesId => {\n    const {\n      data,\n      xAxisId = defaultXAxisId,\n      yAxisId = defaultYAxisId\n    } = validSeries.series[seriesId];\n    const flatbush = new Flatbush(data.length);\n    const originalXScale = xAxesScaleMap[xAxisId];\n    const originalYScale = yAxesScaleMap[yAxisId];\n    for (const datum of data) {\n      // Add the points using a [0, 1] range so that we don't need to recreate the Flatbush structure when zooming.\n      // This doesn't happen in practice, though, because currently the scales depend on the drawing area.\n      flatbush.add(originalXScale(datum.x), originalYScale(datum.y));\n    }\n    flatbush.finish();\n    flatbushMap.set(seriesId, flatbush);\n  });\n  return flatbushMap;\n});","map":{"version":3,"names":["_extends","isDeepEqual","selectorChartDrawingArea","selectorChartSeriesConfig","selectorChartSeriesProcessed","createSelector","computeAxisValue","createContinuousScaleGetAxisFilter","createDiscreteScaleGetAxisFilter","createGetAxisFilters","createZoomLookup","isBandScaleConfig","isPointScaleConfig","selectorChartRawXAxis","selectorChartRawYAxis","selectorPreferStrictDomainInLineCharts","getDefaultTickNumber","getNormalizedAxisScale","getRange","isOrdinalScale","zoomScaleRange","getAxisExtrema","calculateFinalDomain","calculateInitialDomainAndTickNumber","Flatbush","createZoomMap","zoom","zoomItemMap","Map","forEach","zoomItem","set","axisId","selectorChartZoomState","state","selectorChartZoomIsInteracting","isInteracting","selectorChartZoomMap","zoomData","selectorChartAxisZoomData","_","zoomMap","get","selectorChartZoomOptionsLookup","xAxis","yAxis","selectorChartAxisZoomOptionsLookup","axisLookup","selectorDefaultXAxisTickNumber","drawingArea","width","selectorDefaultYAxisTickNumber","height","selectorChartXDomains","axes","formattedSeries","seriesConfig","preferStrictDomainInLineCharts","defaultTickNumber","axisDirection","domains","eachAxis","axisIndex","axis","id","domain","data","axisExtrema","selectorChartYDomains","selectorChartZoomAxisFilters","zoomOptions","xDomains","yDomains","undefined","hasFilter","filters","i","length","filterMode","start","end","scaleType","selectorChartFilteredXDomains","getFilters","filteredDomains","zoomOption","filter","rawTickNumber","tickNumber","memoizeOptions","resultEqualityCheck","a","b","selectorChartFilteredYDomains","selectorChartNormalizedXScales","scales","selectorChartNormalizedYScales","selectorChartXScales","normalizedScales","zoomRange","range","scale","copy","zoomedRange","selectorChartYScales","scaleRange","reverse","selectorChartXAxis","selectorChartYAxis","selectorChartAxis","xAxes","yAxes","selectorChartRawAxis","find","selectorChartDefaultXAxisId","selectorChartDefaultYAxisId","EMPTY_MAP","selectorChartSeriesEmptyFlatbushMap","selectorChartSeriesFlatbushMap","selectChartSeriesFlatbushMap","allSeries","xAxesScaleMap","yAxesScaleMap","defaultXAxisId","defaultYAxisId","validSeries","scatter","flatbushMap","seriesOrder","seriesId","xAxisId","yAxisId","series","flatbush","originalXScale","originalYScale","datum","add","x","y","finish"],"sources":["/Users/vedachari/projects/weather-balloon/node_modules/@mui/x-charts/esm/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxisRendering.selectors.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { isDeepEqual } from '@mui/x-internals/isDeepEqual';\nimport { selectorChartDrawingArea } from \"../../corePlugins/useChartDimensions/index.js\";\nimport { selectorChartSeriesConfig, selectorChartSeriesProcessed } from \"../../corePlugins/useChartSeries/index.js\";\nimport { createSelector } from \"../../utils/selectors.js\";\nimport { computeAxisValue } from \"./computeAxisValue.js\";\nimport { createContinuousScaleGetAxisFilter, createDiscreteScaleGetAxisFilter, createGetAxisFilters } from \"./createAxisFilterMapper.js\";\nimport { createZoomLookup } from \"./createZoomLookup.js\";\nimport { isBandScaleConfig, isPointScaleConfig } from \"../../../../models/axis.js\";\nimport { selectorChartRawXAxis, selectorChartRawYAxis } from \"./useChartCartesianAxisLayout.selectors.js\";\nimport { selectorPreferStrictDomainInLineCharts } from \"../../corePlugins/useChartExperimentalFeature/index.js\";\nimport { getDefaultTickNumber } from \"../../../ticks.js\";\nimport { getNormalizedAxisScale, getRange } from \"./getAxisScale.js\";\nimport { isOrdinalScale } from \"../../../scaleGuards.js\";\nimport { zoomScaleRange } from \"./zoom.js\";\nimport { getAxisExtrema } from \"./getAxisExtrema.js\";\nimport { calculateFinalDomain, calculateInitialDomainAndTickNumber } from \"./domain.js\";\nimport { Flatbush } from \"../../../Flatbush.js\";\nexport const createZoomMap = zoom => {\n  const zoomItemMap = new Map();\n  zoom.forEach(zoomItem => {\n    zoomItemMap.set(zoomItem.axisId, zoomItem);\n  });\n  return zoomItemMap;\n};\nconst selectorChartZoomState = state => state.zoom;\n\n/**\n * Following selectors are not exported because they exist in the MIT chart only to ba able to reuse the Zoom state from the pro.\n */\n\nexport const selectorChartZoomIsInteracting = createSelector([selectorChartZoomState], zoom => zoom?.isInteracting);\nexport const selectorChartZoomMap = createSelector([selectorChartZoomState], zoom => zoom?.zoomData && createZoomMap(zoom?.zoomData));\nexport const selectorChartAxisZoomData = createSelector([selectorChartZoomMap, (_, axisId) => axisId], (zoomMap, axisId) => zoomMap?.get(axisId));\nexport const selectorChartZoomOptionsLookup = createSelector([selectorChartRawXAxis, selectorChartRawYAxis], (xAxis, yAxis) => _extends({}, createZoomLookup('x')(xAxis), createZoomLookup('y')(yAxis)));\nexport const selectorChartAxisZoomOptionsLookup = createSelector([selectorChartZoomOptionsLookup, (_, axisId) => axisId], (axisLookup, axisId) => axisLookup[axisId]);\nexport const selectorDefaultXAxisTickNumber = createSelector([selectorChartDrawingArea], function selectorDefaultXAxisTickNumber(drawingArea) {\n  return getDefaultTickNumber(drawingArea.width);\n});\nexport const selectorDefaultYAxisTickNumber = createSelector([selectorChartDrawingArea], function selectorDefaultYAxisTickNumber(drawingArea) {\n  return getDefaultTickNumber(drawingArea.height);\n});\nexport const selectorChartXDomains = createSelector([selectorChartRawXAxis, selectorChartSeriesProcessed, selectorChartSeriesConfig, selectorPreferStrictDomainInLineCharts, selectorDefaultXAxisTickNumber], function selectorChartXDomains(axes, formattedSeries, seriesConfig, preferStrictDomainInLineCharts, defaultTickNumber) {\n  const axisDirection = 'x';\n  const domains = {};\n  axes?.forEach((eachAxis, axisIndex) => {\n    const axis = eachAxis;\n    if (isBandScaleConfig(axis) || isPointScaleConfig(axis)) {\n      domains[axis.id] = {\n        domain: axis.data\n      };\n      return;\n    }\n    const axisExtrema = getAxisExtrema(axis, axisDirection, seriesConfig, axisIndex, formattedSeries);\n    domains[axis.id] = calculateInitialDomainAndTickNumber(axis, 'x', axisIndex, formattedSeries, axisExtrema, defaultTickNumber, preferStrictDomainInLineCharts);\n  });\n  return domains;\n});\nexport const selectorChartYDomains = createSelector([selectorChartRawYAxis, selectorChartSeriesProcessed, selectorChartSeriesConfig, selectorPreferStrictDomainInLineCharts, selectorDefaultYAxisTickNumber], function selectorChartYDomains(axes, formattedSeries, seriesConfig, preferStrictDomainInLineCharts, defaultTickNumber) {\n  const axisDirection = 'y';\n  const domains = {};\n  axes?.forEach((eachAxis, axisIndex) => {\n    const axis = eachAxis;\n    if (isBandScaleConfig(axis) || isPointScaleConfig(axis)) {\n      domains[axis.id] = {\n        domain: axis.data\n      };\n      return;\n    }\n    const axisExtrema = getAxisExtrema(axis, axisDirection, seriesConfig, axisIndex, formattedSeries);\n    domains[axis.id] = calculateInitialDomainAndTickNumber(axis, 'y', axisIndex, formattedSeries, axisExtrema, defaultTickNumber, preferStrictDomainInLineCharts);\n  });\n  return domains;\n});\nexport const selectorChartZoomAxisFilters = createSelector([selectorChartZoomMap, selectorChartZoomOptionsLookup, selectorChartRawXAxis, selectorChartRawYAxis, selectorChartXDomains, selectorChartYDomains], (zoomMap, zoomOptions, xAxis, yAxis, xDomains, yDomains) => {\n  if (!zoomMap || !zoomOptions) {\n    return undefined;\n  }\n  let hasFilter = false;\n  const filters = {};\n  const axes = [...(xAxis ?? []), ...(yAxis ?? [])];\n  for (let i = 0; i < axes.length; i += 1) {\n    const axis = axes[i];\n    if (!zoomOptions[axis.id] || zoomOptions[axis.id].filterMode !== 'discard') {\n      continue;\n    }\n    const zoom = zoomMap.get(axis.id);\n    if (zoom === undefined || zoom.start <= 0 && zoom.end >= 100) {\n      // No zoom, or zoom with all data visible\n      continue;\n    }\n    const axisDirection = i < (xAxis?.length ?? 0) ? 'x' : 'y';\n    if (axis.scaleType === 'band' || axis.scaleType === 'point') {\n      filters[axis.id] = createDiscreteScaleGetAxisFilter(axis.data, zoom.start, zoom.end, axisDirection);\n    } else {\n      const {\n        domain\n      } = axisDirection === 'x' ? xDomains[axis.id] : yDomains[axis.id];\n      filters[axis.id] = createContinuousScaleGetAxisFilter(\n      // For continuous scales, the domain is always a two-value array.\n      domain, zoom.start, zoom.end, axisDirection, axis.data);\n    }\n    hasFilter = true;\n  }\n  if (!hasFilter) {\n    return undefined;\n  }\n  return createGetAxisFilters(filters);\n});\nexport const selectorChartFilteredXDomains = createSelector([selectorChartRawXAxis, selectorChartSeriesProcessed, selectorChartSeriesConfig, selectorChartZoomMap, selectorChartZoomOptionsLookup, selectorChartZoomAxisFilters, selectorPreferStrictDomainInLineCharts, selectorChartXDomains], (axes, formattedSeries, seriesConfig, zoomMap, zoomOptions, getFilters, preferStrictDomainInLineCharts, domains) => {\n  const filteredDomains = {};\n  axes?.forEach((axis, axisIndex) => {\n    const domain = domains[axis.id].domain;\n    if (isBandScaleConfig(axis) || isPointScaleConfig(axis)) {\n      filteredDomains[axis.id] = domain;\n      return;\n    }\n    const zoom = zoomMap?.get(axis.id);\n    const zoomOption = zoomOptions?.[axis.id];\n    const filter = zoom === undefined && !zoomOption ? getFilters : undefined; // Do not apply filtering if zoom is already defined.\n\n    if (!filter) {\n      filteredDomains[axis.id] = domain;\n      return;\n    }\n    const rawTickNumber = domains[axis.id].tickNumber;\n    const axisExtrema = getAxisExtrema(axis, 'x', seriesConfig, axisIndex, formattedSeries, filter);\n    filteredDomains[axis.id] = calculateFinalDomain(axis, 'x', axisIndex, formattedSeries, axisExtrema, rawTickNumber, preferStrictDomainInLineCharts);\n  });\n  return filteredDomains;\n}, {\n  memoizeOptions: {\n    resultEqualityCheck: (a, b) => isDeepEqual(a, b)\n  }\n});\nexport const selectorChartFilteredYDomains = createSelector([selectorChartRawYAxis, selectorChartSeriesProcessed, selectorChartSeriesConfig, selectorChartZoomMap, selectorChartZoomOptionsLookup, selectorChartZoomAxisFilters, selectorPreferStrictDomainInLineCharts, selectorChartYDomains], (axes, formattedSeries, seriesConfig, zoomMap, zoomOptions, getFilters, preferStrictDomainInLineCharts, domains) => {\n  const filteredDomains = {};\n  axes?.forEach((axis, axisIndex) => {\n    const domain = domains[axis.id].domain;\n    if (isBandScaleConfig(axis) || isPointScaleConfig(axis)) {\n      filteredDomains[axis.id] = domain;\n      return;\n    }\n    const zoom = zoomMap?.get(axis.id);\n    const zoomOption = zoomOptions?.[axis.id];\n    const filter = zoom === undefined && !zoomOption ? getFilters : undefined; // Do not apply filtering if zoom is already defined.\n\n    if (!filter) {\n      filteredDomains[axis.id] = domain;\n      return;\n    }\n    const rawTickNumber = domains[axis.id].tickNumber;\n    const axisExtrema = getAxisExtrema(axis, 'y', seriesConfig, axisIndex, formattedSeries, filter);\n    filteredDomains[axis.id] = calculateFinalDomain(axis, 'y', axisIndex, formattedSeries, axisExtrema, rawTickNumber, preferStrictDomainInLineCharts);\n  });\n  return filteredDomains;\n}, {\n  memoizeOptions: {\n    resultEqualityCheck: (a, b) => isDeepEqual(a, b)\n  }\n});\nexport const selectorChartNormalizedXScales = createSelector([selectorChartRawXAxis, selectorChartFilteredXDomains], function selectorChartNormalizedXScales(axes, filteredDomains) {\n  const scales = {};\n  axes?.forEach(eachAxis => {\n    const axis = eachAxis;\n    const domain = filteredDomains[axis.id];\n    scales[axis.id] = getNormalizedAxisScale(axis, domain);\n  });\n  return scales;\n});\nexport const selectorChartNormalizedYScales = createSelector([selectorChartRawYAxis, selectorChartFilteredYDomains], function selectorChartNormalizedYScales(axes, filteredDomains) {\n  const scales = {};\n  axes?.forEach(eachAxis => {\n    const axis = eachAxis;\n    const domain = filteredDomains[axis.id];\n    scales[axis.id] = getNormalizedAxisScale(axis, domain);\n  });\n  return scales;\n});\nexport const selectorChartXScales = createSelector([selectorChartRawXAxis, selectorChartNormalizedXScales, selectorChartDrawingArea, selectorChartZoomMap], function selectorChartXScales(axes, normalizedScales, drawingArea, zoomMap) {\n  const scales = {};\n  axes?.forEach(eachAxis => {\n    const axis = eachAxis;\n    const zoom = zoomMap?.get(axis.id);\n    const zoomRange = zoom ? [zoom.start, zoom.end] : [0, 100];\n    const range = getRange(drawingArea, 'x', axis);\n    const scale = normalizedScales[axis.id].copy();\n    const zoomedRange = zoomScaleRange(range, zoomRange);\n    scale.range(zoomedRange);\n    scales[axis.id] = scale;\n  });\n  return scales;\n});\nexport const selectorChartYScales = createSelector([selectorChartRawYAxis, selectorChartNormalizedYScales, selectorChartDrawingArea, selectorChartZoomMap], function selectorChartYScales(axes, normalizedScales, drawingArea, zoomMap) {\n  const scales = {};\n  axes?.forEach(eachAxis => {\n    const axis = eachAxis;\n    const zoom = zoomMap?.get(axis.id);\n    const zoomRange = zoom ? [zoom.start, zoom.end] : [0, 100];\n    const range = getRange(drawingArea, 'y', axis);\n    const scale = normalizedScales[axis.id].copy();\n    const scaleRange = isOrdinalScale(scale) ? range.reverse() : range;\n    const zoomedRange = zoomScaleRange(scaleRange, zoomRange);\n    scale.range(zoomedRange);\n    scales[axis.id] = scale;\n  });\n  return scales;\n});\n\n/**\n * The only interesting selectors that merge axis data and zoom if provided.\n */\n\nexport const selectorChartXAxis = createSelector([selectorChartRawXAxis, selectorChartDrawingArea, selectorChartSeriesProcessed, selectorChartSeriesConfig, selectorChartZoomMap, selectorChartXDomains, selectorChartXScales], (axis, drawingArea, formattedSeries, seriesConfig, zoomMap, domains, scales) => computeAxisValue({\n  scales,\n  drawingArea,\n  formattedSeries,\n  axis,\n  seriesConfig,\n  axisDirection: 'x',\n  zoomMap,\n  domains\n}));\nexport const selectorChartYAxis = createSelector([selectorChartRawYAxis, selectorChartDrawingArea, selectorChartSeriesProcessed, selectorChartSeriesConfig, selectorChartZoomMap, selectorChartYDomains, selectorChartYScales], (axis, drawingArea, formattedSeries, seriesConfig, zoomMap, domains, scales) => computeAxisValue({\n  scales,\n  drawingArea,\n  formattedSeries,\n  axis,\n  seriesConfig,\n  axisDirection: 'y',\n  zoomMap,\n  domains\n}));\nexport const selectorChartAxis = createSelector([selectorChartXAxis, selectorChartYAxis, (_, axisId) => axisId], (xAxes, yAxes, axisId) => xAxes?.axis[axisId] ?? yAxes?.axis[axisId]);\nexport const selectorChartRawAxis = createSelector([selectorChartRawXAxis, selectorChartRawYAxis, (state, axisId) => axisId], (xAxes, yAxes, axisId) => {\n  const axis = xAxes?.find(a => a.id === axisId) ?? yAxes?.find(a => a.id === axisId) ?? null;\n  if (!axis) {\n    return undefined;\n  }\n  return axis;\n});\nexport const selectorChartDefaultXAxisId = createSelector([selectorChartRawXAxis], xAxes => xAxes[0].id);\nexport const selectorChartDefaultYAxisId = createSelector([selectorChartRawYAxis], yAxes => yAxes[0].id);\nconst EMPTY_MAP = new Map();\nexport const selectorChartSeriesEmptyFlatbushMap = () => EMPTY_MAP;\nexport const selectorChartSeriesFlatbushMap = createSelector([selectorChartSeriesProcessed, selectorChartNormalizedXScales, selectorChartNormalizedYScales, selectorChartDefaultXAxisId, selectorChartDefaultYAxisId], function selectChartSeriesFlatbushMap(allSeries, xAxesScaleMap, yAxesScaleMap, defaultXAxisId, defaultYAxisId) {\n  // FIXME: Do we want to support non-scatter series here?\n  const validSeries = allSeries.scatter;\n  const flatbushMap = new Map();\n  if (!validSeries) {\n    return flatbushMap;\n  }\n  validSeries.seriesOrder.forEach(seriesId => {\n    const {\n      data,\n      xAxisId = defaultXAxisId,\n      yAxisId = defaultYAxisId\n    } = validSeries.series[seriesId];\n    const flatbush = new Flatbush(data.length);\n    const originalXScale = xAxesScaleMap[xAxisId];\n    const originalYScale = yAxesScaleMap[yAxisId];\n    for (const datum of data) {\n      // Add the points using a [0, 1] range so that we don't need to recreate the Flatbush structure when zooming.\n      // This doesn't happen in practice, though, because currently the scales depend on the drawing area.\n      flatbush.add(originalXScale(datum.x), originalYScale(datum.y));\n    }\n    flatbush.finish();\n    flatbushMap.set(seriesId, flatbush);\n  });\n  return flatbushMap;\n});"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,SAASC,WAAW,QAAQ,8BAA8B;AAC1D,SAASC,wBAAwB,QAAQ,+CAA+C;AACxF,SAASC,yBAAyB,EAAEC,4BAA4B,QAAQ,2CAA2C;AACnH,SAASC,cAAc,QAAQ,0BAA0B;AACzD,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,SAASC,kCAAkC,EAAEC,gCAAgC,EAAEC,oBAAoB,QAAQ,6BAA6B;AACxI,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,SAASC,iBAAiB,EAAEC,kBAAkB,QAAQ,4BAA4B;AAClF,SAASC,qBAAqB,EAAEC,qBAAqB,QAAQ,4CAA4C;AACzG,SAASC,sCAAsC,QAAQ,wDAAwD;AAC/G,SAASC,oBAAoB,QAAQ,mBAAmB;AACxD,SAASC,sBAAsB,EAAEC,QAAQ,QAAQ,mBAAmB;AACpE,SAASC,cAAc,QAAQ,yBAAyB;AACxD,SAASC,cAAc,QAAQ,WAAW;AAC1C,SAASC,cAAc,QAAQ,qBAAqB;AACpD,SAASC,oBAAoB,EAAEC,mCAAmC,QAAQ,aAAa;AACvF,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C,OAAO,MAAMC,aAAa,GAAGC,IAAI,IAAI;EACnC,MAAMC,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC7BF,IAAI,CAACG,OAAO,CAACC,QAAQ,IAAI;IACvBH,WAAW,CAACI,GAAG,CAACD,QAAQ,CAACE,MAAM,EAAEF,QAAQ,CAAC;EAC5C,CAAC,CAAC;EACF,OAAOH,WAAW;AACpB,CAAC;AACD,MAAMM,sBAAsB,GAAGC,KAAK,IAAIA,KAAK,CAACR,IAAI;;AAElD;AACA;AACA;;AAEA,OAAO,MAAMS,8BAA8B,GAAG9B,cAAc,CAAC,CAAC4B,sBAAsB,CAAC,EAAEP,IAAI,IAAIA,IAAI,EAAEU,aAAa,CAAC;AACnH,OAAO,MAAMC,oBAAoB,GAAGhC,cAAc,CAAC,CAAC4B,sBAAsB,CAAC,EAAEP,IAAI,IAAIA,IAAI,EAAEY,QAAQ,IAAIb,aAAa,CAACC,IAAI,EAAEY,QAAQ,CAAC,CAAC;AACrI,OAAO,MAAMC,yBAAyB,GAAGlC,cAAc,CAAC,CAACgC,oBAAoB,EAAE,CAACG,CAAC,EAAER,MAAM,KAAKA,MAAM,CAAC,EAAE,CAACS,OAAO,EAAET,MAAM,KAAKS,OAAO,EAAEC,GAAG,CAACV,MAAM,CAAC,CAAC;AACjJ,OAAO,MAAMW,8BAA8B,GAAGtC,cAAc,CAAC,CAACQ,qBAAqB,EAAEC,qBAAqB,CAAC,EAAE,CAAC8B,KAAK,EAAEC,KAAK,KAAK7C,QAAQ,CAAC,CAAC,CAAC,EAAEU,gBAAgB,CAAC,GAAG,CAAC,CAACkC,KAAK,CAAC,EAAElC,gBAAgB,CAAC,GAAG,CAAC,CAACmC,KAAK,CAAC,CAAC,CAAC;AACxM,OAAO,MAAMC,kCAAkC,GAAGzC,cAAc,CAAC,CAACsC,8BAA8B,EAAE,CAACH,CAAC,EAAER,MAAM,KAAKA,MAAM,CAAC,EAAE,CAACe,UAAU,EAAEf,MAAM,KAAKe,UAAU,CAACf,MAAM,CAAC,CAAC;AACrK,OAAO,MAAMgB,8BAA8B,GAAG3C,cAAc,CAAC,CAACH,wBAAwB,CAAC,EAAE,SAAS8C,8BAA8BA,CAACC,WAAW,EAAE;EAC5I,OAAOjC,oBAAoB,CAACiC,WAAW,CAACC,KAAK,CAAC;AAChD,CAAC,CAAC;AACF,OAAO,MAAMC,8BAA8B,GAAG9C,cAAc,CAAC,CAACH,wBAAwB,CAAC,EAAE,SAASiD,8BAA8BA,CAACF,WAAW,EAAE;EAC5I,OAAOjC,oBAAoB,CAACiC,WAAW,CAACG,MAAM,CAAC;AACjD,CAAC,CAAC;AACF,OAAO,MAAMC,qBAAqB,GAAGhD,cAAc,CAAC,CAACQ,qBAAqB,EAAET,4BAA4B,EAAED,yBAAyB,EAAEY,sCAAsC,EAAEiC,8BAA8B,CAAC,EAAE,SAASK,qBAAqBA,CAACC,IAAI,EAAEC,eAAe,EAAEC,YAAY,EAAEC,8BAA8B,EAAEC,iBAAiB,EAAE;EACnU,MAAMC,aAAa,GAAG,GAAG;EACzB,MAAMC,OAAO,GAAG,CAAC,CAAC;EAClBN,IAAI,EAAEzB,OAAO,CAAC,CAACgC,QAAQ,EAAEC,SAAS,KAAK;IACrC,MAAMC,IAAI,GAAGF,QAAQ;IACrB,IAAIlD,iBAAiB,CAACoD,IAAI,CAAC,IAAInD,kBAAkB,CAACmD,IAAI,CAAC,EAAE;MACvDH,OAAO,CAACG,IAAI,CAACC,EAAE,CAAC,GAAG;QACjBC,MAAM,EAAEF,IAAI,CAACG;MACf,CAAC;MACD;IACF;IACA,MAAMC,WAAW,GAAG9C,cAAc,CAAC0C,IAAI,EAAEJ,aAAa,EAAEH,YAAY,EAAEM,SAAS,EAAEP,eAAe,CAAC;IACjGK,OAAO,CAACG,IAAI,CAACC,EAAE,CAAC,GAAGzC,mCAAmC,CAACwC,IAAI,EAAE,GAAG,EAAED,SAAS,EAAEP,eAAe,EAAEY,WAAW,EAAET,iBAAiB,EAAED,8BAA8B,CAAC;EAC/J,CAAC,CAAC;EACF,OAAOG,OAAO;AAChB,CAAC,CAAC;AACF,OAAO,MAAMQ,qBAAqB,GAAG/D,cAAc,CAAC,CAACS,qBAAqB,EAAEV,4BAA4B,EAAED,yBAAyB,EAAEY,sCAAsC,EAAEoC,8BAA8B,CAAC,EAAE,SAASiB,qBAAqBA,CAACd,IAAI,EAAEC,eAAe,EAAEC,YAAY,EAAEC,8BAA8B,EAAEC,iBAAiB,EAAE;EACnU,MAAMC,aAAa,GAAG,GAAG;EACzB,MAAMC,OAAO,GAAG,CAAC,CAAC;EAClBN,IAAI,EAAEzB,OAAO,CAAC,CAACgC,QAAQ,EAAEC,SAAS,KAAK;IACrC,MAAMC,IAAI,GAAGF,QAAQ;IACrB,IAAIlD,iBAAiB,CAACoD,IAAI,CAAC,IAAInD,kBAAkB,CAACmD,IAAI,CAAC,EAAE;MACvDH,OAAO,CAACG,IAAI,CAACC,EAAE,CAAC,GAAG;QACjBC,MAAM,EAAEF,IAAI,CAACG;MACf,CAAC;MACD;IACF;IACA,MAAMC,WAAW,GAAG9C,cAAc,CAAC0C,IAAI,EAAEJ,aAAa,EAAEH,YAAY,EAAEM,SAAS,EAAEP,eAAe,CAAC;IACjGK,OAAO,CAACG,IAAI,CAACC,EAAE,CAAC,GAAGzC,mCAAmC,CAACwC,IAAI,EAAE,GAAG,EAAED,SAAS,EAAEP,eAAe,EAAEY,WAAW,EAAET,iBAAiB,EAAED,8BAA8B,CAAC;EAC/J,CAAC,CAAC;EACF,OAAOG,OAAO;AAChB,CAAC,CAAC;AACF,OAAO,MAAMS,4BAA4B,GAAGhE,cAAc,CAAC,CAACgC,oBAAoB,EAAEM,8BAA8B,EAAE9B,qBAAqB,EAAEC,qBAAqB,EAAEuC,qBAAqB,EAAEe,qBAAqB,CAAC,EAAE,CAAC3B,OAAO,EAAE6B,WAAW,EAAE1B,KAAK,EAAEC,KAAK,EAAE0B,QAAQ,EAAEC,QAAQ,KAAK;EACzQ,IAAI,CAAC/B,OAAO,IAAI,CAAC6B,WAAW,EAAE;IAC5B,OAAOG,SAAS;EAClB;EACA,IAAIC,SAAS,GAAG,KAAK;EACrB,MAAMC,OAAO,GAAG,CAAC,CAAC;EAClB,MAAMrB,IAAI,GAAG,CAAC,IAAIV,KAAK,IAAI,EAAE,CAAC,EAAE,IAAIC,KAAK,IAAI,EAAE,CAAC,CAAC;EACjD,KAAK,IAAI+B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtB,IAAI,CAACuB,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;IACvC,MAAMb,IAAI,GAAGT,IAAI,CAACsB,CAAC,CAAC;IACpB,IAAI,CAACN,WAAW,CAACP,IAAI,CAACC,EAAE,CAAC,IAAIM,WAAW,CAACP,IAAI,CAACC,EAAE,CAAC,CAACc,UAAU,KAAK,SAAS,EAAE;MAC1E;IACF;IACA,MAAMpD,IAAI,GAAGe,OAAO,CAACC,GAAG,CAACqB,IAAI,CAACC,EAAE,CAAC;IACjC,IAAItC,IAAI,KAAK+C,SAAS,IAAI/C,IAAI,CAACqD,KAAK,IAAI,CAAC,IAAIrD,IAAI,CAACsD,GAAG,IAAI,GAAG,EAAE;MAC5D;MACA;IACF;IACA,MAAMrB,aAAa,GAAGiB,CAAC,IAAIhC,KAAK,EAAEiC,MAAM,IAAI,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG;IAC1D,IAAId,IAAI,CAACkB,SAAS,KAAK,MAAM,IAAIlB,IAAI,CAACkB,SAAS,KAAK,OAAO,EAAE;MAC3DN,OAAO,CAACZ,IAAI,CAACC,EAAE,CAAC,GAAGxD,gCAAgC,CAACuD,IAAI,CAACG,IAAI,EAAExC,IAAI,CAACqD,KAAK,EAAErD,IAAI,CAACsD,GAAG,EAAErB,aAAa,CAAC;IACrG,CAAC,MAAM;MACL,MAAM;QACJM;MACF,CAAC,GAAGN,aAAa,KAAK,GAAG,GAAGY,QAAQ,CAACR,IAAI,CAACC,EAAE,CAAC,GAAGQ,QAAQ,CAACT,IAAI,CAACC,EAAE,CAAC;MACjEW,OAAO,CAACZ,IAAI,CAACC,EAAE,CAAC,GAAGzD,kCAAkC;MACrD;MACA0D,MAAM,EAAEvC,IAAI,CAACqD,KAAK,EAAErD,IAAI,CAACsD,GAAG,EAAErB,aAAa,EAAEI,IAAI,CAACG,IAAI,CAAC;IACzD;IACAQ,SAAS,GAAG,IAAI;EAClB;EACA,IAAI,CAACA,SAAS,EAAE;IACd,OAAOD,SAAS;EAClB;EACA,OAAOhE,oBAAoB,CAACkE,OAAO,CAAC;AACtC,CAAC,CAAC;AACF,OAAO,MAAMO,6BAA6B,GAAG7E,cAAc,CAAC,CAACQ,qBAAqB,EAAET,4BAA4B,EAAED,yBAAyB,EAAEkC,oBAAoB,EAAEM,8BAA8B,EAAE0B,4BAA4B,EAAEtD,sCAAsC,EAAEsC,qBAAqB,CAAC,EAAE,CAACC,IAAI,EAAEC,eAAe,EAAEC,YAAY,EAAEf,OAAO,EAAE6B,WAAW,EAAEa,UAAU,EAAE1B,8BAA8B,EAAEG,OAAO,KAAK;EACnZ,MAAMwB,eAAe,GAAG,CAAC,CAAC;EAC1B9B,IAAI,EAAEzB,OAAO,CAAC,CAACkC,IAAI,EAAED,SAAS,KAAK;IACjC,MAAMG,MAAM,GAAGL,OAAO,CAACG,IAAI,CAACC,EAAE,CAAC,CAACC,MAAM;IACtC,IAAItD,iBAAiB,CAACoD,IAAI,CAAC,IAAInD,kBAAkB,CAACmD,IAAI,CAAC,EAAE;MACvDqB,eAAe,CAACrB,IAAI,CAACC,EAAE,CAAC,GAAGC,MAAM;MACjC;IACF;IACA,MAAMvC,IAAI,GAAGe,OAAO,EAAEC,GAAG,CAACqB,IAAI,CAACC,EAAE,CAAC;IAClC,MAAMqB,UAAU,GAAGf,WAAW,GAAGP,IAAI,CAACC,EAAE,CAAC;IACzC,MAAMsB,MAAM,GAAG5D,IAAI,KAAK+C,SAAS,IAAI,CAACY,UAAU,GAAGF,UAAU,GAAGV,SAAS,CAAC,CAAC;;IAE3E,IAAI,CAACa,MAAM,EAAE;MACXF,eAAe,CAACrB,IAAI,CAACC,EAAE,CAAC,GAAGC,MAAM;MACjC;IACF;IACA,MAAMsB,aAAa,GAAG3B,OAAO,CAACG,IAAI,CAACC,EAAE,CAAC,CAACwB,UAAU;IACjD,MAAMrB,WAAW,GAAG9C,cAAc,CAAC0C,IAAI,EAAE,GAAG,EAAEP,YAAY,EAAEM,SAAS,EAAEP,eAAe,EAAE+B,MAAM,CAAC;IAC/FF,eAAe,CAACrB,IAAI,CAACC,EAAE,CAAC,GAAG1C,oBAAoB,CAACyC,IAAI,EAAE,GAAG,EAAED,SAAS,EAAEP,eAAe,EAAEY,WAAW,EAAEoB,aAAa,EAAE9B,8BAA8B,CAAC;EACpJ,CAAC,CAAC;EACF,OAAO2B,eAAe;AACxB,CAAC,EAAE;EACDK,cAAc,EAAE;IACdC,mBAAmB,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAK3F,WAAW,CAAC0F,CAAC,EAAEC,CAAC;EACjD;AACF,CAAC,CAAC;AACF,OAAO,MAAMC,6BAA6B,GAAGxF,cAAc,CAAC,CAACS,qBAAqB,EAAEV,4BAA4B,EAAED,yBAAyB,EAAEkC,oBAAoB,EAAEM,8BAA8B,EAAE0B,4BAA4B,EAAEtD,sCAAsC,EAAEqD,qBAAqB,CAAC,EAAE,CAACd,IAAI,EAAEC,eAAe,EAAEC,YAAY,EAAEf,OAAO,EAAE6B,WAAW,EAAEa,UAAU,EAAE1B,8BAA8B,EAAEG,OAAO,KAAK;EACnZ,MAAMwB,eAAe,GAAG,CAAC,CAAC;EAC1B9B,IAAI,EAAEzB,OAAO,CAAC,CAACkC,IAAI,EAAED,SAAS,KAAK;IACjC,MAAMG,MAAM,GAAGL,OAAO,CAACG,IAAI,CAACC,EAAE,CAAC,CAACC,MAAM;IACtC,IAAItD,iBAAiB,CAACoD,IAAI,CAAC,IAAInD,kBAAkB,CAACmD,IAAI,CAAC,EAAE;MACvDqB,eAAe,CAACrB,IAAI,CAACC,EAAE,CAAC,GAAGC,MAAM;MACjC;IACF;IACA,MAAMvC,IAAI,GAAGe,OAAO,EAAEC,GAAG,CAACqB,IAAI,CAACC,EAAE,CAAC;IAClC,MAAMqB,UAAU,GAAGf,WAAW,GAAGP,IAAI,CAACC,EAAE,CAAC;IACzC,MAAMsB,MAAM,GAAG5D,IAAI,KAAK+C,SAAS,IAAI,CAACY,UAAU,GAAGF,UAAU,GAAGV,SAAS,CAAC,CAAC;;IAE3E,IAAI,CAACa,MAAM,EAAE;MACXF,eAAe,CAACrB,IAAI,CAACC,EAAE,CAAC,GAAGC,MAAM;MACjC;IACF;IACA,MAAMsB,aAAa,GAAG3B,OAAO,CAACG,IAAI,CAACC,EAAE,CAAC,CAACwB,UAAU;IACjD,MAAMrB,WAAW,GAAG9C,cAAc,CAAC0C,IAAI,EAAE,GAAG,EAAEP,YAAY,EAAEM,SAAS,EAAEP,eAAe,EAAE+B,MAAM,CAAC;IAC/FF,eAAe,CAACrB,IAAI,CAACC,EAAE,CAAC,GAAG1C,oBAAoB,CAACyC,IAAI,EAAE,GAAG,EAAED,SAAS,EAAEP,eAAe,EAAEY,WAAW,EAAEoB,aAAa,EAAE9B,8BAA8B,CAAC;EACpJ,CAAC,CAAC;EACF,OAAO2B,eAAe;AACxB,CAAC,EAAE;EACDK,cAAc,EAAE;IACdC,mBAAmB,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAK3F,WAAW,CAAC0F,CAAC,EAAEC,CAAC;EACjD;AACF,CAAC,CAAC;AACF,OAAO,MAAME,8BAA8B,GAAGzF,cAAc,CAAC,CAACQ,qBAAqB,EAAEqE,6BAA6B,CAAC,EAAE,SAASY,8BAA8BA,CAACxC,IAAI,EAAE8B,eAAe,EAAE;EAClL,MAAMW,MAAM,GAAG,CAAC,CAAC;EACjBzC,IAAI,EAAEzB,OAAO,CAACgC,QAAQ,IAAI;IACxB,MAAME,IAAI,GAAGF,QAAQ;IACrB,MAAMI,MAAM,GAAGmB,eAAe,CAACrB,IAAI,CAACC,EAAE,CAAC;IACvC+B,MAAM,CAAChC,IAAI,CAACC,EAAE,CAAC,GAAG/C,sBAAsB,CAAC8C,IAAI,EAAEE,MAAM,CAAC;EACxD,CAAC,CAAC;EACF,OAAO8B,MAAM;AACf,CAAC,CAAC;AACF,OAAO,MAAMC,8BAA8B,GAAG3F,cAAc,CAAC,CAACS,qBAAqB,EAAE+E,6BAA6B,CAAC,EAAE,SAASG,8BAA8BA,CAAC1C,IAAI,EAAE8B,eAAe,EAAE;EAClL,MAAMW,MAAM,GAAG,CAAC,CAAC;EACjBzC,IAAI,EAAEzB,OAAO,CAACgC,QAAQ,IAAI;IACxB,MAAME,IAAI,GAAGF,QAAQ;IACrB,MAAMI,MAAM,GAAGmB,eAAe,CAACrB,IAAI,CAACC,EAAE,CAAC;IACvC+B,MAAM,CAAChC,IAAI,CAACC,EAAE,CAAC,GAAG/C,sBAAsB,CAAC8C,IAAI,EAAEE,MAAM,CAAC;EACxD,CAAC,CAAC;EACF,OAAO8B,MAAM;AACf,CAAC,CAAC;AACF,OAAO,MAAME,oBAAoB,GAAG5F,cAAc,CAAC,CAACQ,qBAAqB,EAAEiF,8BAA8B,EAAE5F,wBAAwB,EAAEmC,oBAAoB,CAAC,EAAE,SAAS4D,oBAAoBA,CAAC3C,IAAI,EAAE4C,gBAAgB,EAAEjD,WAAW,EAAER,OAAO,EAAE;EACtO,MAAMsD,MAAM,GAAG,CAAC,CAAC;EACjBzC,IAAI,EAAEzB,OAAO,CAACgC,QAAQ,IAAI;IACxB,MAAME,IAAI,GAAGF,QAAQ;IACrB,MAAMnC,IAAI,GAAGe,OAAO,EAAEC,GAAG,CAACqB,IAAI,CAACC,EAAE,CAAC;IAClC,MAAMmC,SAAS,GAAGzE,IAAI,GAAG,CAACA,IAAI,CAACqD,KAAK,EAAErD,IAAI,CAACsD,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC;IAC1D,MAAMoB,KAAK,GAAGlF,QAAQ,CAAC+B,WAAW,EAAE,GAAG,EAAEc,IAAI,CAAC;IAC9C,MAAMsC,KAAK,GAAGH,gBAAgB,CAACnC,IAAI,CAACC,EAAE,CAAC,CAACsC,IAAI,CAAC,CAAC;IAC9C,MAAMC,WAAW,GAAGnF,cAAc,CAACgF,KAAK,EAAED,SAAS,CAAC;IACpDE,KAAK,CAACD,KAAK,CAACG,WAAW,CAAC;IACxBR,MAAM,CAAChC,IAAI,CAACC,EAAE,CAAC,GAAGqC,KAAK;EACzB,CAAC,CAAC;EACF,OAAON,MAAM;AACf,CAAC,CAAC;AACF,OAAO,MAAMS,oBAAoB,GAAGnG,cAAc,CAAC,CAACS,qBAAqB,EAAEkF,8BAA8B,EAAE9F,wBAAwB,EAAEmC,oBAAoB,CAAC,EAAE,SAASmE,oBAAoBA,CAAClD,IAAI,EAAE4C,gBAAgB,EAAEjD,WAAW,EAAER,OAAO,EAAE;EACtO,MAAMsD,MAAM,GAAG,CAAC,CAAC;EACjBzC,IAAI,EAAEzB,OAAO,CAACgC,QAAQ,IAAI;IACxB,MAAME,IAAI,GAAGF,QAAQ;IACrB,MAAMnC,IAAI,GAAGe,OAAO,EAAEC,GAAG,CAACqB,IAAI,CAACC,EAAE,CAAC;IAClC,MAAMmC,SAAS,GAAGzE,IAAI,GAAG,CAACA,IAAI,CAACqD,KAAK,EAAErD,IAAI,CAACsD,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC;IAC1D,MAAMoB,KAAK,GAAGlF,QAAQ,CAAC+B,WAAW,EAAE,GAAG,EAAEc,IAAI,CAAC;IAC9C,MAAMsC,KAAK,GAAGH,gBAAgB,CAACnC,IAAI,CAACC,EAAE,CAAC,CAACsC,IAAI,CAAC,CAAC;IAC9C,MAAMG,UAAU,GAAGtF,cAAc,CAACkF,KAAK,CAAC,GAAGD,KAAK,CAACM,OAAO,CAAC,CAAC,GAAGN,KAAK;IAClE,MAAMG,WAAW,GAAGnF,cAAc,CAACqF,UAAU,EAAEN,SAAS,CAAC;IACzDE,KAAK,CAACD,KAAK,CAACG,WAAW,CAAC;IACxBR,MAAM,CAAChC,IAAI,CAACC,EAAE,CAAC,GAAGqC,KAAK;EACzB,CAAC,CAAC;EACF,OAAON,MAAM;AACf,CAAC,CAAC;;AAEF;AACA;AACA;;AAEA,OAAO,MAAMY,kBAAkB,GAAGtG,cAAc,CAAC,CAACQ,qBAAqB,EAAEX,wBAAwB,EAAEE,4BAA4B,EAAED,yBAAyB,EAAEkC,oBAAoB,EAAEgB,qBAAqB,EAAE4C,oBAAoB,CAAC,EAAE,CAAClC,IAAI,EAAEd,WAAW,EAAEM,eAAe,EAAEC,YAAY,EAAEf,OAAO,EAAEmB,OAAO,EAAEmC,MAAM,KAAKzF,gBAAgB,CAAC;EAC/TyF,MAAM;EACN9C,WAAW;EACXM,eAAe;EACfQ,IAAI;EACJP,YAAY;EACZG,aAAa,EAAE,GAAG;EAClBlB,OAAO;EACPmB;AACF,CAAC,CAAC,CAAC;AACH,OAAO,MAAMgD,kBAAkB,GAAGvG,cAAc,CAAC,CAACS,qBAAqB,EAAEZ,wBAAwB,EAAEE,4BAA4B,EAAED,yBAAyB,EAAEkC,oBAAoB,EAAE+B,qBAAqB,EAAEoC,oBAAoB,CAAC,EAAE,CAACzC,IAAI,EAAEd,WAAW,EAAEM,eAAe,EAAEC,YAAY,EAAEf,OAAO,EAAEmB,OAAO,EAAEmC,MAAM,KAAKzF,gBAAgB,CAAC;EAC/TyF,MAAM;EACN9C,WAAW;EACXM,eAAe;EACfQ,IAAI;EACJP,YAAY;EACZG,aAAa,EAAE,GAAG;EAClBlB,OAAO;EACPmB;AACF,CAAC,CAAC,CAAC;AACH,OAAO,MAAMiD,iBAAiB,GAAGxG,cAAc,CAAC,CAACsG,kBAAkB,EAAEC,kBAAkB,EAAE,CAACpE,CAAC,EAAER,MAAM,KAAKA,MAAM,CAAC,EAAE,CAAC8E,KAAK,EAAEC,KAAK,EAAE/E,MAAM,KAAK8E,KAAK,EAAE/C,IAAI,CAAC/B,MAAM,CAAC,IAAI+E,KAAK,EAAEhD,IAAI,CAAC/B,MAAM,CAAC,CAAC;AACtL,OAAO,MAAMgF,oBAAoB,GAAG3G,cAAc,CAAC,CAACQ,qBAAqB,EAAEC,qBAAqB,EAAE,CAACoB,KAAK,EAAEF,MAAM,KAAKA,MAAM,CAAC,EAAE,CAAC8E,KAAK,EAAEC,KAAK,EAAE/E,MAAM,KAAK;EACtJ,MAAM+B,IAAI,GAAG+C,KAAK,EAAEG,IAAI,CAACtB,CAAC,IAAIA,CAAC,CAAC3B,EAAE,KAAKhC,MAAM,CAAC,IAAI+E,KAAK,EAAEE,IAAI,CAACtB,CAAC,IAAIA,CAAC,CAAC3B,EAAE,KAAKhC,MAAM,CAAC,IAAI,IAAI;EAC3F,IAAI,CAAC+B,IAAI,EAAE;IACT,OAAOU,SAAS;EAClB;EACA,OAAOV,IAAI;AACb,CAAC,CAAC;AACF,OAAO,MAAMmD,2BAA2B,GAAG7G,cAAc,CAAC,CAACQ,qBAAqB,CAAC,EAAEiG,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,CAAC9C,EAAE,CAAC;AACxG,OAAO,MAAMmD,2BAA2B,GAAG9G,cAAc,CAAC,CAACS,qBAAqB,CAAC,EAAEiG,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,CAAC/C,EAAE,CAAC;AACxG,MAAMoD,SAAS,GAAG,IAAIxF,GAAG,CAAC,CAAC;AAC3B,OAAO,MAAMyF,mCAAmC,GAAGA,CAAA,KAAMD,SAAS;AAClE,OAAO,MAAME,8BAA8B,GAAGjH,cAAc,CAAC,CAACD,4BAA4B,EAAE0F,8BAA8B,EAAEE,8BAA8B,EAAEkB,2BAA2B,EAAEC,2BAA2B,CAAC,EAAE,SAASI,4BAA4BA,CAACC,SAAS,EAAEC,aAAa,EAAEC,aAAa,EAAEC,cAAc,EAAEC,cAAc,EAAE;EACpU;EACA,MAAMC,WAAW,GAAGL,SAAS,CAACM,OAAO;EACrC,MAAMC,WAAW,GAAG,IAAInG,GAAG,CAAC,CAAC;EAC7B,IAAI,CAACiG,WAAW,EAAE;IAChB,OAAOE,WAAW;EACpB;EACAF,WAAW,CAACG,WAAW,CAACnG,OAAO,CAACoG,QAAQ,IAAI;IAC1C,MAAM;MACJ/D,IAAI;MACJgE,OAAO,GAAGP,cAAc;MACxBQ,OAAO,GAAGP;IACZ,CAAC,GAAGC,WAAW,CAACO,MAAM,CAACH,QAAQ,CAAC;IAChC,MAAMI,QAAQ,GAAG,IAAI7G,QAAQ,CAAC0C,IAAI,CAACW,MAAM,CAAC;IAC1C,MAAMyD,cAAc,GAAGb,aAAa,CAACS,OAAO,CAAC;IAC7C,MAAMK,cAAc,GAAGb,aAAa,CAACS,OAAO,CAAC;IAC7C,KAAK,MAAMK,KAAK,IAAItE,IAAI,EAAE;MACxB;MACA;MACAmE,QAAQ,CAACI,GAAG,CAACH,cAAc,CAACE,KAAK,CAACE,CAAC,CAAC,EAAEH,cAAc,CAACC,KAAK,CAACG,CAAC,CAAC,CAAC;IAChE;IACAN,QAAQ,CAACO,MAAM,CAAC,CAAC;IACjBb,WAAW,CAAChG,GAAG,CAACkG,QAAQ,EAAEI,QAAQ,CAAC;EACrC,CAAC,CAAC;EACF,OAAON,WAAW;AACpB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
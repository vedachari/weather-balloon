{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { GestureManager, MoveGesture, PanGesture, PinchGesture, PressAndDragGesture, PressGesture, TapAndDragGesture, TapGesture, TurnWheelGesture } from '@mui/x-internal-gestures/core';\nconst preventDefault = event => event.preventDefault();\nexport const useChartInteractionListener = ({\n  svgRef\n}) => {\n  const gestureManagerRef = React.useRef(null);\n  React.useEffect(() => {\n    const svg = svgRef.current;\n    if (!gestureManagerRef.current) {\n      gestureManagerRef.current = new GestureManager({\n        gestures: [\n        // We separate the zoom gestures from the gestures that are not zoom related\n        // This allows us to configure the zoom gestures based on the zoom configuration.\n        new PanGesture({\n          name: 'pan',\n          threshold: 0,\n          maxPointers: 1\n        }), new PanGesture({\n          name: 'zoomPan',\n          threshold: 0,\n          maxPointers: 1,\n          preventIf: ['zoomTapAndDrag', 'zoomPressAndDrag']\n        }), new MoveGesture({\n          name: 'move',\n          preventIf: ['pan', 'zoomPinch', 'zoomPan'] // Prevent move gesture when pan is active\n        }), new PinchGesture({\n          name: 'zoomPinch',\n          threshold: 5,\n          preventIf: ['pan', 'zoomPan']\n        }), new TurnWheelGesture({\n          name: 'zoomTurnWheel',\n          sensitivity: 0.01,\n          initialDelta: 1\n        }), new TapGesture({\n          name: 'tap',\n          preventIf: ['pan', 'zoomPan', 'zoomPinch']\n        }), new PressGesture({\n          name: 'quickPress',\n          duration: 50\n        }), new TapAndDragGesture({\n          name: 'zoomTapAndDrag',\n          dragThreshold: 10\n        }), new PressAndDragGesture({\n          name: 'zoomPressAndDrag',\n          dragThreshold: 10,\n          preventIf: ['zoomPinch']\n        })]\n      });\n    }\n\n    // Assign gesture manager after initialization\n    const gestureManager = gestureManagerRef.current;\n    if (!svg || !gestureManager) {\n      return undefined;\n    }\n    gestureManager.registerElement(['pan', 'move', 'zoomPinch', 'zoomPan', 'zoomTurnWheel', 'tap', 'quickPress', 'zoomTapAndDrag', 'zoomPressAndDrag'], svg);\n    return () => {\n      // Cleanup gesture manager\n      gestureManager.unregisterAllGestures(svg);\n    };\n  }, [svgRef, gestureManagerRef]);\n  const addInteractionListener = React.useCallback((interaction, callback, options) => {\n    // Forcefully cast the svgRef to any, it is annoying to fix the types.\n    const svg = svgRef.current;\n    svg?.addEventListener(interaction, callback, options);\n    return {\n      cleanup: () => svg?.removeEventListener(interaction, callback)\n    };\n  }, [svgRef]);\n  const updateZoomInteractionListeners = React.useCallback((interaction, options) => {\n    const svg = svgRef.current;\n    const gestureManager = gestureManagerRef.current;\n    if (!gestureManager || !svg) {\n      return;\n    }\n    gestureManager.setGestureOptions(interaction, svg, options ?? {});\n  }, [svgRef, gestureManagerRef]);\n  React.useEffect(() => {\n    const svg = svgRef.current;\n\n    // Disable gesture on safari\n    // https://use-gesture.netlify.app/docs/gestures/#about-the-pinch-gesture\n    svg?.addEventListener('gesturestart', preventDefault);\n    svg?.addEventListener('gesturechange', preventDefault);\n    svg?.addEventListener('gestureend', preventDefault);\n    return () => {\n      svg?.removeEventListener('gesturestart', preventDefault);\n      svg?.removeEventListener('gesturechange', preventDefault);\n      svg?.removeEventListener('gestureend', preventDefault);\n    };\n  }, [svgRef]);\n  return {\n    instance: {\n      addInteractionListener,\n      updateZoomInteractionListeners\n    }\n  };\n};\nuseChartInteractionListener.params = {};\nuseChartInteractionListener.getInitialState = () => {\n  return {};\n};","map":{"version":3,"names":["React","GestureManager","MoveGesture","PanGesture","PinchGesture","PressAndDragGesture","PressGesture","TapAndDragGesture","TapGesture","TurnWheelGesture","preventDefault","event","useChartInteractionListener","svgRef","gestureManagerRef","useRef","useEffect","svg","current","gestures","name","threshold","maxPointers","preventIf","sensitivity","initialDelta","duration","dragThreshold","gestureManager","undefined","registerElement","unregisterAllGestures","addInteractionListener","useCallback","interaction","callback","options","addEventListener","cleanup","removeEventListener","updateZoomInteractionListeners","setGestureOptions","instance","params","getInitialState"],"sources":["/Users/vedachari/projects/weather-balloon/node_modules/@mui/x-charts/esm/internals/plugins/corePlugins/useChartInteractionListener/useChartInteractionListener.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { GestureManager, MoveGesture, PanGesture, PinchGesture, PressAndDragGesture, PressGesture, TapAndDragGesture, TapGesture, TurnWheelGesture } from '@mui/x-internal-gestures/core';\nconst preventDefault = event => event.preventDefault();\nexport const useChartInteractionListener = ({\n  svgRef\n}) => {\n  const gestureManagerRef = React.useRef(null);\n  React.useEffect(() => {\n    const svg = svgRef.current;\n    if (!gestureManagerRef.current) {\n      gestureManagerRef.current = new GestureManager({\n        gestures: [\n        // We separate the zoom gestures from the gestures that are not zoom related\n        // This allows us to configure the zoom gestures based on the zoom configuration.\n        new PanGesture({\n          name: 'pan',\n          threshold: 0,\n          maxPointers: 1\n        }), new PanGesture({\n          name: 'zoomPan',\n          threshold: 0,\n          maxPointers: 1,\n          preventIf: ['zoomTapAndDrag', 'zoomPressAndDrag']\n        }), new MoveGesture({\n          name: 'move',\n          preventIf: ['pan', 'zoomPinch', 'zoomPan'] // Prevent move gesture when pan is active\n        }), new PinchGesture({\n          name: 'zoomPinch',\n          threshold: 5,\n          preventIf: ['pan', 'zoomPan']\n        }), new TurnWheelGesture({\n          name: 'zoomTurnWheel',\n          sensitivity: 0.01,\n          initialDelta: 1\n        }), new TapGesture({\n          name: 'tap',\n          preventIf: ['pan', 'zoomPan', 'zoomPinch']\n        }), new PressGesture({\n          name: 'quickPress',\n          duration: 50\n        }), new TapAndDragGesture({\n          name: 'zoomTapAndDrag',\n          dragThreshold: 10\n        }), new PressAndDragGesture({\n          name: 'zoomPressAndDrag',\n          dragThreshold: 10,\n          preventIf: ['zoomPinch']\n        })]\n      });\n    }\n\n    // Assign gesture manager after initialization\n    const gestureManager = gestureManagerRef.current;\n    if (!svg || !gestureManager) {\n      return undefined;\n    }\n    gestureManager.registerElement(['pan', 'move', 'zoomPinch', 'zoomPan', 'zoomTurnWheel', 'tap', 'quickPress', 'zoomTapAndDrag', 'zoomPressAndDrag'], svg);\n    return () => {\n      // Cleanup gesture manager\n      gestureManager.unregisterAllGestures(svg);\n    };\n  }, [svgRef, gestureManagerRef]);\n  const addInteractionListener = React.useCallback((interaction, callback, options) => {\n    // Forcefully cast the svgRef to any, it is annoying to fix the types.\n    const svg = svgRef.current;\n    svg?.addEventListener(interaction, callback, options);\n    return {\n      cleanup: () => svg?.removeEventListener(interaction, callback)\n    };\n  }, [svgRef]);\n  const updateZoomInteractionListeners = React.useCallback((interaction, options) => {\n    const svg = svgRef.current;\n    const gestureManager = gestureManagerRef.current;\n    if (!gestureManager || !svg) {\n      return;\n    }\n    gestureManager.setGestureOptions(interaction, svg, options ?? {});\n  }, [svgRef, gestureManagerRef]);\n  React.useEffect(() => {\n    const svg = svgRef.current;\n\n    // Disable gesture on safari\n    // https://use-gesture.netlify.app/docs/gestures/#about-the-pinch-gesture\n    svg?.addEventListener('gesturestart', preventDefault);\n    svg?.addEventListener('gesturechange', preventDefault);\n    svg?.addEventListener('gestureend', preventDefault);\n    return () => {\n      svg?.removeEventListener('gesturestart', preventDefault);\n      svg?.removeEventListener('gesturechange', preventDefault);\n      svg?.removeEventListener('gestureend', preventDefault);\n    };\n  }, [svgRef]);\n  return {\n    instance: {\n      addInteractionListener,\n      updateZoomInteractionListeners\n    }\n  };\n};\nuseChartInteractionListener.params = {};\nuseChartInteractionListener.getInitialState = () => {\n  return {};\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
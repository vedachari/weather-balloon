{"ast":null,"code":"var _jsxFileName = \"/Users/vedachari/projects/weather-balloon/src/components/Meteo.tsx\",\n  _s = $RefreshSig$();\nimport { fetchWeatherApi } from 'openmeteo';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Meteo = ({\n  lat,\n  lon\n}) => {\n  _s();\n  var _weatherData$hourly$t;\n  const [weatherData, setWeatherData] = useState(null);\n  useEffect(() => {\n    const fetchWeather = async () => {\n      try {\n        const params = {\n          \"latitude\": lat,\n          \"longitude\": lon,\n          \"hourly\": \"temperature_2m\"\n        };\n        const url = \"https://api.open-meteo.com/v1/forecast\";\n        const responses = await fetchWeatherApi(url, params);\n\n        // Process first location. Add a for-loop for multiple locations or weather models\n        const response = responses[0];\n\n        // Attributes for timezone and location\n        const latitude = response.latitude();\n        const longitude = response.longitude();\n        const elevation = response.elevation();\n        const utcOffsetSeconds = response.utcOffsetSeconds();\n        console.log(`\\nCoordinates: ${latitude}°N ${longitude}°E`, `\\nElevation: ${elevation}m asl`, `\\nTimezone difference to GMT+0: ${utcOffsetSeconds}s`);\n        const hourly = response.hourly();\n\n        // Note: The order of weather variables in the URL query and the indices below need to match!\n        const data = {\n          latitude: response.latitude(),\n          longitude: response.longitude(),\n          elevation: response.elevation(),\n          hourly: {\n            time: [...Array((Number(hourly.timeEnd()) - Number(hourly.time())) / hourly.interval())].map((_, i) => new Date((Number(hourly.time()) + i * hourly.interval() + utcOffsetSeconds) * 1000)),\n            temperature_2m: hourly.variables(0).valuesArray()\n          }\n        };\n        setWeatherData(data);\n      } catch (error) {\n        console.error(\"Failed to fetch weather data:\", error);\n      }\n    };\n    fetchWeather();\n  }, [lat, lon]);\n  if (!weatherData) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \" Loading weather data\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 29\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Coordinates: \", weatherData.latitude.toFixed(2), \"\\xB0,\", \" \", weatherData.longitude.toFixed(2), \"\\xB0\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Elevation: \", weatherData.elevation, \" m\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"First Hourly Temp: \", (_weatherData$hourly$t = weatherData.hourly.temperature_2m) === null || _weatherData$hourly$t === void 0 ? void 0 : _weatherData$hourly$t[0], \" \\xB0C\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(Meteo, \"BCUo9muHyxrqajg6diFxqqqjG/A=\");\n_c = Meteo;\nexport default Meteo;\nvar _c;\n$RefreshReg$(_c, \"Meteo\");","map":{"version":3,"names":["fetchWeatherApi","useEffect","useState","jsxDEV","_jsxDEV","Meteo","lat","lon","_s","_weatherData$hourly$t","weatherData","setWeatherData","fetchWeather","params","url","responses","response","latitude","longitude","elevation","utcOffsetSeconds","console","log","hourly","data","time","Array","Number","timeEnd","interval","map","_","i","Date","temperature_2m","variables","valuesArray","error","children","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","_c","$RefreshReg$"],"sources":["/Users/vedachari/projects/weather-balloon/src/components/Meteo.tsx"],"sourcesContent":["import { fetchWeatherApi } from 'openmeteo';\nimport { useEffect, useState } from 'react';\n\ninterface MeteoProps{\n    lat: number;\n    lon: number;\n}\n\nconst Meteo: React.FC<MeteoProps> = ({lat, lon}) => {\n    const [weatherData, setWeatherData] = useState<any>(null);\n\n    useEffect(() => {\n        const fetchWeather = async () => {\n            try{\n                const params = {\n                \"latitude\": lat,\n                \"longitude\": lon,\n                \"hourly\": \"temperature_2m\",\n            };\n            const url = \"https://api.open-meteo.com/v1/forecast\";\n            const responses = await fetchWeatherApi(url, params);\n\n            // Process first location. Add a for-loop for multiple locations or weather models\n            const response = responses[0];\n\n            // Attributes for timezone and location\n            const latitude = response.latitude();\n            const longitude = response.longitude();\n            const elevation = response.elevation();\n            const utcOffsetSeconds = response.utcOffsetSeconds();\n\n            console.log(\n                `\\nCoordinates: ${latitude}°N ${longitude}°E`,\n                `\\nElevation: ${elevation}m asl`,\n                `\\nTimezone difference to GMT+0: ${utcOffsetSeconds}s`,\n            );\n\n            const hourly = response.hourly()!;\n\n            // Note: The order of weather variables in the URL query and the indices below need to match!\n            const data = {\n                latitude: response.latitude(),\n                longitude: response.longitude(),\n                elevation: response.elevation(),\n                hourly: {\n                    time: [...Array((Number(hourly.timeEnd()) - Number(hourly.time())) / hourly.interval())].map(\n                        (_, i) => new Date((Number(hourly.time()) + i * hourly.interval() + utcOffsetSeconds) * 1000)\n                    ),\n                    temperature_2m: hourly.variables(0)!.valuesArray(),\n                },\n            };\n            setWeatherData(data);\n            } catch (error) {\n                console.error(\"Failed to fetch weather data:\", error);\n            }\n        };\n        fetchWeather();\n    }, [lat, lon]);\n\n    if(!weatherData) return <p> Loading weather data</p>\n    return (\n    <div>\n      <h3>\n        Coordinates: {weatherData.latitude.toFixed(2)}°,{\" \"}\n        {weatherData.longitude.toFixed(2)}°\n      </h3>\n      <p>Elevation: {weatherData.elevation} m</p>\n      <p>First Hourly Temp: {weatherData.hourly.temperature_2m?.[0]} °C</p>\n    </div>\n  );\n}\n\nexport default Meteo;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
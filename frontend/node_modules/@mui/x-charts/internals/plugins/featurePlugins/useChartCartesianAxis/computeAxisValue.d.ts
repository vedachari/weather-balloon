import { NumberValue } from '@mui/x-charts-vendor/d3-scale.js';
import { ChartsXAxisProps, ChartsAxisProps, ChartsYAxisProps, AxisId, DefaultedXAxis, DefaultedYAxis, D3Scale } from "@mui/x-charts/models/axis.js";
import { ChartSeriesType } from "@mui/x-charts/models/seriesType/config.js";
import type { ChartDrawingArea } from "@mui/x-charts/hooks/index.js";
import { ChartSeriesConfig } from "@mui/x-charts/internals/plugins/models/seriesConfig/index.js";
import { ComputedAxisConfig } from "@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/useChartCartesianAxis.types.js";
import { ProcessedSeries } from "@mui/x-charts/internals/plugins/corePlugins/useChartSeries/useChartSeries.types.js";
import { ZoomData } from "@mui/x-charts/internals/plugins/featurePlugins/useChartCartesianAxis/zoom.types.js";
export type ComputeResult<T extends ChartsAxisProps> = {
  axis: ComputedAxisConfig<T>;
  axisIds: AxisId[];
};
type ComputeCommonParams<T extends ChartSeriesType = ChartSeriesType> = {
  scales: Record<AxisId, D3Scale>;
  drawingArea: ChartDrawingArea;
  formattedSeries: ProcessedSeries<T>;
  seriesConfig: ChartSeriesConfig<T>;
  zoomMap?: Map<AxisId, ZoomData>;
  domains: Record<AxisId, {
    domain: ReadonlyArray<string | NumberValue>;
    tickNumber?: number;
  }>;
};
export declare function computeAxisValue<T extends ChartSeriesType>(options: ComputeCommonParams<T> & {
  axis?: DefaultedYAxis[];
  axisDirection: 'y';
}): ComputeResult<ChartsYAxisProps>;
export declare function computeAxisValue<T extends ChartSeriesType>(options: ComputeCommonParams<T> & {
  axis?: DefaultedXAxis[];
  axisDirection: 'x';
}): ComputeResult<ChartsXAxisProps>;
export {};
{"ast":null,"code":"import { getAngle } from \"./getAngle.js\";\n\n/**\n * Calculate the rotation angle between pointers\n * This uses the angle between the first two pointers relative to the centroid\n */\nexport function calculateRotationAngle(pointers) {\n  if (pointers.length < 2) {\n    return 0;\n  }\n\n  // For rotation, we need exactly 2 pointers\n  // Use first two since they're most likely the primary pointers\n  const p1 = {\n    x: pointers[0].clientX,\n    y: pointers[0].clientY\n  };\n  const p2 = {\n    x: pointers[1].clientX,\n    y: pointers[1].clientY\n  };\n  return getAngle(p1, p2);\n}","map":{"version":3,"names":["getAngle","calculateRotationAngle","pointers","length","p1","x","clientX","y","clientY","p2"],"sources":["/Users/vedachari/projects/weather-balloon/node_modules/@mui/x-internal-gestures/esm/core/utils/calculateRotationAngle.js"],"sourcesContent":["import { getAngle } from \"./getAngle.js\";\n\n/**\n * Calculate the rotation angle between pointers\n * This uses the angle between the first two pointers relative to the centroid\n */\nexport function calculateRotationAngle(pointers) {\n  if (pointers.length < 2) {\n    return 0;\n  }\n\n  // For rotation, we need exactly 2 pointers\n  // Use first two since they're most likely the primary pointers\n  const p1 = {\n    x: pointers[0].clientX,\n    y: pointers[0].clientY\n  };\n  const p2 = {\n    x: pointers[1].clientX,\n    y: pointers[1].clientY\n  };\n  return getAngle(p1, p2);\n}"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,eAAe;;AAExC;AACA;AACA;AACA;AACA,OAAO,SAASC,sBAAsBA,CAACC,QAAQ,EAAE;EAC/C,IAAIA,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;IACvB,OAAO,CAAC;EACV;;EAEA;EACA;EACA,MAAMC,EAAE,GAAG;IACTC,CAAC,EAAEH,QAAQ,CAAC,CAAC,CAAC,CAACI,OAAO;IACtBC,CAAC,EAAEL,QAAQ,CAAC,CAAC,CAAC,CAACM;EACjB,CAAC;EACD,MAAMC,EAAE,GAAG;IACTJ,CAAC,EAAEH,QAAQ,CAAC,CAAC,CAAC,CAACI,OAAO;IACtBC,CAAC,EAAEL,QAAQ,CAAC,CAAC,CAAC,CAACM;EACjB,CAAC;EACD,OAAOR,QAAQ,CAACI,EAAE,EAAEK,EAAE,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
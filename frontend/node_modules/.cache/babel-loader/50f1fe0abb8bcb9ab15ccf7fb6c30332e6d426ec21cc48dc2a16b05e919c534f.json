{"ast":null,"code":"import { lruMemoize, createSelectorCreator } from 'reselect';\nconst reselectCreateSelector = createSelectorCreator({\n  memoize: lruMemoize,\n  memoizeOptions: {\n    maxSize: 1,\n    equalityCheck: Object.is\n  }\n});\nconst cache = new WeakMap();\n/**\n * Method wrapping reselect's createSelector to provide caching for chart instances.\n *\n */\nexport const createSelector = (...createSelectorArgs) => {\n  const selector = (state, ...selectorArgs) => {\n    const cacheKey = state.cacheKey;\n\n    // If there is no cache for the current chart instance, create one.\n    let cacheForCurrentChartInstance = cache.get(cacheKey);\n    if (!cacheForCurrentChartInstance) {\n      cacheForCurrentChartInstance = new Map();\n      cache.set(cacheKey, cacheForCurrentChartInstance);\n    }\n\n    // If there is a cached selector, execute it.\n    const cachedSelector = cacheForCurrentChartInstance.get(createSelectorArgs);\n    if (cachedSelector) {\n      return cachedSelector(state, ...selectorArgs);\n    }\n\n    // Otherwise, create a new selector and cache it and execute it.\n    const fn = reselectCreateSelector(...createSelectorArgs);\n    cacheForCurrentChartInstance.set(createSelectorArgs, fn);\n    return fn(state, ...selectorArgs);\n  };\n  return selector;\n};","map":{"version":3,"names":["lruMemoize","createSelectorCreator","reselectCreateSelector","memoize","memoizeOptions","maxSize","equalityCheck","Object","is","cache","WeakMap","createSelector","createSelectorArgs","selector","state","selectorArgs","cacheKey","cacheForCurrentChartInstance","get","Map","set","cachedSelector","fn"],"sources":["/Users/vedachari/projects/weather-balloon/node_modules/@mui/x-charts/esm/internals/plugins/utils/selectors.js"],"sourcesContent":["import { lruMemoize, createSelectorCreator } from 'reselect';\nconst reselectCreateSelector = createSelectorCreator({\n  memoize: lruMemoize,\n  memoizeOptions: {\n    maxSize: 1,\n    equalityCheck: Object.is\n  }\n});\nconst cache = new WeakMap();\n/**\n * Method wrapping reselect's createSelector to provide caching for chart instances.\n *\n */\nexport const createSelector = (...createSelectorArgs) => {\n  const selector = (state, ...selectorArgs) => {\n    const cacheKey = state.cacheKey;\n\n    // If there is no cache for the current chart instance, create one.\n    let cacheForCurrentChartInstance = cache.get(cacheKey);\n    if (!cacheForCurrentChartInstance) {\n      cacheForCurrentChartInstance = new Map();\n      cache.set(cacheKey, cacheForCurrentChartInstance);\n    }\n\n    // If there is a cached selector, execute it.\n    const cachedSelector = cacheForCurrentChartInstance.get(createSelectorArgs);\n    if (cachedSelector) {\n      return cachedSelector(state, ...selectorArgs);\n    }\n\n    // Otherwise, create a new selector and cache it and execute it.\n    const fn = reselectCreateSelector(...createSelectorArgs);\n    cacheForCurrentChartInstance.set(createSelectorArgs, fn);\n    return fn(state, ...selectorArgs);\n  };\n  return selector;\n};"],"mappings":"AAAA,SAASA,UAAU,EAAEC,qBAAqB,QAAQ,UAAU;AAC5D,MAAMC,sBAAsB,GAAGD,qBAAqB,CAAC;EACnDE,OAAO,EAAEH,UAAU;EACnBI,cAAc,EAAE;IACdC,OAAO,EAAE,CAAC;IACVC,aAAa,EAAEC,MAAM,CAACC;EACxB;AACF,CAAC,CAAC;AACF,MAAMC,KAAK,GAAG,IAAIC,OAAO,CAAC,CAAC;AAC3B;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGA,CAAC,GAAGC,kBAAkB,KAAK;EACvD,MAAMC,QAAQ,GAAGA,CAACC,KAAK,EAAE,GAAGC,YAAY,KAAK;IAC3C,MAAMC,QAAQ,GAAGF,KAAK,CAACE,QAAQ;;IAE/B;IACA,IAAIC,4BAA4B,GAAGR,KAAK,CAACS,GAAG,CAACF,QAAQ,CAAC;IACtD,IAAI,CAACC,4BAA4B,EAAE;MACjCA,4BAA4B,GAAG,IAAIE,GAAG,CAAC,CAAC;MACxCV,KAAK,CAACW,GAAG,CAACJ,QAAQ,EAAEC,4BAA4B,CAAC;IACnD;;IAEA;IACA,MAAMI,cAAc,GAAGJ,4BAA4B,CAACC,GAAG,CAACN,kBAAkB,CAAC;IAC3E,IAAIS,cAAc,EAAE;MAClB,OAAOA,cAAc,CAACP,KAAK,EAAE,GAAGC,YAAY,CAAC;IAC/C;;IAEA;IACA,MAAMO,EAAE,GAAGpB,sBAAsB,CAAC,GAAGU,kBAAkB,CAAC;IACxDK,4BAA4B,CAACG,GAAG,CAACR,kBAAkB,EAAEU,EAAE,CAAC;IACxD,OAAOA,EAAE,CAACR,KAAK,EAAE,GAAGC,YAAY,CAAC;EACnC,CAAC;EACD,OAAOF,QAAQ;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
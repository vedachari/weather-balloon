{"ast":null,"code":"import { deg2rad } from \"../internals/angleConversion.js\";\nfunction getPoint(angle) {\n  const radAngle = deg2rad(angle);\n  return [Math.sin(radAngle), -Math.cos(radAngle)];\n}\n\n/**\n * Returns the ratio of the arc bounding box and its center.\n * @param startAngle The start angle (in deg)\n * @param endAngle The end angle (in deg)\n */\nexport function getArcRatios(startAngle, endAngle) {\n  // Set the start, end and center point.\n  const points = [[0, 0], getPoint(startAngle), getPoint(endAngle)];\n\n  // Add cardinal points included in the arc\n  const minAngle = Math.min(startAngle, endAngle);\n  const maxAngle = Math.max(startAngle, endAngle);\n  const initialAngle = Math.floor(minAngle / 90) * 90;\n  for (let step = 1; step <= 4; step += 1) {\n    const cardinalAngle = initialAngle + step * 90;\n    if (cardinalAngle < maxAngle) {\n      points.push(getPoint(cardinalAngle));\n    }\n  }\n  const minX = Math.min(...points.map(([x]) => x));\n  const maxX = Math.max(...points.map(([x]) => x));\n  const minY = Math.min(...points.map(([, y]) => y));\n  const maxY = Math.max(...points.map(([, y]) => y));\n  return {\n    cx: -minX / (maxX - minX),\n    cy: -minY / (maxY - minY),\n    minX,\n    maxX,\n    minY,\n    maxY\n  };\n}\nexport function getAvailableRadius(cx, cy, width, height, {\n  minX,\n  maxX,\n  minY,\n  maxY\n}) {\n  return Math.min(...[{\n    ratio: Math.abs(minX),\n    space: cx\n  }, {\n    ratio: Math.abs(maxX),\n    space: width - cx\n  }, {\n    ratio: Math.abs(minY),\n    space: cy\n  }, {\n    ratio: Math.abs(maxY),\n    space: height - cy\n  }].map(({\n    ratio,\n    space\n  }) => {\n    if (ratio < 0.00001) {\n      return Infinity;\n    }\n    return space / ratio;\n  }));\n}","map":{"version":3,"names":["deg2rad","getPoint","angle","radAngle","Math","sin","cos","getArcRatios","startAngle","endAngle","points","minAngle","min","maxAngle","max","initialAngle","floor","step","cardinalAngle","push","minX","map","x","maxX","minY","y","maxY","cx","cy","getAvailableRadius","width","height","ratio","abs","space","Infinity"],"sources":["/Users/vedachari/projects/weather-balloon/node_modules/@mui/x-charts/esm/Gauge/utils.js"],"sourcesContent":["import { deg2rad } from \"../internals/angleConversion.js\";\nfunction getPoint(angle) {\n  const radAngle = deg2rad(angle);\n  return [Math.sin(radAngle), -Math.cos(radAngle)];\n}\n\n/**\n * Returns the ratio of the arc bounding box and its center.\n * @param startAngle The start angle (in deg)\n * @param endAngle The end angle (in deg)\n */\nexport function getArcRatios(startAngle, endAngle) {\n  // Set the start, end and center point.\n  const points = [[0, 0], getPoint(startAngle), getPoint(endAngle)];\n\n  // Add cardinal points included in the arc\n  const minAngle = Math.min(startAngle, endAngle);\n  const maxAngle = Math.max(startAngle, endAngle);\n  const initialAngle = Math.floor(minAngle / 90) * 90;\n  for (let step = 1; step <= 4; step += 1) {\n    const cardinalAngle = initialAngle + step * 90;\n    if (cardinalAngle < maxAngle) {\n      points.push(getPoint(cardinalAngle));\n    }\n  }\n  const minX = Math.min(...points.map(([x]) => x));\n  const maxX = Math.max(...points.map(([x]) => x));\n  const minY = Math.min(...points.map(([, y]) => y));\n  const maxY = Math.max(...points.map(([, y]) => y));\n  return {\n    cx: -minX / (maxX - minX),\n    cy: -minY / (maxY - minY),\n    minX,\n    maxX,\n    minY,\n    maxY\n  };\n}\nexport function getAvailableRadius(cx, cy, width, height, {\n  minX,\n  maxX,\n  minY,\n  maxY\n}) {\n  return Math.min(...[{\n    ratio: Math.abs(minX),\n    space: cx\n  }, {\n    ratio: Math.abs(maxX),\n    space: width - cx\n  }, {\n    ratio: Math.abs(minY),\n    space: cy\n  }, {\n    ratio: Math.abs(maxY),\n    space: height - cy\n  }].map(({\n    ratio,\n    space\n  }) => {\n    if (ratio < 0.00001) {\n      return Infinity;\n    }\n    return space / ratio;\n  }));\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}